
Riverdi_5_Inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_fb      00000000  20000000  20000000  00011028  2**0
                  CONTENTS
  1 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ecbc  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  0800ef28  0800ef28  0000ff28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800f028  0800f028  00010028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800f030  0800f030  00010030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  0800f034  0800f034  00010034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000028  20000000  0800f038  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000938  20000028  0800f060  00011028  2**2
                  ALLOC
  9 ._user_heap_stack 0001c000  20000960  0800f060  00011960  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  00011028  2**0
                  CONTENTS, READONLY
 11 .debug_info   000316ac  00000000  00000000  0001105e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000057bf  00000000  00000000  0004270a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002a80  00000000  00000000  00047ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002106  00000000  00000000  0004a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000496b2  00000000  00000000  0004ca56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000386b0  00000000  00000000  00096108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c0bc2  00000000  00000000  000ce7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028f37a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ba04  00000000  00000000  0028f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  0029adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20000028 	.word	0x20000028
 8000288:	00000000 	.word	0x00000000
 800028c:	0800ef10 	.word	0x0800ef10

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	0800ef10 	.word	0x0800ef10

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b97e 	b.w	80005c0 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002e2:	460c      	mov	r4, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14d      	bne.n	8000384 <__udivmoddi4+0xa8>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	460f      	mov	r7, r1
 80002ec:	4684      	mov	ip, r0
 80002ee:	4696      	mov	lr, r2
 80002f0:	fab2 f382 	clz	r3, r2
 80002f4:	d960      	bls.n	80003b8 <__udivmoddi4+0xdc>
 80002f6:	b14b      	cbz	r3, 800030c <__udivmoddi4+0x30>
 80002f8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa00 fc03 	lsl.w	ip, r0, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000310:	fa1f f48e 	uxth.w	r4, lr
 8000314:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000318:	fbb7 f1f6 	udiv	r1, r7, r6
 800031c:	fb06 7711 	mls	r7, r6, r1, r7
 8000320:	fb01 f004 	mul.w	r0, r1, r4
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x62>
 800032c:	eb1e 0202 	adds.w	r2, lr, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x60>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 812d 	bhi.w	8000596 <__udivmoddi4+0x2ba>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fa1f fc8c 	uxth.w	ip, ip
 8000344:	fbb2 f0f6 	udiv	r0, r2, r6
 8000348:	fb06 2210 	mls	r2, r6, r0, r2
 800034c:	fb00 f404 	mul.w	r4, r0, r4
 8000350:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000354:	4564      	cmp	r4, ip
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x8e>
 8000358:	eb1e 0c0c 	adds.w	ip, lr, ip
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x8c>
 8000362:	4564      	cmp	r4, ip
 8000364:	f200 811a 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036e:	ebac 0c04 	sub.w	ip, ip, r4
 8000372:	2100      	movs	r1, #0
 8000374:	b125      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000376:	fa2c f303 	lsr.w	r3, ip, r3
 800037a:	2200      	movs	r2, #0
 800037c:	e9c5 3200 	strd	r3, r2, [r5]
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0xb8>
 8000388:	b10d      	cbz	r5, 800038e <__udivmoddi4+0xb2>
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e7f5      	b.n	8000380 <__udivmoddi4+0xa4>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x15c>
 800039c:	42a3      	cmp	r3, r4
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2aa>
 80003a2:	4290      	cmp	r0, r2
 80003a4:	f080 80ef 	bcs.w	8000586 <__udivmoddi4+0x2aa>
 80003a8:	4606      	mov	r6, r0
 80003aa:	4623      	mov	r3, r4
 80003ac:	4608      	mov	r0, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e6      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003b2:	e9c5 6300 	strd	r6, r3, [r5]
 80003b6:	e7e3      	b.n	8000380 <__udivmoddi4+0xa4>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80a2 	bne.w	8000502 <__udivmoddi4+0x226>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c4:	fa1f f68e 	uxth.w	r6, lr
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ce:	fb07 2014 	mls	r0, r7, r4, r2
 80003d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb06 f004 	mul.w	r0, r6, r4
 80003de:	4290      	cmp	r0, r2
 80003e0:	d90f      	bls.n	8000402 <__udivmoddi4+0x126>
 80003e2:	eb1e 0202 	adds.w	r2, lr, r2
 80003e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	f04f 0901 	movcs.w	r9, #1
 80003f0:	f04f 0900 	movcc.w	r9, #0
 80003f4:	4290      	cmp	r0, r2
 80003f6:	d903      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	f000 80c8 	beq.w	8000590 <__udivmoddi4+0x2b4>
 8000400:	4644      	mov	r4, r8
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	fa1f fc8c 	uxth.w	ip, ip
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	fb00 f606 	mul.w	r6, r0, r6
 8000414:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000418:	4566      	cmp	r6, ip
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x152>
 800041c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x150>
 8000426:	4566      	cmp	r6, ip
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 800042c:	4610      	mov	r0, r2
 800042e:	ebac 0c06 	sub.w	ip, ip, r6
 8000432:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000436:	e79d      	b.n	8000374 <__udivmoddi4+0x98>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa20 fc06 	lsr.w	ip, r0, r6
 800044a:	40f4      	lsrs	r4, r6
 800044c:	408a      	lsls	r2, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	ea4e 030c 	orr.w	r3, lr, ip
 8000454:	fa00 fe01 	lsl.w	lr, r0, r1
 8000458:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fbb4 f0f8 	udiv	r0, r4, r8
 8000468:	fb08 4410 	mls	r4, r8, r0, r4
 800046c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000470:	fb00 f90c 	mul.w	r9, r0, ip
 8000474:	45a1      	cmp	r9, r4
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1ba>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f100 3aff 	add.w	sl, r0, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a1      	cmp	r9, r4
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 8093 	beq.w	80005ba <__udivmoddi4+0x2de>
 8000494:	4650      	mov	r0, sl
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f8 	udiv	r3, r4, r8
 80004a2:	fb08 4413 	mls	r4, r8, r3, r4
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1e4>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1e2>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d87a      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 9802 	umull	r9, r8, r0, r2
 80004cc:	4544      	cmp	r4, r8
 80004ce:	46cc      	mov	ip, r9
 80004d0:	4643      	mov	r3, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1fe>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x208>
 80004d6:	45ce      	cmp	lr, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x208>
 80004da:	3801      	subs	r0, #1
 80004dc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e0:	eb68 0307 	sbc.w	r3, r8, r7
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x222>
 80004e6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ea:	eb64 0403 	sbc.w	r4, r4, r3
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e73e      	b.n	8000380 <__udivmoddi4+0xa4>
 8000502:	fa02 fe03 	lsl.w	lr, r2, r3
 8000506:	f1c3 0120 	rsb	r1, r3, #32
 800050a:	fa04 f203 	lsl.w	r2, r4, r3
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa1f f68e 	uxth.w	r6, lr
 8000520:	fbb4 f0f7 	udiv	r0, r4, r7
 8000524:	430a      	orrs	r2, r1
 8000526:	fb07 4410 	mls	r4, r7, r0, r4
 800052a:	0c11      	lsrs	r1, r2, #16
 800052c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000530:	fb00 f406 	mul.w	r4, r0, r6
 8000534:	428c      	cmp	r4, r1
 8000536:	d90e      	bls.n	8000556 <__udivmoddi4+0x27a>
 8000538:	eb1e 0101 	adds.w	r1, lr, r1
 800053c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0901 	movcs.w	r9, #1
 8000546:	f04f 0900 	movcc.w	r9, #0
 800054a:	428c      	cmp	r4, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x278>
 800054e:	f1b9 0f00 	cmp.w	r9, #0
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x2d2>
 8000554:	4640      	mov	r0, r8
 8000556:	1b09      	subs	r1, r1, r4
 8000558:	b292      	uxth	r2, r2
 800055a:	fbb1 f4f7 	udiv	r4, r1, r7
 800055e:	fb07 1114 	mls	r1, r7, r4, r1
 8000562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000566:	fb04 f106 	mul.w	r1, r4, r6
 800056a:	4291      	cmp	r1, r2
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x2a2>
 800056e:	eb1e 0202 	adds.w	r2, lr, r2
 8000572:	f104 38ff 	add.w	r8, r4, #4294967295
 8000576:	d201      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000578:	4291      	cmp	r1, r2
 800057a:	d815      	bhi.n	80005a8 <__udivmoddi4+0x2cc>
 800057c:	4644      	mov	r4, r8
 800057e:	1a52      	subs	r2, r2, r1
 8000580:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000584:	e721      	b.n	80003ca <__udivmoddi4+0xee>
 8000586:	1a86      	subs	r6, r0, r2
 8000588:	eb64 0303 	sbc.w	r3, r4, r3
 800058c:	2001      	movs	r0, #1
 800058e:	e70e      	b.n	80003ae <__udivmoddi4+0xd2>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e735      	b.n	8000402 <__udivmoddi4+0x126>
 8000596:	3902      	subs	r1, #2
 8000598:	4472      	add	r2, lr
 800059a:	e6d0      	b.n	800033e <__udivmoddi4+0x62>
 800059c:	44f4      	add	ip, lr
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e3      	b.n	800036a <__udivmoddi4+0x8e>
 80005a2:	44f4      	add	ip, lr
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x152>
 80005a8:	3c02      	subs	r4, #2
 80005aa:	4472      	add	r2, lr
 80005ac:	e7e7      	b.n	800057e <__udivmoddi4+0x2a2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4471      	add	r1, lr
 80005b2:	e7d0      	b.n	8000556 <__udivmoddi4+0x27a>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x1e4>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e76a      	b.n	8000496 <__udivmoddi4+0x1ba>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <InitHana>:
static uint16_t *back_buffer = framebuffer2;

DMA2D_HandleTypeDef * hdma2d;

void InitHana(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	hdma2d = Get_HDMA2D_StructPtr(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 f807 	bl	80005dc <Get_HDMA2D_StructPtr>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a01      	ldr	r2, [pc, #4]	@ (80005d8 <InitHana+0x14>)
 80005d2:	6013      	str	r3, [r2, #0]
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000044 	.word	0x20000044

080005dc <Get_HDMA2D_StructPtr>:
	   return hdcache2;
	}
}

DMA2D_HandleTypeDef * Get_HDMA2D_StructPtr(uint8_t nr)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
	switch(nr)
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d101      	bne.n	80005f0 <Get_HDMA2D_StructPtr+0x14>
	{
	  case 1:
		return &hdma2d;
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <Get_HDMA2D_StructPtr+0x20>)
 80005ee:	e7ff      	b.n	80005f0 <Get_HDMA2D_StructPtr+0x14>
	}
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200001cc 	.word	0x200001cc

08000600 <InitPeripherals>:
	   return huart6;
	}
}

void InitPeripherals(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	  HAL_Init();
 8000604:	f002 fe0e 	bl	8003224 <HAL_Init>

      /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f001 f928 	bl	800185c <MX_GPIO_Init>
  MX_ADC1_Init();
 800060c:	f000 f8d2 	bl	80007b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000610:	f000 f940 	bl	8000894 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000614:	f000 f9ae 	bl	8000974 <MX_DAC1_Init>
  MX_DCACHE1_Init();
 8000618:	f000 fa00 	bl	8000a1c <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 800061c:	f000 fa14 	bl	8000a48 <MX_DCACHE2_Init>
  MX_DMA2D_Init();
 8000620:	f000 fa3e 	bl	8000aa0 <MX_DMA2D_Init>
  MX_FLASH_Init();
 8000624:	f000 fa7a 	bl	8000b1c <MX_FLASH_Init>
  MX_I2C1_Init();
 8000628:	f000 fac0 	bl	8000bac <MX_I2C1_Init>
  MX_I2C2_Init();
 800062c:	f000 fafe 	bl	8000c2c <MX_I2C2_Init>
  MX_I2C4_Init();
 8000630:	f000 fb3c 	bl	8000cac <MX_I2C4_Init>
  MX_ICACHE_Init();
 8000634:	f000 fb7a 	bl	8000d2c <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 8000638:	f000 fc10 	bl	8000e5c <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 800063c:	f000 fc88 	bl	8000f50 <MX_RTC_Init>
  //MX_SDMMC2_SD_Init();
  MX_SPI1_Init();
 8000640:	f000 fd08 	bl	8001054 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000644:	f000 fd74 	bl	8001130 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000648:	f000 fde0 	bl	800120c <MX_TIM1_Init>
  MX_TIM3_Init();
 800064c:	f000 fe72 	bl	8001334 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000650:	f000 fef2 	bl	8001438 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000654:	f000 ff26 	bl	80014a4 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000658:	f000 ffc8 	bl	80015ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800065c:	f001 f812 	bl	8001684 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000660:	f001 f85c 	bl	800171c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000664:	f001 f8a6 	bl	80017b4 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000668:	f001 f8f0 	bl	800184c <MX_USB_OTG_HS_USB_Init>
  MX_GPU2D_Init();
 800066c:	f000 fa8a 	bl	8000b84 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8000670:	f000 fb70 	bl	8000d54 <MX_LTDC_Init>
}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}

08000678 <InitClocks>:

void InitClocks(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  SystemPower_Config();
 800067c:	f000 f88b 	bl	8000796 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f804 	bl	800068c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000684:	f000 f880 	bl	8000788 <PeriphCommonClock_Config>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09e      	sub	sp, #120	@ 0x78
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0318 	add.w	r3, r7, #24
 8000696:	2260      	movs	r2, #96	@ 0x60
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00e fc0b 	bl	800eeb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	463b      	mov	r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80006b4:	f006 fe5a 	bl	800736c <HAL_PWREx_ControlVoltageScaling>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006be:	f001 fa7e 	bl	8001bbe <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006c2:	f006 fe43 	bl	800734c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000784 <SystemClock_Config+0xf8>)
 80006c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80006cc:	4a2d      	ldr	r2, [pc, #180]	@ (8000784 <SystemClock_Config+0xf8>)
 80006ce:	f023 0318 	bic.w	r3, r3, #24
 80006d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006d6:	231f      	movs	r3, #31
 80006d8:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006da:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006e0:	2381      	movs	r3, #129	@ 0x81
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000708:	2303      	movs	r3, #3
 800070a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000710:	2301      	movs	r3, #1
 8000712:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000714:	230a      	movs	r3, #10
 8000716:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000720:	2301      	movs	r3, #1
 8000722:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000724:	230c      	movs	r3, #12
 8000726:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000728:	2300      	movs	r3, #0
 800072a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	4618      	mov	r0, r3
 8000732:	f006 ff27 	bl	8007584 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800073c:	f001 fa3f 	bl	8001bbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	231f      	movs	r3, #31
 8000742:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2303      	movs	r3, #3
 8000746:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000758:	463b      	mov	r3, r7
 800075a:	2104      	movs	r1, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f007 fded 	bl	800833c <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000768:	f001 fa29 	bl	8001bbe <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 800076c:	2200      	movs	r2, #0
 800076e:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000772:	2000      	movs	r0, #0
 8000774:	f007 ffd4 	bl	8008720 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000778:	f00b f8ec 	bl	800b954 <HAL_RCCEx_EnableLSECSS>
}
 800077c:	bf00      	nop
 800077e:	3778      	adds	r7, #120	@ 0x78
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	46020c00 	.word	0x46020c00

08000788 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800079a:	f006 fed3 	bl	8007544 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800079e:	2002      	movs	r0, #2
 80007a0:	f006 fe70 	bl	8007484 <HAL_PWREx_ConfigSupply>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemPower_Config+0x18>
  {
    Error_Handler();
 80007aa:	f001 fa08 	bl	8001bbe <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f00e fb78 	bl	800eeb6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c6:	4b30      	ldr	r3, [pc, #192]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007c8:	4a30      	ldr	r2, [pc, #192]	@ (800088c <MX_ADC1_Init+0xd8>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007de:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <MX_ADC1_Init+0xd4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000800:	2201      	movs	r2, #1
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <MX_ADC1_Init+0xd4>)
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000814:	2200      	movs	r2, #0
 8000816:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_ADC1_Init+0xd4>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000822:	2200      	movs	r2, #0
 8000824:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000826:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000828:	2200      	movs	r2, #0
 800082a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_ADC1_Init+0xd4>)
 800082e:	2200      	movs	r2, #0
 8000830:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_ADC1_Init+0xd4>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000842:	f003 f863 	bl	800390c <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800084c:	f001 f9b7 	bl	8001bbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ADC1_Init+0xdc>)
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000854:	2306      	movs	r3, #6
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	@ (8000888 <MX_ADC1_Init+0xd4>)
 8000870:	f003 fb34 	bl	8003edc <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800087a:	f001 f9a0 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000048 	.word	0x20000048
 800088c:	42028000 	.word	0x42028000
 8000890:	ca040000 	.word	0xca040000

08000894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2220      	movs	r2, #32
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f00e fb08 	bl	800eeb6 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008a6:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008a8:	4a30      	ldr	r2, [pc, #192]	@ (800096c <MX_ADC2_Init+0xd8>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_14B;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.GainCompensation = 0;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008be:	4b2a      	ldr	r3, [pc, #168]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	615a      	str	r2, [r3, #20]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c4:	4b28      	ldr	r3, [pc, #160]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ca:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d0:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.NbrOfConversion = 1;
 80008de:	4b22      	ldr	r3, [pc, #136]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_ADC2_Init+0xd4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_ADC2_Init+0xd4>)
 8000902:	2200      	movs	r2, #0
 8000904:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000906:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_ADC2_Init+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_ADC2_Init+0xd4>)
 800090e:	2200      	movs	r2, #0
 8000910:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_ADC2_Init+0xd4>)
 8000914:	2200      	movs	r2, #0
 8000916:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000918:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_ADC2_Init+0xd4>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000920:	4811      	ldr	r0, [pc, #68]	@ (8000968 <MX_ADC2_Init+0xd4>)
 8000922:	f002 fff3 	bl	800390c <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC2_Init+0x9c>
  {
    Error_Handler();
 800092c:	f001 f947 	bl	8001bbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_ADC2_Init+0xdc>)
 8000932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	2306      	movs	r3, #6
 8000936:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800093c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000940:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000942:	2304      	movs	r3, #4
 8000944:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_ADC2_Init+0xd4>)
 8000950:	f003 fac4 	bl	8003edc <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 800095a:	f001 f930 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000d4 	.word	0x200000d4
 800096c:	42028100 	.word	0x42028100
 8000970:	80000001 	.word	0x80000001

08000974 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2230      	movs	r2, #48	@ 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00e fa97 	bl	800eeb6 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_DAC1_Init+0xa0>)
 800098e:	4a22      	ldr	r2, [pc, #136]	@ (8000a18 <MX_DAC1_Init+0xa4>)
 8000990:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000992:	4820      	ldr	r0, [pc, #128]	@ (8000a14 <MX_DAC1_Init+0xa0>)
 8000994:	f004 f9f8 	bl	8004d88 <HAL_DAC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800099e:	f001 f90e 	bl	8001bbe <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <MX_DAC1_Init+0xa0>)
 80009cc:	f004 f9fe 	bl	8004dcc <HAL_DAC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 80009d6:	f001 f8f2 	bl	8001bbe <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <MX_DAC1_Init+0xa0>)
 80009e4:	f004 fb92 	bl	800510c <HAL_DACEx_SetConfigAutonomousMode>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80009ee:	f001 f8e6 	bl	8001bbe <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	2210      	movs	r2, #16
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_DAC1_Init+0xa0>)
 80009fc:	f004 f9e6 	bl	8004dcc <HAL_DAC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 8000a06:	f001 f8da 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000160 	.word	0x20000160
 8000a18:	46021800 	.word	0x46021800

08000a1c <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_DCACHE1_Init+0x24>)
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <MX_DCACHE1_Init+0x28>)
 8000a24:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_DCACHE1_Init+0x24>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_DCACHE1_Init+0x24>)
 8000a2e:	f004 fba5 	bl	800517c <HAL_DCACHE_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000a38:	f001 f8c1 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000174 	.word	0x20000174
 8000a44:	40031400 	.word	0x40031400

08000a48 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_DCACHE2_Init+0x4c>)
 8000a50:	4a11      	ldr	r2, [pc, #68]	@ (8000a98 <MX_DCACHE2_Init+0x50>)
 8000a52:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_DCACHE2_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000a5a:	480e      	ldr	r0, [pc, #56]	@ (8000a94 <MX_DCACHE2_Init+0x4c>)
 8000a5c:	f004 fb8e 	bl	800517c <HAL_DCACHE_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000a66:	f001 f8aa 	bl	8001bbe <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_DCACHE2_Init+0x54>)
 8000a6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a70:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <MX_DCACHE2_Init+0x54>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <MX_DCACHE2_Init+0x54>)
 8000a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 8000a88:	f002 fc40 	bl	800330c <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001a0 	.word	0x200001a0
 8000a98:	40031800 	.word	0x40031800
 8000a9c:	46020c00 	.word	0x46020c00

08000aa0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b18 <MX_DMA2D_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000abc:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d.LayerCfg[0].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[0].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000aec:	4809      	ldr	r0, [pc, #36]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000aee:	f004 fc6c 	bl	80053ca <HAL_DMA2D_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f001 f861 	bl	8001bbe <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_DMA2D_Init+0x74>)
 8000b00:	f004 fcc4 	bl	800548c <HAL_DMA2D_ConfigLayer>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f001 f858 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	200001cc 	.word	0x200001cc
 8000b18:	4002b000 	.word	0x4002b000

08000b1c <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_BBAttributesTypeDef FLASH_BBSecInitStruct = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2228      	movs	r2, #40	@ 0x28
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f00e f9c4 	bl	800eeb6 <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000b2e:	f004 fd4b 	bl	80055c8 <HAL_FLASH_Unlock>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000b38:	f001 f841 	bl	8001bbe <Error_Handler>
  }

  /* Block-based page protection */

  FLASH_BBSecInitStruct.Bank = FLASH_BANK_1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	603b      	str	r3, [r7, #0]
  FLASH_BBSecInitStruct.BBAttributesType = FLASH_BB_PRIV;
 8000b40:	2302      	movs	r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
  if (HAL_FLASHEx_ConfigBBAttributes(&FLASH_BBSecInitStruct) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 fdc0 	bl	80056cc <HAL_FLASHEx_ConfigBBAttributes>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_FLASH_Init+0x3a>
  {
    Error_Handler();
 8000b52:	f001 f834 	bl	8001bbe <Error_Handler>
  }
  FLASH_BBSecInitStruct.Bank = FLASH_BANK_2;
 8000b56:	2302      	movs	r3, #2
 8000b58:	603b      	str	r3, [r7, #0]
  if (HAL_FLASHEx_ConfigBBAttributes(&FLASH_BBSecInitStruct) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fdb5 	bl	80056cc <HAL_FLASHEx_ConfigBBAttributes>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_FLASH_Init+0x50>
  {
    Error_Handler();
 8000b68:	f001 f829 	bl	8001bbe <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000b6c:	f004 fd4e 	bl	800560c <HAL_FLASH_Lock>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_FLASH_Init+0x5e>
  {
    Error_Handler();
 8000b76:	f001 f822 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_GPU2D_Init+0x20>)
 8000b8a:	4a07      	ldr	r2, [pc, #28]	@ (8000ba8 <MX_GPU2D_Init+0x24>)
 8000b8c:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_GPU2D_Init+0x20>)
 8000b90:	f005 f803 	bl	8005b9a <HAL_GPU2D_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000b9a:	f001 f810 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000022c 	.word	0x2000022c
 8000ba8:	4002f000 	.word	0x4002f000

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	f005 f843 	bl	8005c72 <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 ffe4 	bl	8001bbe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bfa:	f005 f8d5 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 ffdb 	bl	8001bbe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000c0c:	f005 f917 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 ffd2 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000238 	.word	0x20000238
 8000c24:	40005400 	.word	0x40005400
 8000c28:	30909dec 	.word	0x30909dec

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <MX_I2C2_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <MX_I2C2_Init+0x7c>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c68:	f005 f803 	bl	8005c72 <HAL_I2C_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c72:	f000 ffa4 	bl	8001bbe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c7a:	f005 f895 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c84:	f000 ff9b 	bl	8001bbe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c8c:	f005 f8d7 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 ff92 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000028c 	.word	0x2000028c
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	30909dec 	.word	0x30909dec

08000cac <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_I2C4_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <MX_I2C4_Init+0x7c>)
 8000cba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000ce6:	480e      	ldr	r0, [pc, #56]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000ce8:	f004 ffc3 	bl	8005c72 <HAL_I2C_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cf2:	f000 ff64 	bl	8001bbe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4809      	ldr	r0, [pc, #36]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000cfa:	f005 f855 	bl	8005da8 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000d04:	f000 ff5b 	bl	8001bbe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_I2C4_Init+0x74>)
 8000d0c:	f005 f897 	bl	8005e3e <HAL_I2CEx_ConfigDigitalFilter>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 ff52 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200002e0 	.word	0x200002e0
 8000d24:	40008400 	.word	0x40008400
 8000d28:	30909dec 	.word	0x30909dec

08000d2c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d30:	2000      	movs	r0, #0
 8000d32:	f005 f8d1 	bl	8005ed8 <HAL_ICACHE_ConfigAssociativityMode>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d3c:	f000 ff3f 	bl	8001bbe <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d40:	f005 f8ea 	bl	8005f18 <HAL_ICACHE_Enable>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d4a:	f000 ff38 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2234      	movs	r2, #52	@ 0x34
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f00e f8a8 	bl	800eeb6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d66:	4b3a      	ldr	r3, [pc, #232]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d68:	4a3a      	ldr	r2, [pc, #232]	@ (8000e54 <MX_LTDC_Init+0x100>)
 8000d6a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d6c:	4b38      	ldr	r3, [pc, #224]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d72:	4b37      	ldr	r3, [pc, #220]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d78:	4b35      	ldr	r3, [pc, #212]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8000d84:	4b32      	ldr	r3, [pc, #200]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000d8a:	4b31      	ldr	r3, [pc, #196]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8000d90:	4b2f      	ldr	r3, [pc, #188]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d92:	220b      	movs	r2, #11
 8000d94:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000d96:	4b2e      	ldr	r3, [pc, #184]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d98:	220b      	movs	r2, #11
 8000d9a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8000d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000d9e:	f240 322b 	movw	r2, #811	@ 0x32b
 8000da2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8000da4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000da6:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8000dac:	4b28      	ldr	r3, [pc, #160]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000dae:	f240 3233 	movw	r2, #819	@ 0x333
 8000db2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8000db4:	4b26      	ldr	r3, [pc, #152]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000db6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000dba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000dbc:	4b24      	ldr	r3, [pc, #144]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dd4:	481e      	ldr	r0, [pc, #120]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000dd6:	f005 f8af 	bl	8005f38 <HAL_LTDC_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000de0:	f000 feed 	bl	8001bbe <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8000de8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000dec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000df2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000df6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000dfc:	23ff      	movs	r3, #255	@ 0xff
 8000dfe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e08:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = (uint32_t)_fb_start;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_LTDC_Init+0x104>)
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 8000e12:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000e18:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <MX_LTDC_Init+0xfc>)
 8000e38:	f005 f94e 	bl	80060d8 <HAL_LTDC_ConfigLayer>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000e42:	f000 febc 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3738      	adds	r7, #56	@ 0x38
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000334 	.word	0x20000334
 8000e54:	40016800 	.word	0x40016800
 8000e58:	20000000 	.word	0x20000000

08000e5c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]
 8000e72:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000e74:	463b      	mov	r3, r7
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000e7c:	4b31      	ldr	r3, [pc, #196]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e7e:	4a32      	ldr	r2, [pc, #200]	@ (8000f48 <MX_OCTOSPI1_Init+0xec>)
 8000e80:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 8000e82:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e94:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e98:	2220      	movs	r2, #32
 8000e9a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000e9c:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000ea8:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000eae:	4b25      	ldr	r3, [pc, #148]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000eba:	4b22      	ldr	r3, [pc, #136]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000ec0:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ee0:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000ee2:	f005 fabb 	bl	800645c <HAL_OSPI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8000eec:	f000 fe67 	bl	8001bbe <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000efc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000f00:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_OCTOSPI1_Init+0xf0>)
 8000f04:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000f12:	f005 fbe3 	bl	80066dc <HAL_OSPIM_Config>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000f1c:	f000 fe4f 	bl	8001bbe <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_OCTOSPI1_Init+0xe8>)
 8000f2e:	f006 f9c5 	bl	80072bc <HAL_OSPI_DLYB_SetConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000f38:	f000 fe41 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f3c:	bf00      	nop
 8000f3e:	3720      	adds	r7, #32
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003dc 	.word	0x200003dc
 8000f48:	420d1400 	.word	0x420d1400
 8000f4c:	01000001 	.word	0x01000001

08000f50 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	@ 0x38
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f7e:	4b33      	ldr	r3, [pc, #204]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f80:	4a33      	ldr	r2, [pc, #204]	@ (8001050 <MX_RTC_Init+0x100>)
 8000f82:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f8c:	227f      	movs	r2, #127	@ 0x7f
 8000f8e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f92:	22ff      	movs	r2, #255	@ 0xff
 8000f94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f96:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <MX_RTC_Init+0xfc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <MX_RTC_Init+0xfc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <MX_RTC_Init+0xfc>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <MX_RTC_Init+0xfc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000fb6:	4b25      	ldr	r3, [pc, #148]	@ (800104c <MX_RTC_Init+0xfc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fbc:	4823      	ldr	r0, [pc, #140]	@ (800104c <MX_RTC_Init+0xfc>)
 8000fbe:	f00a fe0b 	bl	800bbd8 <HAL_RTC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000fc8:	f000 fdf9 	bl	8001bbe <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481a      	ldr	r0, [pc, #104]	@ (800104c <MX_RTC_Init+0xfc>)
 8000fe4:	f00b f870 	bl	800c0c8 <HAL_RTCEx_PrivilegeModeSet>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000fee:	f000 fde6 	bl	8001bbe <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001006:	f107 0308 	add.w	r3, r7, #8
 800100a:	2201      	movs	r2, #1
 800100c:	4619      	mov	r1, r3
 800100e:	480f      	ldr	r0, [pc, #60]	@ (800104c <MX_RTC_Init+0xfc>)
 8001010:	f00a fe6c 	bl	800bcec <HAL_RTC_SetTime>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800101a:	f000 fdd0 	bl	8001bbe <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800101e:	2301      	movs	r3, #1
 8001020:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8001022:	2301      	movs	r3, #1
 8001024:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001026:	2301      	movs	r3, #1
 8001028:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 800102a:	2300      	movs	r3, #0
 800102c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_RTC_Init+0xfc>)
 8001036:	f00a fef5 	bl	800be24 <HAL_RTC_SetDate>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001040:	f000 fdbd 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3738      	adds	r7, #56	@ 0x38
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000438 	.word	0x20000438
 8001050:	46007800 	.word	0x46007800

08001054 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001064:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001066:	4a31      	ldr	r2, [pc, #196]	@ (800112c <MX_SPI1_Init+0xd8>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <MX_SPI1_Init+0xd4>)
 800106c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001070:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001072:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <MX_SPI1_Init+0xd4>)
 800107a:	2203      	movs	r2, #3
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <MX_SPI1_Init+0xd4>)
 800108c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b23      	ldr	r3, [pc, #140]	@ (8001128 <MX_SPI1_Init+0xd4>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80010be:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010c4:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ee:	480e      	ldr	r0, [pc, #56]	@ (8001128 <MX_SPI1_Init+0xd4>)
 80010f0:	f00b f818 	bl	800c124 <HAL_SPI_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80010fa:	f000 fd60 	bl	8001bbe <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001102:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001106:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_SPI1_Init+0xd4>)
 8001112:	f00b f938 	bl	800c386 <HAL_SPIEx_SetConfigAutonomousMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 800111c:	f000 fd4f 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000468 	.word	0x20000468
 800112c:	40013000 	.word	0x40013000

08001130 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001140:	4b30      	ldr	r3, [pc, #192]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001142:	4a31      	ldr	r2, [pc, #196]	@ (8001208 <MX_SPI2_Init+0xd8>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001148:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800114c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b2d      	ldr	r3, [pc, #180]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001156:	2203      	movs	r2, #3
 8001158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_SPI2_Init+0xd4>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001160:	4b28      	ldr	r3, [pc, #160]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001168:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800116c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001174:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <MX_SPI2_Init+0xd4>)
 800117c:	2200      	movs	r2, #0
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001180:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001182:	2200      	movs	r2, #0
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001186:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001188:	2207      	movs	r2, #7
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_SPI2_Init+0xd4>)
 800118e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_SPI2_Init+0xd4>)
 8001196:	2200      	movs	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_SPI2_Init+0xd4>)
 800119c:	2200      	movs	r2, #0
 800119e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011cc:	f00a ffaa 	bl	800c124 <HAL_SPI_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 80011d6:	f000 fcf2 	bl	8001bbe <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80011de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011e2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_SPI2_Init+0xd4>)
 80011ee:	f00b f8ca 	bl	800c386 <HAL_SPIEx_SetConfigAutonomousMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80011f8:	f000 fce1 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200004f8 	.word	0x200004f8
 8001208:	40003800 	.word	0x40003800

0800120c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b098      	sub	sp, #96	@ 0x60
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2234      	movs	r2, #52	@ 0x34
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f00d fe3c 	bl	800eeb6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800123e:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <MX_TIM1_Init+0x120>)
 8001240:	4a3b      	ldr	r2, [pc, #236]	@ (8001330 <MX_TIM1_Init+0x124>)
 8001242:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <MX_TIM1_Init+0x120>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b38      	ldr	r3, [pc, #224]	@ (800132c <MX_TIM1_Init+0x120>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <MX_TIM1_Init+0x120>)
 8001252:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b34      	ldr	r3, [pc, #208]	@ (800132c <MX_TIM1_Init+0x120>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800125e:	4b33      	ldr	r3, [pc, #204]	@ (800132c <MX_TIM1_Init+0x120>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b31      	ldr	r3, [pc, #196]	@ (800132c <MX_TIM1_Init+0x120>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800126a:	4830      	ldr	r0, [pc, #192]	@ (800132c <MX_TIM1_Init+0x120>)
 800126c:	f00b f9c4 	bl	800c5f8 <HAL_TIM_OC_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001276:	f000 fca2 	bl	8001bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001286:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800128a:	4619      	mov	r1, r3
 800128c:	4827      	ldr	r0, [pc, #156]	@ (800132c <MX_TIM1_Init+0x120>)
 800128e:	f00c ff31 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 fc91 	bl	8001bbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a4:	2300      	movs	r3, #0
 80012a6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a8:	2300      	movs	r3, #0
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012bc:	2204      	movs	r2, #4
 80012be:	4619      	mov	r1, r3
 80012c0:	481a      	ldr	r0, [pc, #104]	@ (800132c <MX_TIM1_Init+0x120>)
 80012c2:	f00b fbf7 	bl	800cab4 <HAL_TIM_OC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012cc:	f000 fc77 	bl	8001bbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_TIM1_Init+0x120>)
 800130e:	f00c ffb3 	bl	800e278 <HAL_TIMEx_ConfigBreakDeadTime>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001318:	f000 fc51 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800131c:	4803      	ldr	r0, [pc, #12]	@ (800132c <MX_TIM1_Init+0x120>)
 800131e:	f001 fc1f 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001322:	bf00      	nop
 8001324:	3760      	adds	r7, #96	@ 0x60
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000588 	.word	0x20000588
 8001330:	40012c00 	.word	0x40012c00

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	@ 0x30
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001362:	4b33      	ldr	r3, [pc, #204]	@ (8001430 <MX_TIM3_Init+0xfc>)
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <MX_TIM3_Init+0x100>)
 8001366:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001368:	4b31      	ldr	r3, [pc, #196]	@ (8001430 <MX_TIM3_Init+0xfc>)
 800136a:	2200      	movs	r2, #0
 800136c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <MX_TIM3_Init+0xfc>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8001374:	4b2e      	ldr	r3, [pc, #184]	@ (8001430 <MX_TIM3_Init+0xfc>)
 8001376:	f04f 32ff 	mov.w	r2, #4294967295
 800137a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137c:	4b2c      	ldr	r3, [pc, #176]	@ (8001430 <MX_TIM3_Init+0xfc>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001382:	4b2b      	ldr	r3, [pc, #172]	@ (8001430 <MX_TIM3_Init+0xfc>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001388:	4829      	ldr	r0, [pc, #164]	@ (8001430 <MX_TIM3_Init+0xfc>)
 800138a:	f00b f9ed 	bl	800c768 <HAL_TIM_IC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001394:	f000 fc13 	bl	8001bbe <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001398:	2304      	movs	r3, #4
 800139a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 800139c:	2360      	movs	r3, #96	@ 0x60
 800139e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013a0:	2302      	movs	r3, #2
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4619      	mov	r1, r3
 80013b2:	481f      	ldr	r0, [pc, #124]	@ (8001430 <MX_TIM3_Init+0xfc>)
 80013b4:	f00b feaa 	bl	800d10c <HAL_TIM_SlaveConfigSynchro>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80013be:	f000 fbfe 	bl	8001bbe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013c6:	2302      	movs	r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4815      	ldr	r0, [pc, #84]	@ (8001430 <MX_TIM3_Init+0xfc>)
 80013dc:	f00b fbe4 	bl	800cba8 <HAL_TIM_IC_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80013e6:	f000 fbea 	bl	8001bbe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80013ea:	2302      	movs	r3, #2
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2204      	movs	r2, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_TIM3_Init+0xfc>)
 80013fc:	f00b fbd4 	bl	800cba8 <HAL_TIM_IC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001406:	f000 fbda 	bl	8001bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	@ (8001430 <MX_TIM3_Init+0xfc>)
 8001418:	f00c fe6c 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8001422:	f000 fbcc 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3730      	adds	r7, #48	@ 0x30
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200005d4 	.word	0x200005d4
 8001434:	40000400 	.word	0x40000400

08001438 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001448:	4b14      	ldr	r3, [pc, #80]	@ (800149c <MX_TIM6_Init+0x64>)
 800144a:	4a15      	ldr	r2, [pc, #84]	@ (80014a0 <MX_TIM6_Init+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800144e:	4b13      	ldr	r3, [pc, #76]	@ (800149c <MX_TIM6_Init+0x64>)
 8001450:	2200      	movs	r2, #0
 8001452:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b11      	ldr	r3, [pc, #68]	@ (800149c <MX_TIM6_Init+0x64>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800145a:	4b10      	ldr	r3, [pc, #64]	@ (800149c <MX_TIM6_Init+0x64>)
 800145c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001460:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <MX_TIM6_Init+0x64>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <MX_TIM6_Init+0x64>)
 800146a:	f00a ffcd 	bl	800c408 <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001474:	f000 fba3 	bl	8001bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	@ (800149c <MX_TIM6_Init+0x64>)
 8001486:	f00c fe35 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 fb95 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000620 	.word	0x20000620
 80014a0:	40001000 	.word	0x40001000

080014a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b09c      	sub	sp, #112	@ 0x70
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014aa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2234      	movs	r2, #52	@ 0x34
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00d fce9 	bl	800eeb6 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80014e4:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80014e6:	4a40      	ldr	r2, [pc, #256]	@ (80015e8 <MX_TIM15_Init+0x144>)
 80014e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80014ea:	4b3e      	ldr	r3, [pc, #248]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f0:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80014f6:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80014f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <MX_TIM15_Init+0x140>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <MX_TIM15_Init+0x140>)
 8001506:	2200      	movs	r2, #0
 8001508:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <MX_TIM15_Init+0x140>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001510:	4834      	ldr	r0, [pc, #208]	@ (80015e4 <MX_TIM15_Init+0x140>)
 8001512:	f00a ff79 	bl	800c408 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800151c:	f000 fb4f 	bl	8001bbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001524:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800152a:	4619      	mov	r1, r3
 800152c:	482d      	ldr	r0, [pc, #180]	@ (80015e4 <MX_TIM15_Init+0x140>)
 800152e:	f00b fceb 	bl	800cf08 <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001538:	f000 fb41 	bl	8001bbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800153c:	4829      	ldr	r0, [pc, #164]	@ (80015e4 <MX_TIM15_Init+0x140>)
 800153e:	f00b f8b2 	bl	800c6a6 <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001548:	f000 fb39 	bl	8001bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001554:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001558:	4619      	mov	r1, r3
 800155a:	4822      	ldr	r0, [pc, #136]	@ (80015e4 <MX_TIM15_Init+0x140>)
 800155c:	f00c fdca 	bl	800e0f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001566:	f000 fb2a 	bl	8001bbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	@ 0x60
 800156c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001586:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4815      	ldr	r0, [pc, #84]	@ (80015e4 <MX_TIM15_Init+0x140>)
 8001590:	f00b fba6 	bl	800cce0 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800159a:	f000 fb10 	bl	8001bbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80015c6:	f00c fe57 	bl	800e278 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80015d0:	f000 faf5 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <MX_TIM15_Init+0x140>)
 80015d6:	f001 fac3 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 80015da:	bf00      	nop
 80015dc:	3770      	adds	r7, #112	@ 0x70
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2000066c 	.word	0x2000066c
 80015e8:	40014000 	.word	0x40014000

080015ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <MX_USART1_UART_Init+0x90>)
 80015f2:	4a23      	ldr	r2, [pc, #140]	@ (8001680 <MX_USART1_UART_Init+0x94>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_USART1_UART_Init+0x90>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_USART1_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_USART1_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_USART1_UART_Init+0x90>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001634:	4811      	ldr	r0, [pc, #68]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001636:	f00c feff 	bl	800e438 <HAL_UART_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001640:	f000 fabd 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	480d      	ldr	r0, [pc, #52]	@ (800167c <MX_USART1_UART_Init+0x90>)
 8001648:	f00d fb4c 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001652:	f000 fab4 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4808      	ldr	r0, [pc, #32]	@ (800167c <MX_USART1_UART_Init+0x90>)
 800165a:	f00d fb81 	bl	800ed60 <HAL_UARTEx_SetRxFifoThreshold>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001664:	f000 faab 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_USART1_UART_Init+0x90>)
 800166a:	f00d fb02 	bl	800ec72 <HAL_UARTEx_DisableFifoMode>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001674:	f000 faa3 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200006b8 	.word	0x200006b8
 8001680:	40013800 	.word	0x40013800

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 800168a:	4a23      	ldr	r2, [pc, #140]	@ (8001718 <MX_USART2_UART_Init+0x94>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b21      	ldr	r3, [pc, #132]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b17      	ldr	r3, [pc, #92]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016cc:	4811      	ldr	r0, [pc, #68]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016ce:	f00c feb3 	bl	800e438 <HAL_UART_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80016d8:	f000 fa71 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	480d      	ldr	r0, [pc, #52]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016e0:	f00d fb00 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80016ea:	f000 fa68 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ee:	2100      	movs	r1, #0
 80016f0:	4808      	ldr	r0, [pc, #32]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 80016f2:	f00d fb35 	bl	800ed60 <HAL_UARTEx_SetRxFifoThreshold>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80016fc:	f000 fa5f 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	@ (8001714 <MX_USART2_UART_Init+0x90>)
 8001702:	f00d fab6 	bl	800ec72 <HAL_UARTEx_DisableFifoMode>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800170c:	f000 fa57 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2000074c 	.word	0x2000074c
 8001718:	40004400 	.word	0x40004400

0800171c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b22      	ldr	r3, [pc, #136]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001722:	4a23      	ldr	r2, [pc, #140]	@ (80017b0 <MX_USART3_UART_Init+0x94>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001726:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001760:	2200      	movs	r2, #0
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001764:	4811      	ldr	r0, [pc, #68]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001766:	f00c fe67 	bl	800e438 <HAL_UART_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001770:	f000 fa25 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001774:	2100      	movs	r1, #0
 8001776:	480d      	ldr	r0, [pc, #52]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 8001778:	f00d fab4 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001782:	f000 fa1c 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800178a:	f00d fae9 	bl	800ed60 <HAL_UARTEx_SetRxFifoThreshold>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001794:	f000 fa13 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	@ (80017ac <MX_USART3_UART_Init+0x90>)
 800179a:	f00d fa6a 	bl	800ec72 <HAL_UARTEx_DisableFifoMode>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017a4:	f000 fa0b 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200007e0 	.word	0x200007e0
 80017b0:	40004800 	.word	0x40004800

080017b4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017b8:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <MX_USART6_UART_Init+0x94>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017fc:	4811      	ldr	r0, [pc, #68]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 80017fe:	f00c fe1b 	bl	800e438 <HAL_UART_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001808:	f000 f9d9 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	480d      	ldr	r0, [pc, #52]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 8001810:	f00d fa68 	bl	800ece4 <HAL_UARTEx_SetTxFifoThreshold>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800181a:	f000 f9d0 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 8001822:	f00d fa9d 	bl	800ed60 <HAL_UARTEx_SetRxFifoThreshold>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800182c:	f000 f9c7 	bl	8001bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_USART6_UART_Init+0x90>)
 8001832:	f00d fa1e 	bl	800ec72 <HAL_UARTEx_DisableFifoMode>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800183c:	f000 f9bf 	bl	8001bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000874 	.word	0x20000874
 8001848:	40006400 	.word	0x40006400

0800184c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b090      	sub	sp, #64	@ 0x40
 8001860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001862:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
 8001870:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001872:	4b9e      	ldr	r3, [pc, #632]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001874:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001878:	4a9c      	ldr	r2, [pc, #624]	@ (8001aec <MX_GPIO_Init+0x290>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001882:	4b9a      	ldr	r3, [pc, #616]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b96      	ldr	r3, [pc, #600]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001896:	4a95      	ldr	r2, [pc, #596]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a0:	4b92      	ldr	r3, [pc, #584]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ae:	4b8f      	ldr	r3, [pc, #572]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b4:	4a8d      	ldr	r2, [pc, #564]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018b6:	f043 0308 	orr.w	r3, r3, #8
 80018ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018be:	4b8b      	ldr	r3, [pc, #556]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018cc:	4b87      	ldr	r3, [pc, #540]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d2:	4a86      	ldr	r2, [pc, #536]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018dc:	4b83      	ldr	r3, [pc, #524]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b80      	ldr	r3, [pc, #512]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f0:	4a7e      	ldr	r2, [pc, #504]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001aec <MX_GPIO_Init+0x290>)
 80018fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001908:	4b78      	ldr	r3, [pc, #480]	@ (8001aec <MX_GPIO_Init+0x290>)
 800190a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190e:	4a77      	ldr	r2, [pc, #476]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001914:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001918:	4b74      	ldr	r3, [pc, #464]	@ (8001aec <MX_GPIO_Init+0x290>)
 800191a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001926:	4b71      	ldr	r3, [pc, #452]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800192c:	4a6f      	ldr	r2, [pc, #444]	@ (8001aec <MX_GPIO_Init+0x290>)
 800192e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001932:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001936:	4b6d      	ldr	r3, [pc, #436]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001938:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800193c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001944:	4b69      	ldr	r3, [pc, #420]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800194a:	4a68      	ldr	r2, [pc, #416]	@ (8001aec <MX_GPIO_Init+0x290>)
 800194c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001950:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001954:	4b65      	ldr	r3, [pc, #404]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800195a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001962:	4b62      	ldr	r3, [pc, #392]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001968:	4a60      	ldr	r2, [pc, #384]	@ (8001aec <MX_GPIO_Init+0x290>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001972:	4b5e      	ldr	r3, [pc, #376]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001974:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001980:	4b5a      	ldr	r3, [pc, #360]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001986:	4a59      	ldr	r2, [pc, #356]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001988:	f043 0320 	orr.w	r3, r3, #32
 800198c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001990:	4b56      	ldr	r3, [pc, #344]	@ (8001aec <MX_GPIO_Init+0x290>)
 8001992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001996:	f003 0320 	and.w	r3, r3, #32
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_RESET_GPIO_Port, LCD_DISP_RESET_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2180      	movs	r1, #128	@ 0x80
 80019a2:	4853      	ldr	r0, [pc, #332]	@ (8001af0 <MX_GPIO_Init+0x294>)
 80019a4:	f004 f8b0 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2108      	movs	r1, #8
 80019ac:	4851      	ldr	r0, [pc, #324]	@ (8001af4 <MX_GPIO_Init+0x298>)
 80019ae:	f004 f8ab 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|R_CS_Pin, GPIO_PIN_RESET);
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019b8:	484f      	ldr	r0, [pc, #316]	@ (8001af8 <MX_GPIO_Init+0x29c>)
 80019ba:	f004 f8a5 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RST_GPIO_Port, R_RST_Pin, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	2110      	movs	r1, #16
 80019c2:	484e      	ldr	r0, [pc, #312]	@ (8001afc <MX_GPIO_Init+0x2a0>)
 80019c4:	f004 f8a0 	bl	8005b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	2302      	movs	r3, #2
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80019da:	2300      	movs	r3, #0
 80019dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4846      	ldr	r0, [pc, #280]	@ (8001b00 <MX_GPIO_Init+0x2a4>)
 80019e6:	f003 feb7 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_RESET_Pin;
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_RESET_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	483b      	ldr	r0, [pc, #236]	@ (8001af0 <MX_GPIO_Init+0x294>)
 8001a02:	f003 fea9 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001a06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4838      	ldr	r0, [pc, #224]	@ (8001b00 <MX_GPIO_Init+0x2a4>)
 8001a20:	f003 fe9a 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_RST_Pin */
  GPIO_InitStruct.Pin = CTP_RST_Pin;
 8001a24:	2308      	movs	r3, #8
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a38:	4619      	mov	r1, r3
 8001a3a:	482e      	ldr	r0, [pc, #184]	@ (8001af4 <MX_GPIO_Init+0x298>)
 8001a3c:	f003 fe8c 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_USB_HS;
 8001a52:	230a      	movs	r3, #10
 8001a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4828      	ldr	r0, [pc, #160]	@ (8001b00 <MX_GPIO_Init+0x2a4>)
 8001a5e:	f003 fe7b 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001a62:	2340      	movs	r3, #64	@ 0x40
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <MX_GPIO_Init+0x2a8>)
 8001a68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	481f      	ldr	r0, [pc, #124]	@ (8001af4 <MX_GPIO_Init+0x298>)
 8001a76:	f003 fe6f 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 R_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|R_CS_Pin;
 8001a7a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4819      	ldr	r0, [pc, #100]	@ (8001af8 <MX_GPIO_Init+0x29c>)
 8001a94:	f003 fe60 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4817      	ldr	r0, [pc, #92]	@ (8001b08 <MX_GPIO_Init+0x2ac>)
 8001aac:	f003 fe54 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_RST_Pin */
  GPIO_InitStruct.Pin = R_RST_Pin;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(R_RST_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480d      	ldr	r0, [pc, #52]	@ (8001afc <MX_GPIO_Init+0x2a0>)
 8001ac8:	f003 fe46 	bl	8005758 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_INT_Pin */
  GPIO_InitStruct.Pin = R_INT_Pin;
 8001acc:	2310      	movs	r3, #16
 8001ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	@ (8001b0c <MX_GPIO_Init+0x2b0>)
 8001ae0:	f003 fe3a 	bl	8005758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3740      	adds	r7, #64	@ 0x40
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	46020c00 	.word	0x46020c00
 8001af0:	42021c00 	.word	0x42021c00
 8001af4:	42021000 	.word	0x42021000
 8001af8:	42021800 	.word	0x42021800
 8001afc:	42021400 	.word	0x42021400
 8001b00:	42020000 	.word	0x42020000
 8001b04:	10210000 	.word	0x10210000
 8001b08:	42022400 	.word	0x42022400
 8001b0c:	42020800 	.word	0x42020800

08001b10 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  The application entry point.
  * @retval int
  */

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CTP_INT_Pin)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	2b40      	cmp	r3, #64	@ 0x40
 8001b1e:	d102      	bne.n	8001b26 <HAL_GPIO_EXTI_Falling_Callback+0x16>
	{
		TouchINT_irq = 1;
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
	}
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000908 	.word	0x20000908

08001b38 <main>:

int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	InitClocks();
 8001b3c:	f7fe fd9c 	bl	8000678 <InitClocks>
	InitPeripherals();
 8001b40:	f7fe fd5e 	bl	8000600 <InitPeripherals>
	InitHana();
 8001b44:	f7fe fd3e 	bl	80005c4 <InitHana>

	HAL_GPIO_WritePin(LCD_DISP_RESET_GPIO_Port, LCD_DISP_RESET_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	4812      	ldr	r0, [pc, #72]	@ (8001b98 <main+0x60>)
 8001b4e:	f003 ffdb 	bl	8005b08 <HAL_GPIO_WritePin>
	HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2107      	movs	r1, #7
 8001b56:	2011      	movs	r0, #17
 8001b58:	f003 f896 	bl	8004c88 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8001b5c:	2011      	movs	r0, #17
 8001b5e:	f003 f8ad 	bl	8004cbc <HAL_NVIC_EnableIRQ>
	HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2108      	movs	r1, #8
 8001b66:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <main+0x64>)
 8001b68:	f003 ffce 	bl	8005b08 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b6c:	200a      	movs	r0, #10
 8001b6e:	f001 fba9 	bl	80032c4 <HAL_Delay>
	HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2108      	movs	r1, #8
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <main+0x64>)
 8001b78:	f003 ffc6 	bl	8005b08 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f001 fba1 	bl	80032c4 <HAL_Delay>
	HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2108      	movs	r1, #8
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <main+0x64>)
 8001b88:	f003 ffbe 	bl	8005b08 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f001 fb99 	bl	80032c4 <HAL_Delay>

  while (1)
 8001b92:	bf00      	nop
 8001b94:	e7fd      	b.n	8001b92 <main+0x5a>
 8001b96:	bf00      	nop
 8001b98:	42021c00 	.word	0x42021c00
 8001b9c:	42021000 	.word	0x42021000

08001ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bb2:	f001 fb67 	bl	8003284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc2:	b672      	cpsid	i
}
 8001bc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <Error_Handler+0x8>
	...

08001bcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <HAL_MspInit+0x38>)
 8001bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_MspInit+0x38>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <HAL_MspInit+0x38>)
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	607b      	str	r3, [r7, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8001bf0:	f005 fc98 	bl	8007524 <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8001bf4:	f005 fca6 	bl	8007544 <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 8001bf8:	f005 fcb4 	bl	8007564 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	46020c00 	.word	0x46020c00

08001c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0bc      	sub	sp, #240	@ 0xf0
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	22e0      	movs	r2, #224	@ 0xe0
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f00d f94c 	bl	800eeb6 <memset>
  if(hadc->Instance==ADC1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a32      	ldr	r2, [pc, #200]	@ (8001cec <HAL_ADC_MspInit+0xe4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d12c      	bne.n	8001c82 <HAL_ADC_MspInit+0x7a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001c28:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001c34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4618      	mov	r0, r3
 8001c42:	f006 ffbb 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8001c4c:	f7ff ffb7 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001c58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001c5a:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d140      	bne.n	8001ce4 <HAL_ADC_MspInit+0xdc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c68:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c80:	e030      	b.n	8001ce4 <HAL_ADC_MspInit+0xdc>
  else if(hadc->Instance==ADC2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1c      	ldr	r2, [pc, #112]	@ (8001cf8 <HAL_ADC_MspInit+0xf0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d12b      	bne.n	8001ce4 <HAL_ADC_MspInit+0xdc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001c8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f006 ff89 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_ADC_MspInit+0xac>
      Error_Handler();
 8001cb0:	f7ff ff85 	bl	8001bbe <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001cbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <HAL_ADC_MspInit+0xe8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_ADC_MspInit+0xdc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ccc:	4a09      	ldr	r2, [pc, #36]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_ADC_MspInit+0xec>)
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	68bb      	ldr	r3, [r7, #8]
}
 8001ce4:	bf00      	nop
 8001ce6:	37f0      	adds	r7, #240	@ 0xf0
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	42028000 	.word	0x42028000
 8001cf0:	2000090c 	.word	0x2000090c
 8001cf4:	46020c00 	.word	0x46020c00
 8001cf8:	42028100 	.word	0x42028100

08001cfc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0c2      	sub	sp, #264	@ 0x108
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d0a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	22e0      	movs	r2, #224	@ 0xe0
 8001d22:	2100      	movs	r1, #0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00d f8c6 	bl	800eeb6 <memset>
  if(hdac->Instance==DAC1)
 8001d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001d2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <HAL_DAC_MspInit+0xe4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d14b      	bne.n	8001dd4 <HAL_DAC_MspInit+0xd8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8001d3c:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <HAL_DAC_MspInit+0xe8>)
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8001d46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8001d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 ff2e 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_DAC_MspInit+0x6e>
    {
      Error_Handler();
 8001d66:	f7ff ff2a 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d70:	4a1d      	ldr	r2, [pc, #116]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d8e:	4a16      	ldr	r2, [pc, #88]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <HAL_DAC_MspInit+0xec>)
 8001d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d9e:	f003 0201 	and.w	r2, r3, #1
 8001da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001da6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001db0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001db4:	681b      	ldr	r3, [r3, #0]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001db6:	2330      	movs	r3, #48	@ 0x30
 8001db8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4807      	ldr	r0, [pc, #28]	@ (8001dec <HAL_DAC_MspInit+0xf0>)
 8001dd0:	f003 fcc2 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001dd4:	bf00      	nop
 8001dd6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	46021800 	.word	0x46021800
 8001de4:	10008000 	.word	0x10008000
 8001de8:	46020c00 	.word	0x46020c00
 8001dec:	42020000 	.word	0x42020000

08001df0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a16      	ldr	r2, [pc, #88]	@ (8001e58 <HAL_DCACHE_MspInit+0x68>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10f      	bne.n	8001e22 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e0e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8001e20:	e013      	b.n	8001e4a <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	@ (8001e60 <HAL_DCACHE_MspInit+0x70>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10e      	bne.n	8001e4a <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <HAL_DCACHE_MspInit+0x6c>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40031400 	.word	0x40031400
 8001e5c:	46020c00 	.word	0x46020c00
 8001e60:	40031800 	.word	0x40031800

08001e64 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea0 <HAL_DMA2D_MspInit+0x3c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10e      	bne.n	8001e94 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001e76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_DMA2D_MspInit+0x40>)
 8001e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_DMA2D_MspInit+0x40>)
 8001e7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_DMA2D_MspInit+0x40>)
 8001e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	4002b000 	.word	0x4002b000
 8001ea4:	46020c00 	.word	0x46020c00

08001ea8 <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001f20 <HAL_GPU2D_MspInit+0x78>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12d      	bne.n	8001f16 <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 8001eba:	4b1a      	ldr	r3, [pc, #104]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec0:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ec6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ede:	4a11      	ldr	r2, [pc, #68]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001ee0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_GPU2D_MspInit+0x7c>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2084      	movs	r0, #132	@ 0x84
 8001efc:	f002 fec4 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8001f00:	2084      	movs	r0, #132	@ 0x84
 8001f02:	f002 fedb 	bl	8004cbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2085      	movs	r0, #133	@ 0x85
 8001f0c:	f002 febc 	bl	8004c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8001f10:	2085      	movs	r0, #133	@ 0x85
 8001f12:	f002 fed3 	bl	8004cbc <HAL_NVIC_EnableIRQ>

  /* USER CODE END GPU2D_MspInit 1 */

  }

}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	4002f000 	.word	0x4002f000
 8001f24:	46020c00 	.word	0x46020c00

08001f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0c8      	sub	sp, #288	@ 0x120
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f32:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f4c:	22e0      	movs	r2, #224	@ 0xe0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00c ffb0 	bl	800eeb6 <memset>
  if(hi2c->Instance==I2C1)
 8001f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4aa2      	ldr	r2, [pc, #648]	@ (80021ec <HAL_I2C_MspInit+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d17c      	bne.n	8002062 <HAL_I2C_MspInit+0x13a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f68:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fe1c 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8001f8a:	f7ff fe18 	bl	8001bbe <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f8e:	4b98      	ldr	r3, [pc, #608]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f94:	4a96      	ldr	r2, [pc, #600]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001f96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f9e:	4b94      	ldr	r3, [pc, #592]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	4b90      	ldr	r3, [pc, #576]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb2:	4a8f      	ldr	r2, [pc, #572]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8001fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fc2:	f003 0202 	and.w	r2, r3, #2
 8001fc6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001fd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fd8:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ffa:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001ffe:	4619      	mov	r1, r3
 8002000:	487c      	ldr	r0, [pc, #496]	@ (80021f4 <HAL_I2C_MspInit+0x2cc>)
 8002002:	f003 fba9 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800200a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200e:	2312      	movs	r3, #18
 8002010:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002020:	2304      	movs	r3, #4
 8002022:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800202a:	4619      	mov	r1, r3
 800202c:	4872      	ldr	r0, [pc, #456]	@ (80021f8 <HAL_I2C_MspInit+0x2d0>)
 800202e:	f003 fb93 	bl	8005758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002032:	4b6f      	ldr	r3, [pc, #444]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8002034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002038:	4a6d      	ldr	r2, [pc, #436]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 800203a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800203e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002042:	4b6b      	ldr	r3, [pc, #428]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8002044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002048:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800204c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800205a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800205e:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002060:	e0bf      	b.n	80021e2 <HAL_I2C_MspInit+0x2ba>
  else if(hi2c->Instance==I2C2)
 8002062:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002066:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a63      	ldr	r2, [pc, #396]	@ (80021fc <HAL_I2C_MspInit+0x2d4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d156      	bne.n	8002122 <HAL_I2C_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002074:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800208a:	4618      	mov	r0, r3
 800208c:	f006 fd96 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_I2C_MspInit+0x172>
      Error_Handler();
 8002096:	f7ff fd92 	bl	8001bbe <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800209a:	4b55      	ldr	r3, [pc, #340]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 800209c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a0:	4a53      	ldr	r2, [pc, #332]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80020a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020aa:	4b51      	ldr	r3, [pc, #324]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80020ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b0:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80020b4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80020c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020c6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80020c8:	2330      	movs	r3, #48	@ 0x30
 80020ca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ce:	2312      	movs	r3, #18
 80020d0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020e0:	2304      	movs	r3, #4
 80020e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020e6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80020ea:	4619      	mov	r1, r3
 80020ec:	4844      	ldr	r0, [pc, #272]	@ (8002200 <HAL_I2C_MspInit+0x2d8>)
 80020ee:	f003 fb33 	bl	8005758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80020f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020f8:	4a3d      	ldr	r2, [pc, #244]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80020fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020fe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8002104:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800210c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002110:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800211a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	e05f      	b.n	80021e2 <HAL_I2C_MspInit+0x2ba>
  else if(hi2c->Instance==I2C4)
 8002122:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002126:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a35      	ldr	r2, [pc, #212]	@ (8002204 <HAL_I2C_MspInit+0x2dc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d156      	bne.n	80021e2 <HAL_I2C_MspInit+0x2ba>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002134:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002146:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800214a:	4618      	mov	r0, r3
 800214c:	f006 fd36 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_MspInit+0x232>
      Error_Handler();
 8002156:	f7ff fd32 	bl	8001bbe <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b25      	ldr	r3, [pc, #148]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 800215c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002160:	4a23      	ldr	r2, [pc, #140]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800216a:	4b21      	ldr	r3, [pc, #132]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 800216c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002170:	f003 0202 	and.w	r2, r3, #2
 8002174:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002178:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002182:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002186:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002188:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800218c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002190:	2312      	movs	r3, #18
 8002192:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80021a2:	2303      	movs	r3, #3
 80021a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80021ac:	4619      	mov	r1, r3
 80021ae:	4812      	ldr	r0, [pc, #72]	@ (80021f8 <HAL_I2C_MspInit+0x2d0>)
 80021b0:	f003 fad2 	bl	8005758 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80021b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80021ba:	4a0d      	ldr	r2, [pc, #52]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_I2C_MspInit+0x2c8>)
 80021c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80021ca:	f003 0202 	and.w	r2, r3, #2
 80021ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80021dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80021e0:	681b      	ldr	r3, [r3, #0]
}
 80021e2:	bf00      	nop
 80021e4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40005400 	.word	0x40005400
 80021f0:	46020c00 	.word	0x46020c00
 80021f4:	42021800 	.word	0x42021800
 80021f8:	42020400 	.word	0x42020400
 80021fc:	40005800 	.word	0x40005800
 8002200:	42021c00 	.word	0x42021c00
 8002204:	40008400 	.word	0x40008400

08002208 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0c4      	sub	sp, #272	@ 0x110
 800220c:	af00      	add	r7, sp, #0
 800220e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002212:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002216:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	22e0      	movs	r2, #224	@ 0xe0
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f00c fe40 	bl	800eeb6 <memset>
  if(hltdc->Instance==LTDC)
 8002236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800223a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a63      	ldr	r2, [pc, #396]	@ (80023d0 <HAL_LTDC_MspInit+0x1c8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	f040 80bd 	bne.w	80023c4 <HAL_LTDC_MspInit+0x1bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0302 	mov.w	r3, #2
 8002252:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 8002256:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800225a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 800225e:	2303      	movs	r3, #3
 8002260:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2M = 4;
 8002262:	2304      	movs	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2N = 129;
 8002266:	2381      	movs	r3, #129	@ 0x81
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2P = 2;
 800226a:	2302      	movs	r3, #2
 800226c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2Q = 2;
 800226e:	2302      	movs	r3, #2
 8002270:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2R = 20;
 8002272:	2314      	movs	r3, #20
 8002274:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_0;
 8002276:	2300      	movs	r3, #0
 8002278:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 800227e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002282:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002284:	f107 0318 	add.w	r3, r7, #24
 8002288:	4618      	mov	r0, r3
 800228a:	f006 fc97 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_LTDC_MspInit+0x90>
    {
      Error_Handler();
 8002294:	f7ff fc93 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002298:	4b4e      	ldr	r3, [pc, #312]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 800229a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800229e:	4a4d      	ldr	r2, [pc, #308]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022a4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022a8:	4b4a      	ldr	r3, [pc, #296]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b6:	4b47      	ldr	r3, [pc, #284]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022bc:	4a45      	ldr	r2, [pc, #276]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022be:	f043 0310 	orr.w	r3, r3, #16
 80022c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022c6:	4b43      	ldr	r3, [pc, #268]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022cc:	f003 0210 	and.w	r2, r3, #16
 80022d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80022de:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e4:	4b3b      	ldr	r3, [pc, #236]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ea:	4a3a      	ldr	r2, [pc, #232]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022f4:	4b37      	ldr	r3, [pc, #220]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 80022f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022fa:	f003 0208 	and.w	r2, r3, #8
 80022fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800230c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002310:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002312:	4b30      	ldr	r3, [pc, #192]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002318:	4a2e      	ldr	r2, [pc, #184]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 800231a:	f043 0320 	orr.w	r3, r3, #32
 800231e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002322:	4b2c      	ldr	r3, [pc, #176]	@ (80023d4 <HAL_LTDC_MspInit+0x1cc>)
 8002324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002328:	f003 0220 	and.w	r2, r3, #32
 800232c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800233a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800233e:	681b      	ldr	r3, [r3, #0]
    PE11     ------> LTDC_G4
    PD10     ------> LTDC_R5
    PD9     ------> LTDC_R4
    PE14     ------> LTDC_G7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_7
 8002340:	f647 7381 	movw	r3, #32641	@ 0x7f81
 8002344:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800235a:	2308      	movs	r3, #8
 800235c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002360:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002364:	4619      	mov	r1, r3
 8002366:	481c      	ldr	r0, [pc, #112]	@ (80023d8 <HAL_LTDC_MspInit+0x1d0>)
 8002368:	f003 f9f6 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_15
 800236c:	f64b 730b 	movw	r3, #48907	@ 0xbf0b
 8002370:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_13
                          |GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 8002386:	2308      	movs	r3, #8
 8002388:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800238c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002390:	4619      	mov	r1, r3
 8002392:	4812      	ldr	r0, [pc, #72]	@ (80023dc <HAL_LTDC_MspInit+0x1d4>)
 8002394:	f003 f9e0 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800239c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	2302      	movs	r3, #2
 80023a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80023b2:	2308      	movs	r3, #8
 80023b4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023b8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80023bc:	4619      	mov	r1, r3
 80023be:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <HAL_LTDC_MspInit+0x1d8>)
 80023c0:	f003 f9ca 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80023c4:	bf00      	nop
 80023c6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40016800 	.word	0x40016800
 80023d4:	46020c00 	.word	0x46020c00
 80023d8:	42021000 	.word	0x42021000
 80023dc:	42020c00 	.word	0x42020c00
 80023e0:	42021400 	.word	0x42021400

080023e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0c8      	sub	sp, #288	@ 0x120
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80023ee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002404:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002408:	22e0      	movs	r2, #224	@ 0xe0
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f00c fd52 	bl	800eeb6 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002412:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002416:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4ab1      	ldr	r2, [pc, #708]	@ (80026e4 <HAL_OSPI_MspInit+0x300>)
 8002420:	4293      	cmp	r3, r2
 8002422:	f040 8159 	bne.w	80026d8 <HAL_OSPI_MspInit+0x2f4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002426:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800243c:	4618      	mov	r0, r3
 800243e:	f006 fbbd 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002448:	f7ff fbb9 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800244c:	4ba6      	ldr	r3, [pc, #664]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800244e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002452:	4aa5      	ldr	r2, [pc, #660]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002454:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002458:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800245c:	4ba2      	ldr	r3, [pc, #648]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002462:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800246a:	4b9f      	ldr	r3, [pc, #636]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	4a9d      	ldr	r2, [pc, #628]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002472:	f043 0310 	orr.w	r3, r3, #16
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247a:	4b9b      	ldr	r3, [pc, #620]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800247c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002480:	f003 0210 	and.w	r2, r3, #16
 8002484:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002488:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002492:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002496:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002498:	4b93      	ldr	r3, [pc, #588]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800249a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800249e:	4a92      	ldr	r2, [pc, #584]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024a4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024a8:	4b8f      	ldr	r3, [pc, #572]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024ae:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80024b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b88      	ldr	r3, [pc, #544]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024cc:	4a86      	ldr	r2, [pc, #536]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024d6:	4b84      	ldr	r3, [pc, #528]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024dc:	f003 0208 	and.w	r2, r3, #8
 80024e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024f2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024f4:	4b7c      	ldr	r3, [pc, #496]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fa:	4a7b      	ldr	r2, [pc, #492]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 80024fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002500:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002504:	4b78      	ldr	r3, [pc, #480]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800250a:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 800250e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002512:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800251c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002520:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002522:	4b71      	ldr	r3, [pc, #452]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002524:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002528:	4a6f      	ldr	r2, [pc, #444]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 800252a:	f043 0320 	orr.w	r3, r3, #32
 800252e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002532:	4b6d      	ldr	r3, [pc, #436]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002534:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002538:	f003 0220 	and.w	r2, r3, #32
 800253c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002540:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800254a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800254e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002556:	4a64      	ldr	r2, [pc, #400]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002560:	4b61      	ldr	r3, [pc, #388]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800256e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002578:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800257c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	4b5a      	ldr	r3, [pc, #360]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002584:	4a58      	ldr	r2, [pc, #352]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002586:	f043 0304 	orr.w	r3, r3, #4
 800258a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800258e:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <HAL_OSPI_MspInit+0x304>)
 8002590:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002594:	f003 0204 	and.w	r2, r3, #4
 8002598:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800259c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025a6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025aa:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PF8     ------> OCTOSPIM_P1_IO0
    PA2     ------> OCTOSPIM_P1_NCS
    PC3     ------> OCTOSPIM_P1_IO6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 80025ac:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80025b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80025c6:	2303      	movs	r3, #3
 80025c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025d0:	4619      	mov	r1, r3
 80025d2:	4846      	ldr	r0, [pc, #280]	@ (80026ec <HAL_OSPI_MspInit+0x308>)
 80025d4:	f003 f8c0 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80025f0:	230a      	movs	r3, #10
 80025f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025fa:	4619      	mov	r1, r3
 80025fc:	483c      	ldr	r0, [pc, #240]	@ (80026f0 <HAL_OSPI_MspInit+0x30c>)
 80025fe:	f003 f8ab 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002602:	2304      	movs	r3, #4
 8002604:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800261a:	2303      	movs	r3, #3
 800261c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002620:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002624:	4619      	mov	r1, r3
 8002626:	4833      	ldr	r0, [pc, #204]	@ (80026f4 <HAL_OSPI_MspInit+0x310>)
 8002628:	f003 f896 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002630:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002646:	2303      	movs	r3, #3
 8002648:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800264c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002650:	4619      	mov	r1, r3
 8002652:	4829      	ldr	r0, [pc, #164]	@ (80026f8 <HAL_OSPI_MspInit+0x314>)
 8002654:	f003 f880 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8;
 8002658:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800265c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266c:	2303      	movs	r3, #3
 800266e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002672:	230a      	movs	r3, #10
 8002674:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002678:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800267c:	4619      	mov	r1, r3
 800267e:	481e      	ldr	r0, [pc, #120]	@ (80026f8 <HAL_OSPI_MspInit+0x314>)
 8002680:	f003 f86a 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002684:	2304      	movs	r3, #4
 8002686:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268a:	2302      	movs	r3, #2
 800268c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800269c:	230a      	movs	r3, #10
 800269e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a2:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026a6:	4619      	mov	r1, r3
 80026a8:	4814      	ldr	r0, [pc, #80]	@ (80026fc <HAL_OSPI_MspInit+0x318>)
 80026aa:	f003 f855 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026ae:	2308      	movs	r3, #8
 80026b0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80026c6:	230a      	movs	r3, #10
 80026c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026cc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80026d0:	4619      	mov	r1, r3
 80026d2:	480b      	ldr	r0, [pc, #44]	@ (8002700 <HAL_OSPI_MspInit+0x31c>)
 80026d4:	f003 f840 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 80026d8:	bf00      	nop
 80026da:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	420d1400 	.word	0x420d1400
 80026e8:	46020c00 	.word	0x46020c00
 80026ec:	42021800 	.word	0x42021800
 80026f0:	42020c00 	.word	0x42020c00
 80026f4:	42021c00 	.word	0x42021c00
 80026f8:	42021400 	.word	0x42021400
 80026fc:	42020000 	.word	0x42020000
 8002700:	42020800 	.word	0x42020800

08002704 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0bc      	sub	sp, #240	@ 0xf0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	22e0      	movs	r2, #224	@ 0xe0
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f00c fbce 	bl	800eeb6 <memset>
  if(hrtc->Instance==RTC)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_RTC_MspInit+0x90>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d132      	bne.n	800278a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002724:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002730:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002734:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002738:	f107 0310 	add.w	r3, r7, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f006 fa3d 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002748:	f7ff fa39 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800274c:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 800274e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002752:	4a11      	ldr	r2, [pc, #68]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 8002754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002758:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 800275e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002762:	4a0d      	ldr	r2, [pc, #52]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 8002764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002768:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800276c:	4b0a      	ldr	r3, [pc, #40]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 800276e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002772:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 800277a:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 800277c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002780:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <HAL_RTC_MspInit+0x94>)
 8002782:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002786:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800278a:	bf00      	nop
 800278c:	37f0      	adds	r7, #240	@ 0xf0
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	46007800 	.word	0x46007800
 8002798:	46020c00 	.word	0x46020c00

0800279c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b0c6      	sub	sp, #280	@ 0x118
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027aa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027bc:	f107 0320 	add.w	r3, r7, #32
 80027c0:	22e0      	movs	r2, #224	@ 0xe0
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00c fb76 	bl	800eeb6 <memset>
  if(hspi->Instance==SPI1)
 80027ca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a88      	ldr	r2, [pc, #544]	@ (80029f8 <HAL_SPI_MspInit+0x25c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d17b      	bne.n	80028d4 <HAL_SPI_MspInit+0x138>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80027dc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80027e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80027ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	4618      	mov	r0, r3
 80027f6:	f006 f9e1 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002800:	f7ff f9dd 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002804:	4b7d      	ldr	r3, [pc, #500]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002806:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800280a:	4a7c      	ldr	r2, [pc, #496]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 800280c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002810:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002814:	4b79      	ldr	r3, [pc, #484]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002816:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800281a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002822:	4b76      	ldr	r3, [pc, #472]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002828:	4a74      	ldr	r2, [pc, #464]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 800282a:	f043 0302 	orr.w	r3, r3, #2
 800282e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002832:	4b72      	ldr	r3, [pc, #456]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002838:	f003 0202 	and.w	r2, r3, #2
 800283c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002840:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800284a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800284e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002850:	4b6a      	ldr	r3, [pc, #424]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002856:	4a69      	ldr	r2, [pc, #420]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800285c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002860:	4b66      	ldr	r3, [pc, #408]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002866:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 800286a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800286e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002878:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800287c:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800287e:	2320      	movs	r3, #32
 8002880:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002896:	2305      	movs	r3, #5
 8002898:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80028a0:	4619      	mov	r1, r3
 80028a2:	4857      	ldr	r0, [pc, #348]	@ (8002a00 <HAL_SPI_MspInit+0x264>)
 80028a4:	f002 ff58 	bl	8005758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80028a8:	230c      	movs	r3, #12
 80028aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028c0:	2305      	movs	r3, #5
 80028c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028c6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80028ca:	4619      	mov	r1, r3
 80028cc:	484d      	ldr	r0, [pc, #308]	@ (8002a04 <HAL_SPI_MspInit+0x268>)
 80028ce:	f002 ff43 	bl	8005758 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80028d2:	e08c      	b.n	80029ee <HAL_SPI_MspInit+0x252>
  else if(hspi->Instance==SPI2)
 80028d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80028d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a49      	ldr	r2, [pc, #292]	@ (8002a08 <HAL_SPI_MspInit+0x26c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	f040 8083 	bne.w	80029ee <HAL_SPI_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80028e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80028f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fc:	f107 0320 	add.w	r3, r7, #32
 8002900:	4618      	mov	r0, r3
 8002902:	f006 f95b 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_SPI_MspInit+0x174>
      Error_Handler();
 800290c:	f7ff f957 	bl	8001bbe <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002910:	4b3a      	ldr	r3, [pc, #232]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002916:	4a39      	ldr	r2, [pc, #228]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800291c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002920:	4b36      	ldr	r3, [pc, #216]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002922:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002926:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800292a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800292e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800293c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293e:	4b2f      	ldr	r3, [pc, #188]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002944:	4a2d      	ldr	r2, [pc, #180]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002946:	f043 0308 	orr.w	r3, r3, #8
 800294a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800294e:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002954:	f003 0208 	and.w	r2, r3, #8
 8002958:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800295c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002966:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800296a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800296c:	4b23      	ldr	r3, [pc, #140]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002972:	4a22      	ldr	r2, [pc, #136]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800297c:	4b1f      	ldr	r3, [pc, #124]	@ (80029fc <HAL_SPI_MspInit+0x260>)
 800297e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002982:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002986:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800298a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002998:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800299a:	2310      	movs	r3, #16
 800299c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b2:	2305      	movs	r3, #5
 80029b4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029bc:	4619      	mov	r1, r3
 80029be:	4813      	ldr	r0, [pc, #76]	@ (8002a0c <HAL_SPI_MspInit+0x270>)
 80029c0:	f002 feca 	bl	8005758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80029c4:	2306      	movs	r3, #6
 80029c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029dc:	2305      	movs	r3, #5
 80029de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029e2:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80029e6:	4619      	mov	r1, r3
 80029e8:	4809      	ldr	r0, [pc, #36]	@ (8002a10 <HAL_SPI_MspInit+0x274>)
 80029ea:	f002 feb5 	bl	8005758 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40013000 	.word	0x40013000
 80029fc:	46020c00 	.word	0x46020c00
 8002a00:	42020400 	.word	0x42020400
 8002a04:	42021800 	.word	0x42021800
 8002a08:	40003800 	.word	0x40003800
 8002a0c:	42020c00 	.word	0x42020c00
 8002a10:	42022000 	.word	0x42022000

08002a14 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <HAL_TIM_OC_MspInit+0x3c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_TIM_OC_MspInit+0x40>)
 8002a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a2c:	4a09      	ldr	r2, [pc, #36]	@ (8002a54 <HAL_TIM_OC_MspInit+0x40>)
 8002a2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a32:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002a36:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <HAL_TIM_OC_MspInit+0x40>)
 8002a38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	46020c00 	.word	0x46020c00

08002a58 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	@ (8002ae0 <HAL_TIM_IC_MspInit+0x88>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12d      	bne.n	8002ad6 <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a80:	4a18      	ldr	r2, [pc, #96]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002a82:	f043 0302 	orr.w	r3, r3, #2
 8002a86:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002a8a:	4b16      	ldr	r3, [pc, #88]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002a8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002aa0:	f043 0310 	orr.w	r3, r3, #16
 8002aa4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_TIM_IC_MspInit+0x8c>)
 8002aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_TIM_IC_MspInit+0x90>)
 8002ad2:	f002 fe41 	bl	8005758 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	@ 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	46020c00 	.word	0x46020c00
 8002ae8:	42021000 	.word	0x42021000

08002aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a16      	ldr	r2, [pc, #88]	@ (8002b54 <HAL_TIM_Base_MspInit+0x68>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d10f      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002afe:	4b16      	ldr	r3, [pc, #88]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b06:	f043 0310 	orr.w	r3, r3, #16
 8002b0a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002b1c:	e013      	b.n	8002b46 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a0e      	ldr	r2, [pc, #56]	@ (8002b5c <HAL_TIM_Base_MspInit+0x70>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10e      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b34:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002b38:	4b07      	ldr	r3, [pc, #28]	@ (8002b58 <HAL_TIM_Base_MspInit+0x6c>)
 8002b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]
}
 8002b46:	bf00      	nop
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40001000 	.word	0x40001000
 8002b58:	46020c00 	.word	0x46020c00
 8002b5c:	40014000 	.word	0x40014000

08002b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a26      	ldr	r2, [pc, #152]	@ (8002c18 <HAL_TIM_MspPostInit+0xb8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d120      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b26      	ldr	r3, [pc, #152]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b88:	4a24      	ldr	r2, [pc, #144]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b92:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4818      	ldr	r0, [pc, #96]	@ (8002c20 <HAL_TIM_MspPostInit+0xc0>)
 8002bbe:	f002 fdcb 	bl	8005758 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002bc2:	e024      	b.n	8002c0e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM15)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a16      	ldr	r2, [pc, #88]	@ (8002c24 <HAL_TIM_MspPostInit+0xc4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d11f      	bne.n	8002c0e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bce:	4b13      	ldr	r3, [pc, #76]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bd4:	4a11      	ldr	r2, [pc, #68]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002bde:	4b0f      	ldr	r3, [pc, #60]	@ (8002c1c <HAL_TIM_MspPostInit+0xbc>)
 8002be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002bfe:	230e      	movs	r3, #14
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	4619      	mov	r1, r3
 8002c08:	4807      	ldr	r0, [pc, #28]	@ (8002c28 <HAL_TIM_MspPostInit+0xc8>)
 8002c0a:	f002 fda5 	bl	8005758 <HAL_GPIO_Init>
}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	@ 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	46020c00 	.word	0x46020c00
 8002c20:	42020000 	.word	0x42020000
 8002c24:	40014000 	.word	0x40014000
 8002c28:	42021800 	.word	0x42021800

08002c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b0ca      	sub	sp, #296	@ 0x128
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c36:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c3a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c50:	22e0      	movs	r2, #224	@ 0xe0
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f00c f92e 	bl	800eeb6 <memset>
  if(huart->Instance==USART1)
 8002c5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002c5e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4ad3      	ldr	r2, [pc, #844]	@ (8002fb4 <HAL_UART_MspInit+0x388>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d14e      	bne.n	8002d0a <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c6c:	f04f 0201 	mov.w	r2, #1
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c82:	4618      	mov	r0, r3
 8002c84:	f005 ff9a 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8002c8e:	f7fe ff96 	bl	8001bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c92:	4bc9      	ldr	r3, [pc, #804]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002c94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c98:	4ac7      	ldr	r2, [pc, #796]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002c9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c9e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002ca2:	4bc5      	ldr	r3, [pc, #788]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002ca4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb0:	4bc1      	ldr	r3, [pc, #772]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb6:	4ac0      	ldr	r2, [pc, #768]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002cc0:	4bbd      	ldr	r3, [pc, #756]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc6:	f003 0202 	and.w	r2, r3, #2
 8002cca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002cce:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002cd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002cdc:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002cde:	23c0      	movs	r3, #192	@ 0xc0
 8002ce0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cfc:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002d00:	4619      	mov	r1, r3
 8002d02:	48ae      	ldr	r0, [pc, #696]	@ (8002fbc <HAL_UART_MspInit+0x390>)
 8002d04:	f002 fd28 	bl	8005758 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d08:	e14e      	b.n	8002fa8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART2)
 8002d0a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d0e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4aaa      	ldr	r2, [pc, #680]	@ (8002fc0 <HAL_UART_MspInit+0x394>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	f040 8084 	bne.w	8002e26 <HAL_UART_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d1e:	f04f 0202 	mov.w	r2, #2
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d30:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 ff41 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8002d40:	f7fe ff3d 	bl	8001bbe <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d44:	4b9c      	ldr	r3, [pc, #624]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d4a:	4a9b      	ldr	r2, [pc, #620]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d54:	4b98      	ldr	r3, [pc, #608]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d5a:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002d5e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002d70:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d72:	4b91      	ldr	r3, [pc, #580]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d78:	4a8f      	ldr	r2, [pc, #572]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d82:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d88:	f003 0201 	and.w	r2, r3, #1
 8002d8c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d9e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da0:	4b85      	ldr	r3, [pc, #532]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002da6:	4a84      	ldr	r2, [pc, #528]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002da8:	f043 0308 	orr.w	r3, r3, #8
 8002dac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002db0:	4b81      	ldr	r3, [pc, #516]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db6:	f003 0208 	and.w	r2, r3, #8
 8002dba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002dbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002dc8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dcc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dd2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dee:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002df2:	4619      	mov	r1, r3
 8002df4:	4873      	ldr	r0, [pc, #460]	@ (8002fc4 <HAL_UART_MspInit+0x398>)
 8002df6:	f002 fcaf 	bl	8005758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e12:	2307      	movs	r3, #7
 8002e14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e18:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	486a      	ldr	r0, [pc, #424]	@ (8002fc8 <HAL_UART_MspInit+0x39c>)
 8002e20:	f002 fc9a 	bl	8005758 <HAL_GPIO_Init>
}
 8002e24:	e0c0      	b.n	8002fa8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 8002e26:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e2a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a66      	ldr	r2, [pc, #408]	@ (8002fcc <HAL_UART_MspInit+0x3a0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d157      	bne.n	8002ee8 <HAL_UART_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e38:	f04f 0204 	mov.w	r2, #4
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 feb4 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0x232>
      Error_Handler();
 8002e5a:	f7fe feb0 	bl	8001bbe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5e:	4b56      	ldr	r3, [pc, #344]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e64:	4a54      	ldr	r2, [pc, #336]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e6e:	4b52      	ldr	r3, [pc, #328]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e74:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002e78:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e86:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002e8a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e92:	4a49      	ldr	r2, [pc, #292]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002e9c:	4b46      	ldr	r3, [pc, #280]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ea2:	f003 0204 	and.w	r2, r3, #4
 8002ea6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002eaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002eb4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002eb8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002eba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ebe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ed4:	2307      	movs	r3, #7
 8002ed6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002ede:	4619      	mov	r1, r3
 8002ee0:	483b      	ldr	r0, [pc, #236]	@ (8002fd0 <HAL_UART_MspInit+0x3a4>)
 8002ee2:	f002 fc39 	bl	8005758 <HAL_GPIO_Init>
}
 8002ee6:	e05f      	b.n	8002fa8 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART6)
 8002ee8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002eec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a37      	ldr	r2, [pc, #220]	@ (8002fd4 <HAL_UART_MspInit+0x3a8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d156      	bne.n	8002fa8 <HAL_UART_MspInit+0x37c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002efa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fe53 	bl	8008bbc <HAL_RCCEx_PeriphCLKConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8002f1c:	f7fe fe4f 	bl	8001bbe <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f20:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f26:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f30:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f36:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8002f3a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f4c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f54:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002f5e:	4b16      	ldr	r3, [pc, #88]	@ (8002fb8 <HAL_UART_MspInit+0x38c>)
 8002f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f64:	f003 0204 	and.w	r2, r3, #4
 8002f68:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002f76:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f7a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002f80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002f96:	2307      	movs	r3, #7
 8002f98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f9c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480b      	ldr	r0, [pc, #44]	@ (8002fd0 <HAL_UART_MspInit+0x3a4>)
 8002fa4:	f002 fbd8 	bl	8005758 <HAL_GPIO_Init>
}
 8002fa8:	bf00      	nop
 8002faa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	46020c00 	.word	0x46020c00
 8002fbc:	42020400 	.word	0x42020400
 8002fc0:	40004400 	.word	0x40004400
 8002fc4:	42020000 	.word	0x42020000
 8002fc8:	42020c00 	.word	0x42020c00
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	42020800 	.word	0x42020800
 8002fd4:	40006400 	.word	0x40006400

08002fd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80030a4 <HAL_InitTick+0xcc>)
 8002fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fee:	4a2d      	ldr	r2, [pc, #180]	@ (80030a4 <HAL_InitTick+0xcc>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <HAL_InitTick+0xcc>)
 8002ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003006:	f107 0210 	add.w	r2, r7, #16
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f005 fd15 	bl	8008a40 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003016:	f005 fcd7 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800301a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	4a22      	ldr	r2, [pc, #136]	@ (80030a8 <HAL_InitTick+0xd0>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9b      	lsrs	r3, r3, #18
 8003026:	3b01      	subs	r3, #1
 8003028:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800302a:	4b20      	ldr	r3, [pc, #128]	@ (80030ac <HAL_InitTick+0xd4>)
 800302c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003030:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_InitTick+0xd4>)
 8003034:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003038:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800303a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ac <HAL_InitTick+0xd4>)
 800303c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003040:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <HAL_InitTick+0xd4>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_InitTick+0xd4>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 800304c:	4817      	ldr	r0, [pc, #92]	@ (80030ac <HAL_InitTick+0xd4>)
 800304e:	f009 f9db 	bl	800c408 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8003058:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800305c:	2b00      	cmp	r3, #0
 800305e:	d118      	bne.n	8003092 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8003060:	4812      	ldr	r0, [pc, #72]	@ (80030ac <HAL_InitTick+0xd4>)
 8003062:	f009 fa29 	bl	800c4b8 <HAL_TIM_Base_Start_IT>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800306c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10e      	bne.n	8003092 <HAL_InitTick+0xba>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	d808      	bhi.n	800308c <HAL_InitTick+0xb4>
      {
        /* Enable the TIM2 global Interrupt */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800307a:	2200      	movs	r2, #0
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	202d      	movs	r0, #45	@ 0x2d
 8003080:	f001 fe02 	bl	8004c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003084:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <HAL_InitTick+0xd8>)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e002      	b.n	8003092 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003092:	202d      	movs	r0, #45	@ 0x2d
 8003094:	f001 fe12 	bl	8004cbc <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8003098:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800309c:	4618      	mov	r0, r3
 800309e:	3738      	adds	r7, #56	@ 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	46020c00 	.word	0x46020c00
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	20000910 	.word	0x20000910
 80030b0:	20000004 	.word	0x20000004

080030b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <NMI_Handler+0x4>

080030bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <MemManage_Handler+0x4>

080030cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <BusFault_Handler+0x4>

080030d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <UsageFault_Handler+0x4>

080030dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <EXTI6_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32u5xx.s).                    */
/******************************************************************************/

void EXTI6_IRQHandler(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8003118:	2040      	movs	r0, #64	@ 0x40
 800311a:	f002 fd0d 	bl	8005b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003128:	4802      	ldr	r0, [pc, #8]	@ (8003134 <TIM2_IRQHandler+0x10>)
 800312a:	f009 fb74 	bl	800c816 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000910 	.word	0x20000910

08003138 <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 800313c:	4802      	ldr	r0, [pc, #8]	@ (8003148 <GPU2D_IRQHandler+0x10>)
 800313e:	f002 fd56 	bl	8005bee <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000022c 	.word	0x2000022c

0800314c <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003150:	4802      	ldr	r0, [pc, #8]	@ (800315c <GPU2D_ER_IRQHandler+0x10>)
 8003152:	f002 fd72 	bl	8005c3a <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2000022c 	.word	0x2000022c

08003160 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <SystemInit+0x68>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <SystemInit+0x68>)
 800316c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003174:	4b15      	ldr	r3, [pc, #84]	@ (80031cc <SystemInit+0x6c>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800317a:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <SystemInit+0x6c>)
 800317c:	2200      	movs	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003180:	4b12      	ldr	r3, [pc, #72]	@ (80031cc <SystemInit+0x6c>)
 8003182:	2200      	movs	r2, #0
 8003184:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003186:	4b11      	ldr	r3, [pc, #68]	@ (80031cc <SystemInit+0x6c>)
 8003188:	2200      	movs	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <SystemInit+0x6c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0e      	ldr	r2, [pc, #56]	@ (80031cc <SystemInit+0x6c>)
 8003192:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8003196:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800319a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <SystemInit+0x6c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <SystemInit+0x6c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a09      	ldr	r2, [pc, #36]	@ (80031cc <SystemInit+0x6c>)
 80031a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80031ae:	4b07      	ldr	r3, [pc, #28]	@ (80031cc <SystemInit+0x6c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <SystemInit+0x68>)
 80031b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80031ba:	609a      	str	r2, [r3, #8]
  #endif
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00
 80031cc:	46020c00 	.word	0x46020c00

080031d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80031d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003208 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031d4:	f7ff ffc4 	bl	8003160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80031d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80031da:	e003      	b.n	80031e4 <LoopCopyDataInit>

080031dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80031dc:	4b0b      	ldr	r3, [pc, #44]	@ (800320c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80031de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80031e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80031e2:	3104      	adds	r1, #4

080031e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80031e4:	480a      	ldr	r0, [pc, #40]	@ (8003210 <LoopForever+0xa>)
	ldr	r3, =_edata
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <LoopForever+0xe>)
	adds	r2, r0, r1
 80031e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80031ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80031ec:	d3f6      	bcc.n	80031dc <CopyDataInit>
	ldr	r2, =_sbss
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <LoopForever+0x12>)
	b	LoopFillZerobss
 80031f0:	e002      	b.n	80031f8 <LoopFillZerobss>

080031f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80031f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80031f4:	f842 3b04 	str.w	r3, [r2], #4

080031f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <LoopForever+0x16>)
	cmp	r2, r3
 80031fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80031fc:	d3f9      	bcc.n	80031f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031fe:	f00b fe63 	bl	800eec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003202:	f7fe fc99 	bl	8001b38 <main>

08003206 <LoopForever>:

LoopForever:
    b LoopForever
 8003206:	e7fe      	b.n	8003206 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003208:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800320c:	0800f038 	.word	0x0800f038
	ldr	r0, =_sdata
 8003210:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003214:	20000028 	.word	0x20000028
	ldr	r2, =_sbss
 8003218:	20000028 	.word	0x20000028
	ldr	r3, = _ebss
 800321c:	20000960 	.word	0x20000960

08003220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003220:	e7fe      	b.n	8003220 <ADC1_2_IRQHandler>
	...

08003224 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003228:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_Init+0x50>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a11      	ldr	r2, [pc, #68]	@ (8003274 <HAL_Init+0x50>)
 800322e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003232:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003234:	2003      	movs	r0, #3
 8003236:	f001 fd1c 	bl	8004c72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800323a:	f005 faa9 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0d      	ldr	r3, [pc, #52]	@ (8003278 <HAL_Init+0x54>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	490c      	ldr	r1, [pc, #48]	@ (800327c <HAL_Init+0x58>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	fa22 f303 	lsr.w	r3, r2, r3
 8003250:	4a0b      	ldr	r2, [pc, #44]	@ (8003280 <HAL_Init+0x5c>)
 8003252:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003254:	2004      	movs	r0, #4
 8003256:	f001 fd3f 	bl	8004cd8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800325a:	200f      	movs	r0, #15
 800325c:	f7ff febc 	bl	8002fd8 <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e002      	b.n	8003270 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800326a:	f7fe fcaf 	bl	8001bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40022000 	.word	0x40022000
 8003278:	46020c00 	.word	0x46020c00
 800327c:	0800ef28 	.word	0x0800ef28
 8003280:	20000000 	.word	0x20000000

08003284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003288:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_IncTick+0x20>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_IncTick+0x24>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a04      	ldr	r2, [pc, #16]	@ (80032a8 <HAL_IncTick+0x24>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000008 	.word	0x20000008
 80032a8:	2000095c 	.word	0x2000095c

080032ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return uwTick;
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_GetTick+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	2000095c 	.word	0x2000095c

080032c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff ffee 	bl	80032ac <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d005      	beq.n	80032ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032de:	4b0a      	ldr	r3, [pc, #40]	@ (8003308 <HAL_Delay+0x44>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ea:	bf00      	nop
 80032ec:	f7ff ffde 	bl	80032ac <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d8f7      	bhi.n	80032ec <HAL_Delay+0x28>
  {
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 8003310:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a04      	ldr	r2, [pc, #16]	@ (8003328 <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 8003316:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6053      	str	r3, [r2, #4]
}
 800331c:	bf00      	nop
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	46000400 	.word	0x46000400

0800332c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a0a      	ldr	r2, [pc, #40]	@ (80033d0 <LL_ADC_SetResolution+0x3c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d104      	bne.n	80033b4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f023 020c 	bic.w	r2, r3, #12
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60da      	str	r2, [r3, #12]
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	46021000 	.word	0x46021000

080033d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3360      	adds	r3, #96	@ 0x60
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	430b      	orrs	r3, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3360      	adds	r3, #96	@ 0x60
 8003424:	461a      	mov	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	0edb      	lsrs	r3, r3, #27
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b09      	cmp	r3, #9
 800343e:	d807      	bhi.n	8003450 <LL_ADC_GetOffsetChannel+0x3a>
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	069a      	lsls	r2, r3, #26
 8003444:	2101      	movs	r1, #1
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	4313      	orrs	r3, r2
 800344e:	e008      	b.n	8003462 <LL_ADC_GetOffsetChannel+0x4c>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	069a      	lsls	r2, r3, #26
 8003454:	2101      	movs	r1, #1
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800346e:	b480      	push	{r7}
 8003470:	b087      	sub	sp, #28
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3360      	adds	r3, #96	@ 0x60
 800347e:	461a      	mov	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3360      	adds	r3, #96	@ 0x60
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80034da:	b480      	push	{r7}
 80034dc:	b087      	sub	sp, #28
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3360      	adds	r3, #96	@ 0x60
 80034ea:	461a      	mov	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003522:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	2a00      	cmp	r2, #0
 800353a:	d002      	beq.n	8003542 <LL_ADC_SetGainCompensation+0x32>
 800353c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003540:	e000      	b.n	8003544 <LL_ADC_SetGainCompensation+0x34>
 8003542:	2200      	movs	r2, #0
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003556:	b480      	push	{r7}
 8003558:	b085      	sub	sp, #20
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2107      	movs	r1, #7
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	431a      	orrs	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d020      	beq.n	80035ea <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3330      	adds	r3, #48	@ 0x30
 80035ac:	461a      	mov	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	4413      	add	r3, r2
 80035ba:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	211f      	movs	r1, #31
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0e9b      	lsrs	r3, r3, #26
 80035d4:	f003 011f 	and.w	r1, r3, #31
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	fa01 f303 	lsl.w	r3, r1, r3
 80035e2:	431a      	orrs	r2, r3
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80035e8:	e02b      	b.n	8003642 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	210f      	movs	r1, #15
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	401a      	ands	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d104      	bne.n	8003612 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0e9b      	lsrs	r3, r3, #26
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	e010      	b.n	8003634 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	613b      	str	r3, [r7, #16]
  return result;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	f001 011f 	and.w	r1, r1, #31
 800363a:	408b      	lsls	r3, r1
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003642:	bf00      	nop
 8003644:	3724      	adds	r7, #36	@ 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	46021000 	.word	0x46021000

08003654 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d107      	bne.n	8003678 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	0e9b      	lsrs	r3, r3, #26
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2201      	movs	r2, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	e015      	b.n	80036a4 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	60fb      	str	r3, [r7, #12]
  return result;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 800368e:	2320      	movs	r3, #32
 8003690:	e003      	b.n	800369a <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2201      	movs	r2, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	0e9b      	lsrs	r3, r3, #26
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	401a      	ands	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b08b      	sub	sp, #44	@ 0x2c
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a2d      	ldr	r2, [pc, #180]	@ (80037b0 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d042      	beq.n	8003786 <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d104      	bne.n	8003714 <LL_ADC_SetChannelSamplingTime+0x28>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	f003 021f 	and.w	r2, r3, #31
 8003712:	e011      	b.n	8003738 <LL_ADC_SetChannelSamplingTime+0x4c>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	617b      	str	r3, [r7, #20]
  return result;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e003      	b.n	8003736 <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	fab3 f383 	clz	r3, r3
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	0e5b      	lsrs	r3, r3, #25
 800373c:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003740:	460b      	mov	r3, r1
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	4613      	mov	r3, r2
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	4413      	add	r3, r2
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3314      	adds	r3, #20
 8003756:	461a      	mov	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	0e5b      	lsrs	r3, r3, #25
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	4413      	add	r3, r2
 8003764:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2107      	movs	r1, #7
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	401a      	ands	r2, r3
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	431a      	orrs	r2, r3
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003784:	e00e      	b.n	80037a4 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	021b      	lsls	r3, r3, #8
 800378e:	43db      	mvns	r3, r3
 8003790:	401a      	ands	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	0219      	lsls	r1, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	400b      	ands	r3, r1
 800379a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800379e:	431a      	orrs	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	615a      	str	r2, [r3, #20]
}
 80037a4:	bf00      	nop
 80037a6:	372c      	adds	r7, #44	@ 0x2c
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	46021000 	.word	0x46021000

080037b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037cc:	43db      	mvns	r3, r3
 80037ce:	401a      	ands	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f003 0318 	and.w	r3, r3, #24
 80037d6:	4908      	ldr	r1, [pc, #32]	@ (80037f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80037d8:	40d9      	lsrs	r1, r3
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	400b      	ands	r3, r1
 80037de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	000fffff 	.word	0x000fffff

080037fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800380c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6093      	str	r3, [r2, #8]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d101      	bne.n	800383a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800385c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003884:	d101      	bne.n	800388a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <LL_ADC_IsEnabled+0x18>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <LL_ADC_IsEnabled+0x1a>
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d101      	bne.n	80038d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d101      	bne.n	80038fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b08b      	sub	sp, #44	@ 0x2c
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 800391a:	2300      	movs	r3, #0
 800391c:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e2ce      	b.n	8003eca <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a95      	ldr	r2, [pc, #596]	@ (8003b90 <HAL_ADC_Init+0x284>)
 800393a:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe f95f 	bl	8001c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5f 	bl	8003820 <LL_ADC_IsDeepPowerDownEnabled>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff ff45 	bl	80037fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ff7a 	bl	8003870 <LL_ADC_IsInternalRegulatorEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d115      	bne.n	80039ae <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff5e 	bl	8003848 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800398c:	4b81      	ldr	r3, [pc, #516]	@ (8003b94 <HAL_ADC_Init+0x288>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	099b      	lsrs	r3, r3, #6
 8003992:	4a81      	ldr	r2, [pc, #516]	@ (8003b98 <HAL_ADC_Init+0x28c>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039a0:	e002      	b.n	80039a8 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f9      	bne.n	80039a2 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff5c 	bl	8003870 <LL_ADC_IsInternalRegulatorEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10e      	bne.n	80039dc <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c2:	f043 0210 	orr.w	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ce:	f043 0201 	orr.w	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff6c 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 80039e6:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 825f 	bne.w	8003eb4 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 825b 	bne.w	8003eb4 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff40 	bl	8003898 <LL_ADC_IsEnabled>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d14f      	bne.n	8003abe <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a5b      	ldr	r2, [pc, #364]	@ (8003b90 <HAL_ADC_Init+0x284>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d037      	beq.n	8003a98 <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5b      	ldr	r2, [pc, #364]	@ (8003b9c <HAL_ADC_Init+0x290>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_ADC_Init+0x130>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5a      	ldr	r2, [pc, #360]	@ (8003ba0 <HAL_ADC_Init+0x294>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10e      	bne.n	8003a5a <HAL_ADC_Init+0x14e>
 8003a3c:	4857      	ldr	r0, [pc, #348]	@ (8003b9c <HAL_ADC_Init+0x290>)
 8003a3e:	f7ff ff2b 	bl	8003898 <LL_ADC_IsEnabled>
 8003a42:	4604      	mov	r4, r0
 8003a44:	4856      	ldr	r0, [pc, #344]	@ (8003ba0 <HAL_ADC_Init+0x294>)
 8003a46:	f7ff ff27 	bl	8003898 <LL_ADC_IsEnabled>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4323      	orrs	r3, r4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf0c      	ite	eq
 8003a52:	2301      	moveq	r3, #1
 8003a54:	2300      	movne	r3, #0
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	e008      	b.n	8003a6c <HAL_ADC_Init+0x160>
 8003a5a:	484d      	ldr	r0, [pc, #308]	@ (8003b90 <HAL_ADC_Init+0x284>)
 8003a5c:	f7ff ff1c 	bl	8003898 <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf0c      	ite	eq
 8003a66:	2301      	moveq	r3, #1
 8003a68:	2300      	movne	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d026      	beq.n	8003abe <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a49      	ldr	r2, [pc, #292]	@ (8003b9c <HAL_ADC_Init+0x290>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_ADC_Init+0x178>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a48      	ldr	r2, [pc, #288]	@ (8003ba0 <HAL_ADC_Init+0x294>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_Init+0x17c>
 8003a84:	4a47      	ldr	r2, [pc, #284]	@ (8003ba4 <HAL_ADC_Init+0x298>)
 8003a86:	e000      	b.n	8003a8a <HAL_ADC_Init+0x17e>
 8003a88:	4a47      	ldr	r2, [pc, #284]	@ (8003ba8 <HAL_ADC_Init+0x29c>)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4610      	mov	r0, r2
 8003a92:	f7ff fc4b 	bl	800332c <LL_ADC_SetCommonClock>
 8003a96:	e012      	b.n	8003abe <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4610      	mov	r0, r2
 8003aa4:	f7ff fc76 	bl	8003394 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba8 <HAL_ADC_Init+0x29c>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003ab8:	493b      	ldr	r1, [pc, #236]	@ (8003ba8 <HAL_ADC_Init+0x29c>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a33      	ldr	r2, [pc, #204]	@ (8003b90 <HAL_ADC_Init+0x284>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d010      	beq.n	8003aea <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ace:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ad4:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003ada:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003ae2:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	e035      	b.n	8003b56 <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003af6:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003af8:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_ADC_Init+0x1fc>
 8003b02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_Init+0x1fe>
 8003b08:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003b0a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003b10:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	da04      	bge.n	8003b24 <HAL_ADC_Init+0x218>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b22:	e001      	b.n	8003b28 <HAL_ADC_Init+0x21c>
 8003b24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003b28:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	491b      	ldr	r1, [pc, #108]	@ (8003b9c <HAL_ADC_Init+0x290>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d004      	beq.n	8003b3e <HAL_ADC_Init+0x232>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4919      	ldr	r1, [pc, #100]	@ (8003ba0 <HAL_ADC_Init+0x294>)
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d103      	bne.n	8003b46 <HAL_ADC_Init+0x23a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b44:	e003      	b.n	8003b4e <HAL_ADC_Init+0x242>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b4c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003b4e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d131      	bne.n	8003bc4 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0a      	ldr	r2, [pc, #40]	@ (8003b90 <HAL_ADC_Init+0x284>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	045b      	lsls	r3, r3, #17
 8003b72:	6a3a      	ldr	r2, [r7, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	e024      	b.n	8003bc4 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d113      	bne.n	8003bac <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	e01a      	b.n	8003bc4 <HAL_ADC_Init+0x2b8>
 8003b8e:	bf00      	nop
 8003b90:	46021000 	.word	0x46021000
 8003b94:	20000000 	.word	0x20000000
 8003b98:	053e2d63 	.word	0x053e2d63
 8003b9c:	42028000 	.word	0x42028000
 8003ba0:	42028100 	.word	0x42028100
 8003ba4:	42028300 	.word	0x42028300
 8003ba8:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bbc:	f043 0201 	orr.w	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a75      	ldr	r2, [pc, #468]	@ (8003da0 <HAL_ADC_Init+0x494>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bda:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be2:	4313      	orrs	r3, r2
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8003da4 <HAL_ADC_Init+0x498>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	6a39      	ldr	r1, [r7, #32]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
 8003bfe:	e031      	b.n	8003c64 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c14:	4313      	orrs	r3, r2
 8003c16:	6a3a      	ldr	r2, [r7, #32]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	4b61      	ldr	r3, [pc, #388]	@ (8003da8 <HAL_ADC_Init+0x49c>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a4d      	ldr	r2, [pc, #308]	@ (8003da0 <HAL_ADC_Init+0x494>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	f000 80a4 	beq.w	8003db8 <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe22 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 8003c7a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff fe2f 	bl	80038e4 <LL_ADC_INJ_IsConversionOngoing>
 8003c86:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d166      	bne.n	8003d5c <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d163      	bne.n	8003d5c <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7f1b      	ldrb	r3, [r3, #28]
 8003c98:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4943      	ldr	r1, [pc, #268]	@ (8003dac <HAL_ADC_Init+0x4a0>)
 8003ca0:	428b      	cmp	r3, r1
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_Init+0x3a2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4941      	ldr	r1, [pc, #260]	@ (8003db0 <HAL_ADC_Init+0x4a4>)
 8003caa:	428b      	cmp	r3, r1
 8003cac:	d102      	bne.n	8003cb4 <HAL_ADC_Init+0x3a8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb2:	e002      	b.n	8003cba <HAL_ADC_Init+0x3ae>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb8:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cc8:	f023 0303 	bic.w	r3, r3, #3
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6812      	ldr	r2, [r2, #0]
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7ff fc11 	bl	8003510 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d11e      	bne.n	8003d36 <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	4b2b      	ldr	r3, [pc, #172]	@ (8003db4 <HAL_ADC_Init+0x4a8>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003d0c:	0411      	lsls	r1, r2, #16
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d12:	4311      	orrs	r1, r2
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003d18:	4311      	orrs	r1, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d24:	0892      	lsrs	r2, r2, #2
 8003d26:	430a      	orrs	r2, r1
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	611a      	str	r2, [r3, #16]
 8003d34:	e007      	b.n	8003d46 <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d10c      	bne.n	8003d7e <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6a:	f023 010f 	bic.w	r1, r3, #15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	1e5a      	subs	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d7c:	e007      	b.n	8003d8e <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 020f 	bic.w	r2, r2, #15
 8003d8c:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	f043 0201 	orr.w	r2, r3, #1
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003d9e:	e092      	b.n	8003ec6 <HAL_ADC_Init+0x5ba>
 8003da0:	46021000 	.word	0x46021000
 8003da4:	fff0c013 	.word	0xfff0c013
 8003da8:	ffde800d 	.word	0xffde800d
 8003dac:	42028000 	.word	0x42028000
 8003db0:	42028100 	.word	0x42028100
 8003db4:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d111      	bne.n	8003de6 <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003dca:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8003dd0:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8003dd6:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	f043 0301 	orr.w	r3, r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <HAL_ADC_Init+0x5c8>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	69f9      	ldr	r1, [r7, #28]
 8003df6:	430b      	orrs	r3, r1
 8003df8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e02:	461a      	mov	r2, r3
 8003e04:	2100      	movs	r1, #0
 8003e06:	f7ff fba6 	bl	8003556 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	461a      	mov	r2, r3
 8003e14:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8003e18:	f7ff fb9d 	bl	8003556 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d108      	bne.n	8003e36 <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f062 020f 	orn	r2, r2, #15
 8003e32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e34:	e018      	b.n	8003e68 <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e3e:	d113      	bne.n	8003e68 <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	f003 031c 	and.w	r3, r3, #28
 8003e52:	f06f 020f 	mvn.w	r2, #15
 8003e56:	fa02 f103 	lsl.w	r1, r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed8 <HAL_ADC_Init+0x5cc>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d10b      	bne.n	8003e90 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e82:	f023 0303 	bic.w	r3, r3, #3
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e8e:	e01a      	b.n	8003ec6 <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e94:	f023 0312 	bic.w	r3, r3, #18
 8003e98:	f043 0210 	orr.w	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003eb2:	e008      	b.n	8003ec6 <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eb8:	f043 0210 	orr.w	r2, r3, #16
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8003ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	372c      	adds	r7, #44	@ 0x2c
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	f7fffc02 	.word	0xf7fffc02
 8003ed8:	833ffff3 	.word	0x833ffff3

08003edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b0b7      	sub	sp, #220	@ 0xdc
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4aa8      	ldr	r2, [pc, #672]	@ (8004198 <HAL_ADC_ConfigChannel+0x2bc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d103      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d102      	bne.n	8003f12 <HAL_ADC_ConfigChannel+0x36>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f000 bdfe 	b.w	8004b0e <HAL_ADC_ConfigChannel+0xc32>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fccd 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 85c1 	bne.w	8004aae <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a99      	ldr	r2, [pc, #612]	@ (8004198 <HAL_ADC_ConfigChannel+0x2bc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f000 8409 	beq.w	800474a <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x7a>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0e9b      	lsrs	r3, r3, #26
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2201      	movs	r2, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	e01d      	b.n	8003f92 <HAL_ADC_ConfigChannel+0xb6>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f62:	fa93 f3a3 	rbit	r3, r3
 8003f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003f6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003f72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8003f7a:	2320      	movs	r3, #32
 8003f7c:	e004      	b.n	8003f88 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8003f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f82:	fab3 f383 	clz	r3, r3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	69d1      	ldr	r1, [r2, #28]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f7ff faf1 	bl	8003594 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fc81 	bl	80038be <LL_ADC_REG_IsConversionOngoing>
 8003fbc:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fc8d 	bl	80038e4 <LL_ADC_INJ_IsConversionOngoing>
 8003fca:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f040 81df 	bne.w	8004396 <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 81da 	bne.w	8004396 <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	6819      	ldr	r1, [r3, #0]
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f7ff fb7c 	bl	80036ec <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b04      	cmp	r3, #4
 8004014:	d046      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6919      	ldr	r1, [r3, #16]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004026:	f7ff f9d5 	bl	80033d4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6818      	ldr	r0, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	6919      	ldr	r1, [r3, #16]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	461a      	mov	r2, r3
 8004038:	f7ff fa19 	bl	800346e <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7e9b      	ldrb	r3, [r3, #26]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d11e      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_ADC_ConfigChannel+0x17e>
 8004054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004058:	e000      	b.n	800405c <HAL_ADC_ConfigChannel+0x180>
 800405a:	2300      	movs	r3, #0
 800405c:	461a      	mov	r2, r3
 800405e:	f7ff fa3c 	bl	80034da <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800406e:	2b01      	cmp	r3, #1
 8004070:	d102      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x19c>
 8004072:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004076:	e000      	b.n	800407a <HAL_ADC_ConfigChannel+0x19e>
 8004078:	2300      	movs	r3, #0
 800407a:	461a      	mov	r2, r3
 800407c:	f7ff fa12 	bl	80034a4 <LL_ADC_SetOffsetSignedSaturation>
 8004080:	e189      	b.n	8004396 <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2200      	movs	r2, #0
 800408c:	4619      	mov	r1, r3
 800408e:	f7ff fa24 	bl	80034da <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2200      	movs	r2, #0
 800409c:	4619      	mov	r1, r3
 800409e:	f7ff fa01 	bl	80034a4 <LL_ADC_SetOffsetSignedSaturation>
 80040a2:	e178      	b.n	8004396 <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2100      	movs	r1, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff f9b3 	bl	8003416 <LL_ADC_GetOffsetChannel>
 80040b0:	4603      	mov	r3, r0
 80040b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_ADC_ConfigChannel+0x1f4>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff f9a8 	bl	8003416 <LL_ADC_GetOffsetChannel>
 80040c6:	4603      	mov	r3, r0
 80040c8:	0e9b      	lsrs	r3, r3, #26
 80040ca:	f003 021f 	and.w	r2, r3, #31
 80040ce:	e01e      	b.n	800410e <HAL_ADC_ConfigChannel+0x232>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff f99d 	bl	8003416 <LL_ADC_GetOffsetChannel>
 80040dc:	4603      	mov	r3, r0
 80040de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80040ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80040f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80040f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80040fe:	2320      	movs	r3, #32
 8004100:	e004      	b.n	800410c <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004102:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004106:	fab3 f383 	clz	r3, r3
 800410a:	b2db      	uxtb	r3, r3
 800410c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d105      	bne.n	8004126 <HAL_ADC_ConfigChannel+0x24a>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	0e9b      	lsrs	r3, r3, #26
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	e018      	b.n	8004158 <HAL_ADC_ConfigChannel+0x27c>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800413a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800414a:	2320      	movs	r3, #32
 800414c:	e004      	b.n	8004158 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800414e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004158:	429a      	cmp	r2, r3
 800415a:	d107      	bne.n	800416c <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	2300      	movs	r3, #0
 8004166:	2100      	movs	r1, #0
 8004168:	f7ff f934 	bl	80033d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f94f 	bl	8003416 <LL_ADC_GetOffsetChannel>
 8004178:	4603      	mov	r3, r0
 800417a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10c      	bne.n	800419c <HAL_ADC_ConfigChannel+0x2c0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f944 	bl	8003416 <LL_ADC_GetOffsetChannel>
 800418e:	4603      	mov	r3, r0
 8004190:	0e9b      	lsrs	r3, r3, #26
 8004192:	f003 021f 	and.w	r2, r3, #31
 8004196:	e020      	b.n	80041da <HAL_ADC_ConfigChannel+0x2fe>
 8004198:	46021000 	.word	0x46021000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f937 	bl	8003416 <LL_ADC_GetOffsetChannel>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80041ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80041be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80041c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e004      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 80041ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x316>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	0e9b      	lsrs	r3, r3, #26
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	e018      	b.n	8004224 <HAL_ADC_ConfigChannel+0x348>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800420a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800420e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8004216:	2320      	movs	r3, #32
 8004218:	e004      	b.n	8004224 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800421a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800421e:	fab3 f383 	clz	r3, r3
 8004222:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004224:	429a      	cmp	r2, r3
 8004226:	d107      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	2300      	movs	r3, #0
 8004232:	2101      	movs	r1, #1
 8004234:	f7ff f8ce 	bl	80033d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2102      	movs	r1, #2
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff f8e9 	bl	8003416 <LL_ADC_GetOffsetChannel>
 8004244:	4603      	mov	r3, r0
 8004246:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x388>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2102      	movs	r1, #2
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f8de 	bl	8003416 <LL_ADC_GetOffsetChannel>
 800425a:	4603      	mov	r3, r0
 800425c:	0e9b      	lsrs	r3, r3, #26
 800425e:	f003 021f 	and.w	r2, r3, #31
 8004262:	e01a      	b.n	800429a <HAL_ADC_ConfigChannel+0x3be>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2102      	movs	r1, #2
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff f8d3 	bl	8003416 <LL_ADC_GetOffsetChannel>
 8004270:	4603      	mov	r3, r0
 8004272:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800427c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800427e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004282:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800428a:	2320      	movs	r3, #32
 800428c:	e004      	b.n	8004298 <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 800428e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d105      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x3d6>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	0e9b      	lsrs	r3, r3, #26
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	e011      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x3fa>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ba:	fa93 f3a3 	rbit	r3, r3
 80042be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80042c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80042c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80042ca:	2320      	movs	r3, #32
 80042cc:	e003      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80042ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d107      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2300      	movs	r3, #0
 80042e4:	2102      	movs	r1, #2
 80042e6:	f7ff f875 	bl	80033d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2103      	movs	r1, #3
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff f890 	bl	8003416 <LL_ADC_GetOffsetChannel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x43a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2103      	movs	r1, #3
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff f885 	bl	8003416 <LL_ADC_GetOffsetChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	e017      	b.n	8004346 <HAL_ADC_ConfigChannel+0x46a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2103      	movs	r1, #3
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f87a 	bl	8003416 <LL_ADC_GetOffsetChannel>
 8004322:	4603      	mov	r3, r0
 8004324:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800432e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004330:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 800433c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d105      	bne.n	800435e <HAL_ADC_ConfigChannel+0x482>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	0e9b      	lsrs	r3, r3, #26
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	e011      	b.n	8004382 <HAL_ADC_ConfigChannel+0x4a6>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 8004376:	2320      	movs	r3, #32
 8004378:	e003      	b.n	8004382 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 800437a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004382:	429a      	cmp	r2, r3
 8004384:	d107      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	2300      	movs	r3, #0
 8004390:	2103      	movs	r1, #3
 8004392:	f7ff f81f 	bl	80033d4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fa7c 	bl	8003898 <LL_ADC_IsEnabled>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 83ad 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff f9fd 	bl	80037b4 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043c2:	f040 80d6 	bne.w	8004572 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x50e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	0e9b      	lsrs	r3, r3, #26
 80043d8:	3301      	adds	r3, #1
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2b09      	cmp	r3, #9
 80043e0:	bf94      	ite	ls
 80043e2:	2301      	movls	r3, #1
 80043e4:	2300      	movhi	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	e019      	b.n	800441e <HAL_ADC_ConfigChannel+0x542>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80043f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043fa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80043fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e003      	b.n	800440e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004406:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	2b09      	cmp	r3, #9
 8004416:	bf94      	ite	ls
 8004418:	2301      	movls	r3, #1
 800441a:	2300      	movhi	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d04d      	beq.n	80044be <HAL_ADC_ConfigChannel+0x5e2>
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d107      	bne.n	800443e <HAL_ADC_ConfigChannel+0x562>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	0e9b      	lsrs	r3, r3, #26
 8004434:	3301      	adds	r3, #1
 8004436:	069b      	lsls	r3, r3, #26
 8004438:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800443c:	e015      	b.n	800446a <HAL_ADC_ConfigChannel+0x58e>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004446:	fa93 f3a3 	rbit	r3, r3
 800444a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800444c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004456:	2320      	movs	r3, #32
 8004458:	e003      	b.n	8004462 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800445a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800445c:	fab3 f383 	clz	r3, r3
 8004460:	b2db      	uxtb	r3, r3
 8004462:	3301      	adds	r3, #1
 8004464:	069b      	lsls	r3, r3, #26
 8004466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <HAL_ADC_ConfigChannel+0x5ae>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	3301      	adds	r3, #1
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2101      	movs	r1, #1
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	e017      	b.n	80044ba <HAL_ADC_ConfigChannel+0x5de>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80044a2:	2320      	movs	r3, #32
 80044a4:	e003      	b.n	80044ae <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80044a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a8:	fab3 f383 	clz	r3, r3
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2101      	movs	r1, #1
 80044b6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ba:	4313      	orrs	r3, r2
 80044bc:	e04e      	b.n	800455c <HAL_ADC_ConfigChannel+0x680>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <HAL_ADC_ConfigChannel+0x5fe>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	3301      	adds	r3, #1
 80044d2:	069b      	lsls	r3, r3, #26
 80044d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044d8:	e015      	b.n	8004506 <HAL_ADC_ConfigChannel+0x62a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e003      	b.n	80044fe <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	069b      	lsls	r3, r3, #26
 8004502:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x64a>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0e9b      	lsrs	r3, r3, #26
 8004518:	3301      	adds	r3, #1
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	2101      	movs	r1, #1
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	e017      	b.n	8004556 <HAL_ADC_ConfigChannel+0x67a>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	61bb      	str	r3, [r7, #24]
  return result;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 800453e:	2320      	movs	r3, #32
 8004540:	e003      	b.n	800454a <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	fab3 f383 	clz	r3, r3
 8004548:	b2db      	uxtb	r3, r3
 800454a:	3301      	adds	r3, #1
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2101      	movs	r1, #1
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	4313      	orrs	r3, r2
 8004558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800455c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	461a      	mov	r2, r3
 800456a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800456e:	f7ff f8bd 	bl	80036ec <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f280 82c3 	bge.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a92      	ldr	r2, [pc, #584]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_ADC_ConfigChannel+0x6b4>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a91      	ldr	r2, [pc, #580]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x6b8>
 8004590:	4b90      	ldr	r3, [pc, #576]	@ (80047d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8004592:	e000      	b.n	8004596 <HAL_ADC_ConfigChannel+0x6ba>
 8004594:	4b90      	ldr	r3, [pc, #576]	@ (80047d8 <HAL_ADC_ConfigChannel+0x8fc>)
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe feee 	bl	8003378 <LL_ADC_GetCommonPathInternalCh>
 800459c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a89      	ldr	r2, [pc, #548]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_ADC_ConfigChannel+0x6d8>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a88      	ldr	r2, [pc, #544]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10e      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x6f6>
 80045b4:	4885      	ldr	r0, [pc, #532]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 80045b6:	f7ff f96f 	bl	8003898 <LL_ADC_IsEnabled>
 80045ba:	4604      	mov	r4, r0
 80045bc:	4884      	ldr	r0, [pc, #528]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80045be:	f7ff f96b 	bl	8003898 <LL_ADC_IsEnabled>
 80045c2:	4603      	mov	r3, r0
 80045c4:	4323      	orrs	r3, r4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	e008      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x708>
 80045d2:	4882      	ldr	r0, [pc, #520]	@ (80047dc <HAL_ADC_ConfigChannel+0x900>)
 80045d4:	f7ff f960 	bl	8003898 <LL_ADC_IsEnabled>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf0c      	ite	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	2300      	movne	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80a6 	beq.w	8004736 <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7c      	ldr	r2, [pc, #496]	@ (80047e0 <HAL_ADC_ConfigChannel+0x904>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d13c      	bne.n	800466e <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d136      	bne.n	800466e <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a71      	ldr	r2, [pc, #452]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00a      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x744>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a70      	ldr	r2, [pc, #448]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d005      	beq.n	8004620 <HAL_ADC_ConfigChannel+0x744>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a70      	ldr	r2, [pc, #448]	@ (80047dc <HAL_ADC_ConfigChannel+0x900>)
 800461a:	4293      	cmp	r3, r2
 800461c:	f040 826e 	bne.w	8004afc <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a69      	ldr	r2, [pc, #420]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d004      	beq.n	8004634 <HAL_ADC_ConfigChannel+0x758>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a68      	ldr	r2, [pc, #416]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x75c>
 8004634:	4a67      	ldr	r2, [pc, #412]	@ (80047d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8004636:	e000      	b.n	800463a <HAL_ADC_ConfigChannel+0x75e>
 8004638:	4a67      	ldr	r2, [pc, #412]	@ (80047d8 <HAL_ADC_ConfigChannel+0x8fc>)
 800463a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800463e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004642:	4619      	mov	r1, r3
 8004644:	4610      	mov	r0, r2
 8004646:	f7fe fe84 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800464a:	4b66      	ldr	r3, [pc, #408]	@ (80047e4 <HAL_ADC_ConfigChannel+0x908>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	099b      	lsrs	r3, r3, #6
 8004650:	4a65      	ldr	r2, [pc, #404]	@ (80047e8 <HAL_ADC_ConfigChannel+0x90c>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	099b      	lsrs	r3, r3, #6
 8004658:	3301      	adds	r3, #1
 800465a:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 800465c:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 800465e:	e002      	b.n	8004666 <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	3b01      	subs	r3, #1
 8004664:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f9      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800466c:	e246      	b.n	8004afc <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5e      	ldr	r2, [pc, #376]	@ (80047ec <HAL_ADC_ConfigChannel+0x910>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d12b      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800467c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004680:	2b00      	cmp	r3, #0
 8004682:	d125      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a50      	ldr	r2, [pc, #320]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00a      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0x7c8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a4f      	ldr	r2, [pc, #316]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d005      	beq.n	80046a4 <HAL_ADC_ConfigChannel+0x7c8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a4f      	ldr	r2, [pc, #316]	@ (80047dc <HAL_ADC_ConfigChannel+0x900>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	f040 822e 	bne.w	8004b00 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a48      	ldr	r2, [pc, #288]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_ConfigChannel+0x7dc>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a47      	ldr	r2, [pc, #284]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x7e0>
 80046b8:	4a46      	ldr	r2, [pc, #280]	@ (80047d4 <HAL_ADC_ConfigChannel+0x8f8>)
 80046ba:	e000      	b.n	80046be <HAL_ADC_ConfigChannel+0x7e2>
 80046bc:	4a46      	ldr	r2, [pc, #280]	@ (80047d8 <HAL_ADC_ConfigChannel+0x8fc>)
 80046be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c6:	4619      	mov	r1, r3
 80046c8:	4610      	mov	r0, r2
 80046ca:	f7fe fe42 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046ce:	e217      	b.n	8004b00 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a46      	ldr	r2, [pc, #280]	@ (80047f0 <HAL_ADC_ConfigChannel+0x914>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	f040 8213 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f040 820c 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a37      	ldr	r2, [pc, #220]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00a      	beq.n	800470a <HAL_ADC_ConfigChannel+0x82e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a35      	ldr	r2, [pc, #212]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d005      	beq.n	800470a <HAL_ADC_ConfigChannel+0x82e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <HAL_ADC_ConfigChannel+0x900>)
 8004704:	4293      	cmp	r3, r2
 8004706:	f040 81fc 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2f      	ldr	r2, [pc, #188]	@ (80047cc <HAL_ADC_ConfigChannel+0x8f0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d004      	beq.n	800471e <HAL_ADC_ConfigChannel+0x842>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_ADC_ConfigChannel+0x8f4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d101      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x846>
 800471e:	4a2d      	ldr	r2, [pc, #180]	@ (80047d4 <HAL_ADC_ConfigChannel+0x8f8>)
 8004720:	e000      	b.n	8004724 <HAL_ADC_ConfigChannel+0x848>
 8004722:	4a2d      	ldr	r2, [pc, #180]	@ (80047d8 <HAL_ADC_ConfigChannel+0x8fc>)
 8004724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004728:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800472c:	4619      	mov	r1, r3
 800472e:	4610      	mov	r0, r2
 8004730:	f7fe fe0f 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
 8004734:	e1e5      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004748:	e1db      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	f000 811b 	beq.w	8004992 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004764:	d004      	beq.n	8004770 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800476a:	4a22      	ldr	r2, [pc, #136]	@ (80047f4 <HAL_ADC_ConfigChannel+0x918>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d107      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004778:	4618      	mov	r0, r3
 800477a:	f7fe ff6b 	bl	8003654 <LL_ADC_REG_SetSequencerChAdd>
 800477e:	e059      	b.n	8004834 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	210f      	movs	r1, #15
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800479c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d105      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x8d4>
 80047a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047a8:	0e9b      	lsrs	r3, r3, #26
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	e027      	b.n	8004800 <HAL_ADC_ConfigChannel+0x924>
 80047b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80047b4:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	60fb      	str	r3, [r7, #12]
  return result;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d117      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e019      	b.n	8004800 <HAL_ADC_ConfigChannel+0x924>
 80047cc:	42028000 	.word	0x42028000
 80047d0:	42028100 	.word	0x42028100
 80047d4:	42028300 	.word	0x42028300
 80047d8:	46021300 	.word	0x46021300
 80047dc:	46021000 	.word	0x46021000
 80047e0:	ce080000 	.word	0xce080000
 80047e4:	20000000 	.word	0x20000000
 80047e8:	053e2d63 	.word	0x053e2d63
 80047ec:	ca040000 	.word	0xca040000
 80047f0:	80000001 	.word	0x80000001
 80047f4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	f001 011f 	and.w	r1, r1, #31
 8004808:	408b      	lsls	r3, r1
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	089b      	lsrs	r3, r3, #2
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	429a      	cmp	r2, r3
 8004820:	d808      	bhi.n	8004834 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800482e:	4619      	mov	r1, r3
 8004830:	f7fe feb0 	bl	8003594 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	461a      	mov	r2, r3
 800483e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004842:	f7fe ff53 	bl	80036ec <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f280 8159 	bge.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a9b      	ldr	r2, [pc, #620]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_ADC_ConfigChannel+0x988>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a9a      	ldr	r2, [pc, #616]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x98c>
 8004864:	4b99      	ldr	r3, [pc, #612]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x98e>
 8004868:	4b99      	ldr	r3, [pc, #612]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fd84 	bl	8003378 <LL_ADC_GetCommonPathInternalCh>
 8004870:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a96      	ldr	r2, [pc, #600]	@ (8004ad4 <HAL_ADC_ConfigChannel+0xbf8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d12b      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800487e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004882:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d125      	bne.n	80048d6 <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a8d      	ldr	r2, [pc, #564]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADC_ConfigChannel+0x9c2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a8b      	ldr	r2, [pc, #556]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x9c6>
 800489e:	4a8b      	ldr	r2, [pc, #556]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 80048a0:	e000      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x9c8>
 80048a2:	4a8b      	ldr	r2, [pc, #556]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 80048a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7fe fd4f 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80048b4:	4b88      	ldr	r3, [pc, #544]	@ (8004ad8 <HAL_ADC_ConfigChannel+0xbfc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	099b      	lsrs	r3, r3, #6
 80048ba:	4a88      	ldr	r2, [pc, #544]	@ (8004adc <HAL_ADC_ConfigChannel+0xc00>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	099b      	lsrs	r3, r3, #6
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80048c6:	e002      	b.n	80048ce <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f9      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80048d4:	e045      	b.n	8004962 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a81      	ldr	r2, [pc, #516]	@ (8004ae0 <HAL_ADC_ConfigChannel+0xc04>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d11b      	bne.n	8004918 <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d115      	bne.n	8004918 <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a74      	ldr	r2, [pc, #464]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0xa24>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a73      	ldr	r2, [pc, #460]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0xa28>
 8004900:	4a72      	ldr	r2, [pc, #456]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004902:	e000      	b.n	8004906 <HAL_ADC_ConfigChannel+0xa2a>
 8004904:	4a72      	ldr	r2, [pc, #456]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800490a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490e:	4619      	mov	r1, r3
 8004910:	4610      	mov	r0, r2
 8004912:	f7fe fd1e 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
 8004916:	e024      	b.n	8004962 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a71      	ldr	r2, [pc, #452]	@ (8004ae4 <HAL_ADC_ConfigChannel+0xc08>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d11f      	bne.n	8004962 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004922:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d115      	bne.n	800495a <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a64      	ldr	r2, [pc, #400]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_ADC_ConfigChannel+0xa66>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a62      	ldr	r2, [pc, #392]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_ADC_ConfigChannel+0xa6a>
 8004942:	4a62      	ldr	r2, [pc, #392]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004944:	e000      	b.n	8004948 <HAL_ADC_ConfigChannel+0xa6c>
 8004946:	4a62      	ldr	r2, [pc, #392]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004948:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800494c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe fcfd 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
 8004958:	e003      	b.n	8004962 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a62      	ldr	r2, [pc, #392]	@ (8004ae8 <HAL_ADC_ConfigChannel+0xc0c>)
 8004960:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a61      	ldr	r2, [pc, #388]	@ (8004aec <HAL_ADC_ConfigChannel+0xc10>)
 8004968:	4293      	cmp	r3, r2
 800496a:	f040 80ca 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800496e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 80c3 	bne.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004990:	e0b7      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800499a:	d004      	beq.n	80049a6 <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80049a0:	4a53      	ldr	r2, [pc, #332]	@ (8004af0 <HAL_ADC_ConfigChannel+0xc14>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d106      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fe83 	bl	80036ba <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f280 80a2 	bge.w	8004b02 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a40      	ldr	r2, [pc, #256]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_ADC_ConfigChannel+0xaf6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0xafa>
 80049d2:	4b3e      	ldr	r3, [pc, #248]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 80049d4:	e000      	b.n	80049d8 <HAL_ADC_ConfigChannel+0xafc>
 80049d6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fccd 	bl	8003378 <LL_ADC_GetCommonPathInternalCh>
 80049de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a43      	ldr	r2, [pc, #268]	@ (8004af4 <HAL_ADC_ConfigChannel+0xc18>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d115      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a34      	ldr	r2, [pc, #208]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_ADC_ConfigChannel+0xb24>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0xb28>
 8004a00:	4a32      	ldr	r2, [pc, #200]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004a02:	e000      	b.n	8004a06 <HAL_ADC_ConfigChannel+0xb2a>
 8004a04:	4a32      	ldr	r2, [pc, #200]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f7fe fc9e 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
 8004a16:	e034      	b.n	8004a82 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a36      	ldr	r2, [pc, #216]	@ (8004af8 <HAL_ADC_ConfigChannel+0xc1c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d115      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_ADC_ConfigChannel+0xb5a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_ADC_ConfigChannel+0xb5e>
 8004a36:	4a25      	ldr	r2, [pc, #148]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004a38:	e000      	b.n	8004a3c <HAL_ADC_ConfigChannel+0xb60>
 8004a3a:	4a25      	ldr	r2, [pc, #148]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a44:	4619      	mov	r1, r3
 8004a46:	4610      	mov	r0, r2
 8004a48:	f7fe fc83 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
 8004a4c:	e019      	b.n	8004a82 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	@ (8004ae4 <HAL_ADC_ConfigChannel+0xc08>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d114      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a19      	ldr	r2, [pc, #100]	@ (8004ac4 <HAL_ADC_ConfigChannel+0xbe8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_ADC_ConfigChannel+0xb90>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a18      	ldr	r2, [pc, #96]	@ (8004ac8 <HAL_ADC_ConfigChannel+0xbec>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0xb94>
 8004a6c:	4a17      	ldr	r2, [pc, #92]	@ (8004acc <HAL_ADC_ConfigChannel+0xbf0>)
 8004a6e:	e000      	b.n	8004a72 <HAL_ADC_ConfigChannel+0xb96>
 8004a70:	4a17      	ldr	r2, [pc, #92]	@ (8004ad0 <HAL_ADC_ConfigChannel+0xbf4>)
 8004a72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a76:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f7fe fc68 	bl	8003352 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_ADC_ConfigChannel+0xc10>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d13a      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d134      	bne.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004aac:	e029      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ab2:	f043 0220 	orr.w	r2, r3, #32
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004ac0:	e01f      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
 8004ac2:	bf00      	nop
 8004ac4:	42028000 	.word	0x42028000
 8004ac8:	42028100 	.word	0x42028100
 8004acc:	42028300 	.word	0x42028300
 8004ad0:	46021300 	.word	0x46021300
 8004ad4:	b6002000 	.word	0xb6002000
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	053e2d63 	.word	0x053e2d63
 8004ae0:	ba004000 	.word	0xba004000
 8004ae4:	80000001 	.word	0x80000001
 8004ae8:	b2001000 	.word	0xb2001000
 8004aec:	d7200000 	.word	0xd7200000
 8004af0:	80000010 	.word	0x80000010
 8004af4:	ce080000 	.word	0xce080000
 8004af8:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b00:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004b0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	37dc      	adds	r7, #220	@ 0xdc
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd90      	pop	{r4, r7, pc}
 8004b16:	bf00      	nop

08004b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b28:	4b0c      	ldr	r3, [pc, #48]	@ (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b34:	4013      	ands	r3, r2
 8004b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b4a:	4a04      	ldr	r2, [pc, #16]	@ (8004b5c <__NVIC_SetPriorityGrouping+0x44>)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	60d3      	str	r3, [r2, #12]
}
 8004b50:	bf00      	nop
 8004b52:	3714      	adds	r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b64:	4b04      	ldr	r3, [pc, #16]	@ (8004b78 <__NVIC_GetPriorityGrouping+0x18>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	0a1b      	lsrs	r3, r3, #8
 8004b6a:	f003 0307 	and.w	r3, r3, #7
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	e000ed00 	.word	0xe000ed00

08004b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	db0b      	blt.n	8004ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	f003 021f 	and.w	r2, r3, #31
 8004b94:	4907      	ldr	r1, [pc, #28]	@ (8004bb4 <__NVIC_EnableIRQ+0x38>)
 8004b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e100 	.word	0xe000e100

08004bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	6039      	str	r1, [r7, #0]
 8004bc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	db0a      	blt.n	8004be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	490c      	ldr	r1, [pc, #48]	@ (8004c04 <__NVIC_SetPriority+0x4c>)
 8004bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd6:	0112      	lsls	r2, r2, #4
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be0:	e00a      	b.n	8004bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	4908      	ldr	r1, [pc, #32]	@ (8004c08 <__NVIC_SetPriority+0x50>)
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	3b04      	subs	r3, #4
 8004bf0:	0112      	lsls	r2, r2, #4
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	761a      	strb	r2, [r3, #24]
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000e100 	.word	0xe000e100
 8004c08:	e000ed00 	.word	0xe000ed00

08004c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	@ 0x24
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f1c3 0307 	rsb	r3, r3, #7
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	bf28      	it	cs
 8004c2a:	2304      	movcs	r3, #4
 8004c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	3304      	adds	r3, #4
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d902      	bls.n	8004c3c <NVIC_EncodePriority+0x30>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3b03      	subs	r3, #3
 8004c3a:	e000      	b.n	8004c3e <NVIC_EncodePriority+0x32>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c40:	f04f 32ff 	mov.w	r2, #4294967295
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43da      	mvns	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	401a      	ands	r2, r3
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c54:	f04f 31ff 	mov.w	r1, #4294967295
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	43d9      	mvns	r1, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c64:	4313      	orrs	r3, r2
         );
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff ff4c 	bl	8004b18 <__NVIC_SetPriorityGrouping>
}
 8004c80:	bf00      	nop
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c96:	f7ff ff63 	bl	8004b60 <__NVIC_GetPriorityGrouping>
 8004c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	6978      	ldr	r0, [r7, #20]
 8004ca2:	f7ff ffb3 	bl	8004c0c <NVIC_EncodePriority>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff ff82 	bl	8004bb8 <__NVIC_SetPriority>
}
 8004cb4:	bf00      	nop
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff ff56 	bl	8004b7c <__NVIC_EnableIRQ>
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d844      	bhi.n	8004d70 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d0f 	.word	0x08004d0f
 8004cf0:	08004d2d 	.word	0x08004d2d
 8004cf4:	08004d4f 	.word	0x08004d4f
 8004cf8:	08004d71 	.word	0x08004d71
 8004cfc:	08004d01 	.word	0x08004d01
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004d00:	4b1f      	ldr	r3, [pc, #124]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a1e      	ldr	r2, [pc, #120]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	6013      	str	r3, [r2, #0]
      break;
 8004d0c:	e031      	b.n	8004d72 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a1b      	ldr	r2, [pc, #108]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d14:	f023 0304 	bic.w	r3, r3, #4
 8004d18:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d20:	4a18      	ldr	r2, [pc, #96]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d2a:	e022      	b.n	8004d72 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004d38:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d42:	4a10      	ldr	r2, [pc, #64]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d4c:	e011      	b.n	8004d72 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	@ (8004d80 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d60:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004d64:	4a07      	ldr	r2, [pc, #28]	@ (8004d84 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004d66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004d6e:	e000      	b.n	8004d72 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004d70:	bf00      	nop
  }
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	46020c00 	.word	0x46020c00

08004d88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e014      	b.n	8004dc4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	791b      	ldrb	r3, [r3, #4]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d105      	bne.n	8004db0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc ffa6 	bl	8001cfc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08a      	sub	sp, #40	@ 0x28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_DAC_ConfigChannel+0x1c>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e187      	b.n	80050fc <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	795b      	ldrb	r3, [r3, #5]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_DAC_ConfigChannel+0x32>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e17e      	b.n	80050fc <HAL_DAC_ConfigChannel+0x330>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2202      	movs	r2, #2
 8004e08:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d17a      	bne.n	8004f08 <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e12:	f7fe fa4b 	bl	80032ac <HAL_GetTick>
 8004e16:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d13d      	bne.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e1e:	e018      	b.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e20:	f7fe fa44 	bl	80032ac <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d911      	bls.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f043 0208 	orr.w	r2, r3, #8
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e154      	b.n	80050fc <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1df      	bne.n	8004e20 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e68:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e6a:	e020      	b.n	8004eae <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e6c:	f7fe fa1e 	bl	80032ac <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d90f      	bls.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	da0a      	bge.n	8004e9a <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f043 0208 	orr.w	r2, r3, #8
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2203      	movs	r2, #3
 8004e94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e130      	b.n	80050fc <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dbe3      	blt.n	8004e6c <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	ea02 0103 	and.w	r1, r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f003 0310 	and.w	r3, r3, #16
 8004ed2:	409a      	lsls	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	21ff      	movs	r1, #255	@ 0xff
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	ea02 0103 	and.w	r1, r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0310 	and.w	r3, r3, #16
 8004efe:	409a      	lsls	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f0e:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d11d      	bne.n	8004f62 <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	221f      	movs	r2, #31
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3e:	4013      	ands	r3, r2
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f003 0310 	and.w	r3, r3, #16
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	fa02 f303 	lsl.w	r3, r2, r3
 8004f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f56:	4313      	orrs	r3, r2
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2207      	movs	r2, #7
 8004f72:	fa02 f303 	lsl.w	r3, r2, r3
 8004f76:	43db      	mvns	r3, r3
 8004f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d102      	bne.n	8004f8c <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 8004f86:	2300      	movs	r3, #0
 8004f88:	623b      	str	r3, [r7, #32]
 8004f8a:	e00f      	b.n	8004fac <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d102      	bne.n	8004f9a <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004f94:	2301      	movs	r3, #1
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	e008      	b.n	8004fac <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	e001      	b.n	8004fac <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	68da      	ldr	r2, [r3, #12]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	6a3a      	ldr	r2, [r7, #32]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fce:	4013      	ands	r3, r2
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	7a1b      	ldrb	r3, [r3, #8]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d102      	bne.n	8004fe0 <HAL_DAC_ConfigChannel+0x214>
 8004fda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fde:	e000      	b.n	8004fe2 <HAL_DAC_ConfigChannel+0x216>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0310 	and.w	r3, r3, #16
 8004fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	7a5b      	ldrb	r3, [r3, #9]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d102      	bne.n	800500c <HAL_DAC_ConfigChannel+0x240>
 8005006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500a:	e000      	b.n	800500e <HAL_DAC_ConfigChannel+0x242>
 800500c:	2300      	movs	r3, #0
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005016:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800501a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b02      	cmp	r3, #2
 8005022:	d114      	bne.n	800504e <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005024:	f003 fcb6 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 8005028:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4a35      	ldr	r2, [pc, #212]	@ (8005104 <HAL_DAC_ConfigChannel+0x338>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d904      	bls.n	800503c <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
 800503a:	e00f      	b.n	800505c <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4a32      	ldr	r2, [pc, #200]	@ (8005108 <HAL_DAC_ConfigChannel+0x33c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d90a      	bls.n	800505a <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
 800504c:	e006      	b.n	800505c <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005054:	4313      	orrs	r3, r2
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
 8005058:	e000      	b.n	800505c <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800505a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	4313      	orrs	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6819      	ldr	r1, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f003 0310 	and.w	r3, r3, #16
 8005082:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0310 	and.w	r3, r3, #16
 80050a2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050ae:	4013      	ands	r3, r2
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	fa02 f303 	lsl.w	r3, r2, r3
 80050c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c6:	4313      	orrs	r3, r2
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	22c0      	movs	r2, #192	@ 0xc0
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	43da      	mvns	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	400a      	ands	r2, r1
 80050ec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80050fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3728      	adds	r7, #40	@ 0x28
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	09896800 	.word	0x09896800
 8005108:	04c4b400 	.word	0x04c4b400

0800510c <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e024      	b.n	8005170 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	791b      	ldrb	r3, [r3, #4]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11e      	bne.n	800516e <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	795b      	ldrb	r3, [r3, #5]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_DACEx_SetConfigAutonomousMode+0x30>
 8005138:	2302      	movs	r3, #2
 800513a:	e019      	b.n	8005170 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800514e:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e037      	b.n	80051fe <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d119      	bne.n	80051ce <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1a      	ldr	r2, [pc, #104]	@ (8005208 <HAL_DCACHE_Init+0x8c>)
 800519e:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a1a      	ldr	r2, [pc, #104]	@ (800520c <HAL_DCACHE_Init+0x90>)
 80051a4:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	@ (8005210 <HAL_DCACHE_Init+0x94>)
 80051aa:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a19      	ldr	r2, [pc, #100]	@ (8005214 <HAL_DCACHE_Init+0x98>)
 80051b0:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a18      	ldr	r2, [pc, #96]	@ (8005218 <HAL_DCACHE_Init+0x9c>)
 80051b6:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <HAL_DCACHE_Init+0xa0>)
 80051c4:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f814 	bl	8005220 <HAL_DCACHE_Enable>
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	080052bf 	.word	0x080052bf
 800520c:	0800526f 	.word	0x0800526f
 8005210:	08005283 	.word	0x08005283
 8005214:	080052ab 	.word	0x080052ab
 8005218:	08005297 	.word	0x08005297
 800521c:	08001df1 	.word	0x08001df1

08005220 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e015      	b.n	8005262 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 0309 	and.w	r3, r3, #9
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	e00a      	b.n	8005260 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]
  }

  return status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 800528a:	bf00      	nop
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 80052c6:	bf00      	nop
 80052c8:	370c      	adds	r7, #12
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80052da:	f7fd ffe7 	bl	80032ac <HAL_GetTick>
 80052de:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e06b      	b.n	80053c2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d008      	beq.n	8005308 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e05c      	b.n	80053c2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0204 	orr.w	r2, r2, #4
 8005316:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2205      	movs	r2, #5
 800531c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005320:	e020      	b.n	8005364 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005322:	f7fd ffc3 	bl	80032ac <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b05      	cmp	r3, #5
 800532e:	d919      	bls.n	8005364 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005334:	f043 0210 	orr.w	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2203      	movs	r2, #3
 8005340:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005354:	2201      	movs	r2, #1
 8005356:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e02e      	b.n	80053c2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0d7      	beq.n	8005322 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0202 	orr.w	r2, r2, #2
 8005380:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2204      	movs	r2, #4
 8005386:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 8005392:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d007      	beq.n	80053b8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053ac:	2201      	movs	r2, #1
 80053ae:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2200      	movs	r2, #0
 80053b6:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e053      	b.n	8005484 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fc fd37 	bl	8001e64 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8005408:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6851      	ldr	r1, [r2, #4]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	69d2      	ldr	r2, [r2, #28]
 8005414:	4311      	orrs	r1, r2
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6812      	ldr	r2, [r2, #0]
 800541a:	430b      	orrs	r3, r1
 800541c:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005424:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6891      	ldr	r1, [r2, #8]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6992      	ldr	r2, [r2, #24]
 8005434:	4311      	orrs	r1, r2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	430b      	orrs	r3, r1
 800543c:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68d1      	ldr	r1, [r2, #12]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	051a      	lsls	r2, r3, #20
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	055b      	lsls	r3, r3, #21
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_DMA2D_ConfigLayer+0x20>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e084      	b.n	80055b6 <HAL_DMA2D_ConfigLayer+0x12a>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	4413      	add	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	3328      	adds	r3, #40	@ 0x28
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	4413      	add	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80054e0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80054ec:	4b35      	ldr	r3, [pc, #212]	@ (80055c4 <HAL_DMA2D_ConfigLayer+0x138>)
 80054ee:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	2b0a      	cmp	r3, #10
 80054f6:	d003      	beq.n	8005500 <HAL_DMA2D_ConfigLayer+0x74>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	d107      	bne.n	8005510 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	e005      	b.n	800551c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d120      	bne.n	8005564 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	43db      	mvns	r3, r3
 800552c:	ea02 0103 	and.w	r1, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	430a      	orrs	r2, r1
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b0a      	cmp	r3, #10
 800554a:	d003      	beq.n	8005554 <HAL_DMA2D_ConfigLayer+0xc8>
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b09      	cmp	r3, #9
 8005552:	d127      	bne.n	80055a4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
 8005562:	e01f      	b.n	80055a4 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	43db      	mvns	r3, r3
 800556e:	ea02 0103 	and.w	r1, r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	430a      	orrs	r2, r1
 800557a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b0a      	cmp	r3, #10
 800558c:	d003      	beq.n	8005596 <HAL_DMA2D_ConfigLayer+0x10a>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b09      	cmp	r3, #9
 8005594:	d106      	bne.n	80055a4 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80055a2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	ff33000f 	.word	0xff33000f

080055c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 80055d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <HAL_FLASH_Unlock+0x38>)
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	da0b      	bge.n	80055f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 80055da:	4b09      	ldr	r3, [pc, #36]	@ (8005600 <HAL_FLASH_Unlock+0x38>)
 80055dc:	4a09      	ldr	r2, [pc, #36]	@ (8005604 <HAL_FLASH_Unlock+0x3c>)
 80055de:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 80055e0:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <HAL_FLASH_Unlock+0x38>)
 80055e2:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <HAL_FLASH_Unlock+0x40>)
 80055e4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 80055e6:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <HAL_FLASH_Unlock+0x38>)
 80055e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da01      	bge.n	80055f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 80055f2:	79fb      	ldrb	r3, [r7, #7]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	40022000 	.word	0x40022000
 8005604:	45670123 	.word	0x45670123
 8005608:	cdef89ab 	.word	0xcdef89ab

0800560c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8005616:	4b09      	ldr	r3, [pc, #36]	@ (800563c <HAL_FLASH_Lock+0x30>)
 8005618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561a:	4a08      	ldr	r2, [pc, #32]	@ (800563c <HAL_FLASH_Lock+0x30>)
 800561c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005620:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8005622:	4b06      	ldr	r3, [pc, #24]	@ (800563c <HAL_FLASH_Lock+0x30>)
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	da01      	bge.n	800562e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 800562e:	79fb      	ldrb	r3, [r7, #7]
}
 8005630:	4618      	mov	r0, r3
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40022000 	.word	0x40022000

08005640 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8005648:	f7fd fe30 	bl	80032ac <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8005654:	4b1b      	ldr	r3, [pc, #108]	@ (80056c4 <FLASH_WaitForLastOperation+0x84>)
 8005656:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8005658:	e00b      	b.n	8005672 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d007      	beq.n	8005672 <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 8005662:	f7fd fe23 	bl	80032ac <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4293      	cmp	r3, r2
 800566c:	d801      	bhi.n	8005672 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e023      	b.n	80056ba <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1ed      	bne.n	800565a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8005686:	4013      	ands	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00a      	beq.n	80056a6 <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005690:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <FLASH_WaitForLastOperation+0x88>)
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <FLASH_WaitForLastOperation+0x88>)
 800569a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e009      	b.n	80056ba <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40022020 	.word	0x40022020
 80056c8:	2000000c 	.word	0x2000000c

080056cc <HAL_FLASHEx_ConfigBBAttributes>:
  *         block-base attribute type is requested: Secure or Privilege.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_ConfigBBAttributes(FLASH_BBAttributesTypeDef *pBBAttributes)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pBBAttributes->Bank));
  assert_param(IS_FLASH_BB_EXCLUSIVE(pBBAttributes->BBAttributesType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80056d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80056d8:	f7ff ffb2 	bl	8005640 <FLASH_WaitForLastOperation>
 80056dc:	4603      	mov	r3, r0
 80056de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d129      	bne.n	800573a <HAL_FLASHEx_ConfigBBAttributes+0x6e>
      }
    }
    else
#endif /* __ARM_FEATURE_CMSE */
    {
      if (pBBAttributes->Bank == FLASH_BANK_1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d102      	bne.n	80056f4 <HAL_FLASHEx_ConfigBBAttributes+0x28>
      {
        reg = &(FLASH->PRIVBB1R1);
 80056ee:	4b17      	ldr	r3, [pc, #92]	@ (800574c <HAL_FLASHEx_ConfigBBAttributes+0x80>)
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	e001      	b.n	80056f8 <HAL_FLASHEx_ConfigBBAttributes+0x2c>
      }
      else
      {
        reg = &(FLASH->PRIVBB2R1);
 80056f4:	4b16      	ldr	r3, [pc, #88]	@ (8005750 <HAL_FLASHEx_ConfigBBAttributes+0x84>)
 80056f6:	60bb      	str	r3, [r7, #8]
      }
    }

    /* Modify the register values and check that new attributes are taken in account */
    for (index = 0; index < FLASH_BLOCKBASED_NB_REG; index++)
 80056f8:	2300      	movs	r3, #0
 80056fa:	73bb      	strb	r3, [r7, #14]
 80056fc:	e017      	b.n	800572e <HAL_FLASHEx_ConfigBBAttributes+0x62>
    {
      *reg = pBBAttributes->BBAttributes_array[index];
 80056fe:	7bba      	ldrb	r2, [r7, #14]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3202      	adds	r2, #2
 8005704:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	601a      	str	r2, [r3, #0]
      if ((*reg) != pBBAttributes->BBAttributes_array[index])
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	7bb9      	ldrb	r1, [r7, #14]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3102      	adds	r1, #2
 8005716:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800571a:	429a      	cmp	r2, r3
 800571c:	d001      	beq.n	8005722 <HAL_FLASHEx_ConfigBBAttributes+0x56>
      {
        status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
      }
      reg++;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	3304      	adds	r3, #4
 8005726:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < FLASH_BLOCKBASED_NB_REG; index++)
 8005728:	7bbb      	ldrb	r3, [r7, #14]
 800572a:	3301      	adds	r3, #1
 800572c:	73bb      	strb	r3, [r7, #14]
 800572e:	7bbb      	ldrb	r3, [r7, #14]
 8005730:	2b07      	cmp	r3, #7
 8005732:	d9e4      	bls.n	80056fe <HAL_FLASHEx_ConfigBBAttributes+0x32>
  __ASM volatile ("isb 0xF":::"memory");
 8005734:	f3bf 8f6f 	isb	sy
}
 8005738:	bf00      	nop
    /* ISB instruction is called to be sure next instructions are performed with correct attributes */
    __ISB();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800573a:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <HAL_FLASHEx_ConfigBBAttributes+0x88>)
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]

  return status;
 8005740:	7bfb      	ldrb	r3, [r7, #15]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	400220d0 	.word	0x400220d0
 8005750:	400220f0 	.word	0x400220f0
 8005754:	2000000c 	.word	0x2000000c

08005758 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	@ 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800576a:	e1ba      	b.n	8005ae2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	2101      	movs	r1, #1
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	fa01 f303 	lsl.w	r3, r1, r3
 8005778:	4013      	ands	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 81aa 	beq.w	8005adc <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a55      	ldr	r2, [pc, #340]	@ (80058e0 <HAL_GPIO_Init+0x188>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d15d      	bne.n	800584c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005796:	2201      	movs	r2, #1
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f003 0201 	and.w	r2, r3, #1
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80057c0:	4a48      	ldr	r2, [pc, #288]	@ (80058e4 <HAL_GPIO_Init+0x18c>)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057c8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80057ca:	4a46      	ldr	r2, [pc, #280]	@ (80058e4 <HAL_GPIO_Init+0x18c>)
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	08da      	lsrs	r2, r3, #3
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	3208      	adds	r2, #8
 80057de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	220b      	movs	r2, #11
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	4313      	orrs	r3, r2
 800580c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	08da      	lsrs	r2, r3, #3
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3208      	adds	r2, #8
 8005816:	69f9      	ldr	r1, [r7, #28]
 8005818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	2203      	movs	r2, #3
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	43db      	mvns	r3, r3
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	4013      	ands	r3, r2
 8005832:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	2202      	movs	r2, #2
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	69fa      	ldr	r2, [r7, #28]
 8005840:	4313      	orrs	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e067      	b.n	800591c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d003      	beq.n	800585c <HAL_GPIO_Init+0x104>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b12      	cmp	r3, #18
 800585a:	d145      	bne.n	80058e8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	08da      	lsrs	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3208      	adds	r2, #8
 8005864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005868:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	220f      	movs	r2, #15
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	43db      	mvns	r3, r3
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	4013      	ands	r3, r2
 800587e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	69f9      	ldr	r1, [r7, #28]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	2203      	movs	r2, #3
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43db      	mvns	r3, r3
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	4013      	ands	r3, r2
 80058be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f003 0203 	and.w	r2, r3, #3
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e01e      	b.n	800591c <HAL_GPIO_Init+0x1c4>
 80058de:	bf00      	nop
 80058e0:	46020000 	.word	0x46020000
 80058e4:	0800ef80 	.word	0x0800ef80
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	2203      	movs	r2, #3
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	43db      	mvns	r3, r3
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	4013      	ands	r3, r2
 80058fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0203 	and.w	r2, r3, #3
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d00b      	beq.n	800593c <HAL_GPIO_Init+0x1e4>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d007      	beq.n	800593c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005930:	2b11      	cmp	r3, #17
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b12      	cmp	r3, #18
 800593a:	d130      	bne.n	800599e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	2203      	movs	r2, #3
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	43db      	mvns	r3, r3
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	4013      	ands	r3, r2
 8005952:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	4313      	orrs	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8005972:	2201      	movs	r2, #1
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	4013      	ands	r3, r2
 8005980:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 0201 	and.w	r2, r3, #1
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	fa02 f303 	lsl.w	r3, r2, r3
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b03      	cmp	r3, #3
 80059a4:	d017      	beq.n	80059d6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	2203      	movs	r2, #3
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	43db      	mvns	r3, r3
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	4013      	ands	r3, r2
 80059bc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689a      	ldr	r2, [r3, #8]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	69fa      	ldr	r2, [r7, #28]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d07c      	beq.n	8005adc <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80059e2:	4a47      	ldr	r2, [pc, #284]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	089b      	lsrs	r3, r3, #2
 80059e8:	3318      	adds	r3, #24
 80059ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	220f      	movs	r2, #15
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	0a9a      	lsrs	r2, r3, #10
 8005a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b04 <HAL_GPIO_Init+0x3ac>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	f002 0203 	and.w	r2, r2, #3
 8005a14:	00d2      	lsls	r2, r2, #3
 8005a16:	4093      	lsls	r3, r2
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005a1e:	4938      	ldr	r1, [pc, #224]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	089b      	lsrs	r3, r3, #2
 8005a24:	3318      	adds	r3, #24
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005a2c:	4b34      	ldr	r3, [pc, #208]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	43db      	mvns	r3, r3
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005a50:	4a2b      	ldr	r2, [pc, #172]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005a56:	4b2a      	ldr	r3, [pc, #168]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	43db      	mvns	r3, r3
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	4013      	ands	r3, r2
 8005a64:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005a7a:	4a21      	ldr	r2, [pc, #132]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005a80:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a86:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d003      	beq.n	8005aa6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005aa6:	4a16      	ldr	r2, [pc, #88]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005aae:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	4013      	ands	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <HAL_GPIO_Init+0x3a8>)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f ae3d 	bne.w	800576c <HAL_GPIO_Init+0x14>
  }
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	3724      	adds	r7, #36	@ 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	46022000 	.word	0x46022000
 8005b04:	002f7f7f 	.word	0x002f7f7f

08005b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	807b      	strh	r3, [r7, #2]
 8005b14:	4613      	mov	r3, r2
 8005b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b18:	787b      	ldrb	r3, [r7, #1]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b1e:	887a      	ldrh	r2, [r7, #2]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005b24:	e002      	b.n	8005b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005b26:	887a      	ldrh	r2, [r7, #2]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005b42:	4b0f      	ldr	r3, [pc, #60]	@ (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d006      	beq.n	8005b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005b54:	88fb      	ldrh	r3, [r7, #6]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f814 	bl	8005b84 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005b5c:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	88fb      	ldrh	r3, [r7, #6]
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005b68:	4a05      	ldr	r2, [pc, #20]	@ (8005b80 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb ffcd 	bl	8001b10 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	46022000 	.word	0x46022000

08005b84 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b082      	sub	sp, #8
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e01c      	b.n	8005be6 <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	795b      	ldrb	r3, [r3, #5]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fc f977 	bl	8001ea8 <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	791b      	ldrb	r3, [r3, #4]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_GPU2D_Init+0x32>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e00c      	b.n	8005be6 <HAL_GPU2D_Init+0x4c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b086      	sub	sp, #24
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	33f8      	adds	r3, #248	@ 0xf8
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d013      	beq.n	8005c32 <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	33f8      	adds	r3, #248	@ 0xf8
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0201 	bic.w	r2, r3, #1
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f80f 	bl	8005c50 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 8005c32:	bf00      	nop
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 f80f 	bl	8005c66 <HAL_GPU2D_ErrorCallback>
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8005c6e:	bf00      	nop
 8005c70:	e7fd      	b.n	8005c6e <HAL_GPU2D_ErrorCallback+0x8>

08005c72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e08d      	b.n	8005da0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fc f945 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2224      	movs	r2, #36	@ 0x24
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005cc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d107      	bne.n	8005cec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ce8:	609a      	str	r2, [r3, #8]
 8005cea:	e006      	b.n	8005cfa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cf8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d108      	bne.n	8005d14 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d10:	605a      	str	r2, [r3, #4]
 8005d12:	e007      	b.n	8005d24 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d36:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69d9      	ldr	r1, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d138      	bne.n	8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e032      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	e000      	b.n	8005e32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
  }
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b085      	sub	sp, #20
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d139      	bne.n	8005ec8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e033      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	@ 0x24
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005e90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d002      	beq.n	8005ef6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e007      	b.n	8005f06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8005ef6:	4b07      	ldr	r3, [pc, #28]	@ (8005f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f023 0204 	bic.w	r2, r3, #4
 8005efe:	4905      	ldr	r1, [pc, #20]	@ (8005f14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40030400 	.word	0x40030400

08005f18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005f1c:	4b05      	ldr	r3, [pc, #20]	@ (8005f34 <HAL_ICACHE_Enable+0x1c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a04      	ldr	r2, [pc, #16]	@ (8005f34 <HAL_ICACHE_Enable+0x1c>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40030400 	.word	0x40030400

08005f38 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e0bf      	b.n	80060ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc f952 	bl	8002208 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005f7a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6999      	ldr	r1, [r3, #24]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f90:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6899      	ldr	r1, [r3, #8]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4b4a      	ldr	r3, [pc, #296]	@ (80060d4 <HAL_LTDC_Init+0x19c>)
 8005fac:	400b      	ands	r3, r1
 8005fae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6899      	ldr	r1, [r3, #8]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68d9      	ldr	r1, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80060d4 <HAL_LTDC_Init+0x19c>)
 8005fda:	400b      	ands	r3, r1
 8005fdc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	041b      	lsls	r3, r3, #16
 8005fe4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	68d9      	ldr	r1, [r3, #12]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1a      	ldr	r2, [r3, #32]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6919      	ldr	r1, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	4b33      	ldr	r3, [pc, #204]	@ (80060d4 <HAL_LTDC_Init+0x19c>)
 8006008:	400b      	ands	r3, r1
 800600a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	041b      	lsls	r3, r3, #16
 8006012:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6919      	ldr	r1, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	430a      	orrs	r2, r1
 8006028:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6959      	ldr	r1, [r3, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b27      	ldr	r3, [pc, #156]	@ (80060d4 <HAL_LTDC_Init+0x19c>)
 8006036:	400b      	ands	r3, r1
 8006038:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6959      	ldr	r1, [r3, #20]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	431a      	orrs	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800607a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800608e:	431a      	orrs	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	430a      	orrs	r2, r1
 8006096:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f042 0206 	orr.w	r2, r2, #6
 80060a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	f000f800 	.word	0xf000f800

080060d8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060d8:	b5b0      	push	{r4, r5, r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_LTDC_ConfigLayer+0x1a>
 80060ee:	2302      	movs	r3, #2
 80060f0:	e02c      	b.n	800614c <HAL_LTDC_ConfigLayer+0x74>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2134      	movs	r1, #52	@ 0x34
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	4413      	add	r3, r2
 800610e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f811 	bl	8006154 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bdb0      	pop	{r4, r5, r7, pc}

08006154 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	@ 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006170:	4413      	add	r3, r2
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4413      	add	r3, r2
 8006182:	3384      	adds	r3, #132	@ 0x84
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	6812      	ldr	r2, [r2, #0]
 800618a:	4611      	mov	r1, r2
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	01d2      	lsls	r2, r2, #7
 8006190:	440a      	add	r2, r1
 8006192:	3284      	adds	r2, #132	@ 0x84
 8006194:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006198:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	0c1b      	lsrs	r3, r3, #16
 80061a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061aa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061ac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	01db      	lsls	r3, r3, #7
 80061b8:	440b      	add	r3, r1
 80061ba:	3384      	adds	r3, #132	@ 0x84
 80061bc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061c2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061d2:	4413      	add	r3, r2
 80061d4:	041b      	lsls	r3, r3, #16
 80061d6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	01db      	lsls	r3, r3, #7
 80061e2:	4413      	add	r3, r2
 80061e4:	3384      	adds	r3, #132	@ 0x84
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	4611      	mov	r1, r2
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	01d2      	lsls	r2, r2, #7
 80061f2:	440a      	add	r2, r1
 80061f4:	3284      	adds	r2, #132	@ 0x84
 80061f6:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80061fa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800620a:	4413      	add	r3, r2
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	440b      	add	r3, r1
 800621a:	3384      	adds	r3, #132	@ 0x84
 800621c:	4619      	mov	r1, r3
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	4413      	add	r3, r2
 8006230:	3384      	adds	r3, #132	@ 0x84
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	4611      	mov	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	01d2      	lsls	r2, r2, #7
 800623e:	440a      	add	r2, r1
 8006240:	3284      	adds	r2, #132	@ 0x84
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	4413      	add	r3, r2
 8006254:	3384      	adds	r3, #132	@ 0x84
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006280:	461a      	mov	r2, r3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	431a      	orrs	r2, r3
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	431a      	orrs	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4619      	mov	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	01db      	lsls	r3, r3, #7
 8006294:	440b      	add	r3, r1
 8006296:	3384      	adds	r3, #132	@ 0x84
 8006298:	4619      	mov	r1, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4313      	orrs	r3, r2
 800629e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	01db      	lsls	r3, r3, #7
 80062aa:	4413      	add	r3, r2
 80062ac:	3384      	adds	r3, #132	@ 0x84
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	6812      	ldr	r2, [r2, #0]
 80062b4:	4611      	mov	r1, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	01d2      	lsls	r2, r2, #7
 80062ba:	440a      	add	r2, r1
 80062bc:	3284      	adds	r2, #132	@ 0x84
 80062be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	01db      	lsls	r3, r3, #7
 80062ce:	4413      	add	r3, r2
 80062d0:	3384      	adds	r3, #132	@ 0x84
 80062d2:	461a      	mov	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	01db      	lsls	r3, r3, #7
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	@ 0x84
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	6812      	ldr	r2, [r2, #0]
 80062ee:	4611      	mov	r1, r2
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	01d2      	lsls	r2, r2, #7
 80062f4:	440a      	add	r2, r1
 80062f6:	3284      	adds	r2, #132	@ 0x84
 80062f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80062fc:	f023 0307 	bic.w	r3, r3, #7
 8006300:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	68f9      	ldr	r1, [r7, #12]
 800630c:	6809      	ldr	r1, [r1, #0]
 800630e:	4608      	mov	r0, r1
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	01c9      	lsls	r1, r1, #7
 8006314:	4401      	add	r1, r0
 8006316:	3184      	adds	r1, #132	@ 0x84
 8006318:	4313      	orrs	r3, r2
 800631a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	01db      	lsls	r3, r3, #7
 8006326:	4413      	add	r3, r2
 8006328:	3384      	adds	r3, #132	@ 0x84
 800632a:	461a      	mov	r2, r3
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006330:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 800633a:	2304      	movs	r3, #4
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	e01b      	b.n	8006378 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8006348:	2303      	movs	r3, #3
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e014      	b.n	8006378 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b04      	cmp	r3, #4
 8006354:	d00b      	beq.n	800636e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800635a:	2b02      	cmp	r3, #2
 800635c:	d007      	beq.n	800636e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006362:	2b03      	cmp	r3, #3
 8006364:	d003      	beq.n	800636e <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800636a:	2b07      	cmp	r3, #7
 800636c:	d102      	bne.n	8006374 <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 800636e:	2302      	movs	r3, #2
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e001      	b.n	8006378 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8006374:	2301      	movs	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	01db      	lsls	r3, r3, #7
 8006382:	4413      	add	r3, r2
 8006384:	3384      	adds	r3, #132	@ 0x84
 8006386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	6812      	ldr	r2, [r2, #0]
 800638c:	4611      	mov	r1, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	01d2      	lsls	r2, r2, #7
 8006392:	440a      	add	r2, r1
 8006394:	3284      	adds	r2, #132	@ 0x84
 8006396:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6859      	ldr	r1, [r3, #4]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	1acb      	subs	r3, r1, r3
 80063b2:	69f9      	ldr	r1, [r7, #28]
 80063b4:	fb01 f303 	mul.w	r3, r1, r3
 80063b8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80063ba:	68f9      	ldr	r1, [r7, #12]
 80063bc:	6809      	ldr	r1, [r1, #0]
 80063be:	4608      	mov	r0, r1
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	01c9      	lsls	r1, r1, #7
 80063c4:	4401      	add	r1, r0
 80063c6:	3184      	adds	r1, #132	@ 0x84
 80063c8:	4313      	orrs	r3, r2
 80063ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	01db      	lsls	r3, r3, #7
 80063d6:	4413      	add	r3, r2
 80063d8:	3384      	adds	r3, #132	@ 0x84
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	4611      	mov	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	01d2      	lsls	r2, r2, #7
 80063e6:	440a      	add	r2, r1
 80063e8:	3284      	adds	r2, #132	@ 0x84
 80063ea:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	01db      	lsls	r3, r3, #7
 80063fe:	4413      	add	r3, r2
 8006400:	3384      	adds	r3, #132	@ 0x84
 8006402:	461a      	mov	r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	01db      	lsls	r3, r3, #7
 8006414:	4413      	add	r3, r2
 8006416:	3384      	adds	r3, #132	@ 0x84
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	6812      	ldr	r2, [r2, #0]
 800641e:	4611      	mov	r1, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	01d2      	lsls	r2, r2, #7
 8006424:	440a      	add	r2, r1
 8006426:	3284      	adds	r2, #132	@ 0x84
 8006428:	f043 0301 	orr.w	r3, r3, #1
 800642c:	6013      	str	r3, [r2, #0]
}
 800642e:	bf00      	nop
 8006430:	3724      	adds	r7, #36	@ 0x24
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f043 0201 	orr.w	r2, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006468:	f7fc ff20 	bl	80032ac <HAL_GetTick>
 800646c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e0a5      	b.n	80065c6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 809e 	bne.w	80065c6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fb ffaa 	bl	80023e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006490:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f912 	bl	80066be <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	4b4b      	ldr	r3, [pc, #300]	@ (80065d0 <HAL_OSPI_Init+0x174>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68d1      	ldr	r1, [r2, #12]
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6912      	ldr	r2, [r2, #16]
 80064ac:	3a01      	subs	r2, #1
 80064ae:	0412      	lsls	r2, r2, #16
 80064b0:	4311      	orrs	r1, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6952      	ldr	r2, [r2, #20]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	0212      	lsls	r2, r2, #8
 80064ba:	4311      	orrs	r1, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064c0:	4311      	orrs	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	69d2      	ldr	r2, [r2, #28]
 80064c6:	4311      	orrs	r1, r2
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	430b      	orrs	r3, r1
 80064ce:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006500:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	3b01      	subs	r3, #1
 8006512:	021a      	lsls	r2, r3, #8
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	430a      	orrs	r2, r1
 800651a:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2200      	movs	r2, #0
 8006526:	2120      	movs	r1, #32
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fdcd 	bl	80070c8 <OSPI_WaitFlagStateUntilTimeout>
 800652e:	4603      	mov	r3, r0
 8006530:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006532:	7bfb      	ldrb	r3, [r7, #15]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d146      	bne.n	80065c6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800656e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	430a      	orrs	r2, r1
 8006582:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b02      	cmp	r3, #2
 800659c:	d107      	bne.n	80065ae <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0202 	orr.w	r2, r2, #2
 80065ac:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065b6:	d103      	bne.n	80065c0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80065be:	e002      	b.n	80065c6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	f8e0c0f4 	.word	0xf8e0c0f4

080065d4 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af02      	add	r7, sp, #8
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80065e0:	f7fc fe64 	bl	80032ac <HAL_GetTick>
 80065e4:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ea:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d104      	bne.n	8006600 <HAL_OSPI_Abort+0x2c>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d052      	beq.n	80066a6 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d014      	beq.n	8006638 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0204 	bic.w	r2, r2, #4
 800661c:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fe55 	bl	80052d2 <HAL_DMA_Abort>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02b      	beq.n	800669e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0202 	orr.w	r2, r2, #2
 8006654:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	2201      	movs	r2, #1
 8006660:	2102      	movs	r1, #2
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fd30 	bl	80070c8 <OSPI_WaitFlagStateUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800666c:	7dfb      	ldrb	r3, [r7, #23]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d11f      	bne.n	80066b2 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	2200      	movs	r2, #0
 8006684:	2120      	movs	r1, #32
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fd1e 	bl	80070c8 <OSPI_WaitFlagStateUntilTimeout>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800669c:	e009      	b.n	80066b2 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2202      	movs	r2, #2
 80066a2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80066a4:	e005      	b.n	80066b2 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2210      	movs	r2, #16
 80066ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80066b0:	e000      	b.n	80066b4 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80066b2:	bf00      	nop
  }

  /* Return function status */
  return status;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b094      	sub	sp, #80	@ 0x50
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a9d      	ldr	r2, [pc, #628]	@ (8006970 <HAL_OSPIM_Config+0x294>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d105      	bne.n	800670a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80066fe:	2300      	movs	r3, #0
 8006700:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006708:	e004      	b.n	8006714 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800670a:	2301      	movs	r3, #1
 800670c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006714:	2300      	movs	r3, #0
 8006716:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800671a:	e01d      	b.n	8006758 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 800671c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006720:	3301      	adds	r3, #1
 8006722:	b2d8      	uxtb	r0, r3
 8006724:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006728:	f107 0114 	add.w	r1, r7, #20
 800672c:	4613      	mov	r3, r2
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	4413      	add	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	440b      	add	r3, r1
 8006736:	4619      	mov	r1, r3
 8006738:	f000 fd06 	bl	8007148 <OSPIM_GetConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2208      	movs	r2, #8
 800674c:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800674e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006752:	3301      	adds	r3, #1
 8006754:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006758:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800675c:	2b01      	cmp	r3, #1
 800675e:	d9dd      	bls.n	800671c <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006760:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006764:	2b00      	cmp	r3, #0
 8006766:	f040 84a2 	bne.w	80070ae <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800676a:	4b81      	ldr	r3, [pc, #516]	@ (8006970 <HAL_OSPIM_Config+0x294>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00b      	beq.n	800678e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006776:	4b7e      	ldr	r3, [pc, #504]	@ (8006970 <HAL_OSPIM_Config+0x294>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a7d      	ldr	r2, [pc, #500]	@ (8006970 <HAL_OSPIM_Config+0x294>)
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006782:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800678e:	4b79      	ldr	r3, [pc, #484]	@ (8006974 <HAL_OSPIM_Config+0x298>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00b      	beq.n	80067b2 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800679a:	4b76      	ldr	r3, [pc, #472]	@ (8006974 <HAL_OSPIM_Config+0x298>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a75      	ldr	r2, [pc, #468]	@ (8006974 <HAL_OSPIM_Config+0x298>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80067a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80067aa:	f043 0302 	orr.w	r3, r3, #2
 80067ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80067b2:	4971      	ldr	r1, [pc, #452]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80067b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	3350      	adds	r3, #80	@ 0x50
 80067c0:	443b      	add	r3, r7
 80067c2:	3b34      	subs	r3, #52	@ 0x34
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	6859      	ldr	r1, [r3, #4]
 80067ce:	486a      	ldr	r0, [pc, #424]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80067d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	00db      	lsls	r3, r3, #3
 80067da:	3350      	adds	r3, #80	@ 0x50
 80067dc:	443b      	add	r3, r7
 80067de:	3b34      	subs	r3, #52	@ 0x34
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4403      	add	r3, r0
 80067ec:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80067ee:	4b62      	ldr	r3, [pc, #392]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 80c0 	beq.w	800697c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80067fc:	4b5e      	ldr	r3, [pc, #376]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a5d      	ldr	r2, [pc, #372]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006808:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800680c:	2b01      	cmp	r3, #1
 800680e:	f040 8162 	bne.w	8006ad6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006812:	4959      	ldr	r1, [pc, #356]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 8006814:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006818:	4613      	mov	r3, r2
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4413      	add	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	3350      	adds	r3, #80	@ 0x50
 8006822:	443b      	add	r3, r7
 8006824:	3b3c      	subs	r3, #60	@ 0x3c
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3b01      	subs	r3, #1
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	440b      	add	r3, r1
 800682e:	6859      	ldr	r1, [r3, #4]
 8006830:	4851      	ldr	r0, [pc, #324]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 8006832:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006836:	4613      	mov	r3, r2
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	4413      	add	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	3350      	adds	r3, #80	@ 0x50
 8006840:	443b      	add	r3, r7
 8006842:	3b3c      	subs	r3, #60	@ 0x3c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3b01      	subs	r3, #1
 8006848:	f041 0202 	orr.w	r2, r1, #2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4403      	add	r3, r0
 8006850:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006852:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006856:	4613      	mov	r3, r2
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	4413      	add	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	3350      	adds	r3, #80	@ 0x50
 8006860:	443b      	add	r3, r7
 8006862:	3b38      	subs	r3, #56	@ 0x38
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01f      	beq.n	80068aa <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800686a:	4943      	ldr	r1, [pc, #268]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 800686c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006870:	4613      	mov	r3, r2
 8006872:	005b      	lsls	r3, r3, #1
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	3350      	adds	r3, #80	@ 0x50
 800687a:	443b      	add	r3, r7
 800687c:	3b38      	subs	r3, #56	@ 0x38
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3b01      	subs	r3, #1
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	6859      	ldr	r1, [r3, #4]
 8006888:	483b      	ldr	r0, [pc, #236]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 800688a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	3350      	adds	r3, #80	@ 0x50
 8006898:	443b      	add	r3, r7
 800689a:	3b38      	subs	r3, #56	@ 0x38
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3b01      	subs	r3, #1
 80068a0:	f041 0220 	orr.w	r2, r1, #32
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4403      	add	r3, r0
 80068a8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80068aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80068ae:	4613      	mov	r3, r2
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	4413      	add	r3, r2
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	3350      	adds	r3, #80	@ 0x50
 80068b8:	443b      	add	r3, r7
 80068ba:	3b30      	subs	r3, #48	@ 0x30
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d023      	beq.n	800690a <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80068c2:	492d      	ldr	r1, [pc, #180]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80068c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80068c8:	4613      	mov	r3, r2
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	4413      	add	r3, r2
 80068ce:	00db      	lsls	r3, r3, #3
 80068d0:	3350      	adds	r3, #80	@ 0x50
 80068d2:	443b      	add	r3, r7
 80068d4:	3b30      	subs	r3, #48	@ 0x30
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3b01      	subs	r3, #1
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	6859      	ldr	r1, [r3, #4]
 80068e4:	4824      	ldr	r0, [pc, #144]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 80068e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	3350      	adds	r3, #80	@ 0x50
 80068f4:	443b      	add	r3, r7
 80068f6:	3b30      	subs	r3, #48	@ 0x30
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	f003 0301 	and.w	r3, r3, #1
 8006900:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4403      	add	r3, r0
 8006908:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800690a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	3350      	adds	r3, #80	@ 0x50
 8006918:	443b      	add	r3, r7
 800691a:	3b2c      	subs	r3, #44	@ 0x2c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80d9 	beq.w	8006ad6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006924:	4914      	ldr	r1, [pc, #80]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 8006926:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800692a:	4613      	mov	r3, r2
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	3350      	adds	r3, #80	@ 0x50
 8006934:	443b      	add	r3, r7
 8006936:	3b2c      	subs	r3, #44	@ 0x2c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3b01      	subs	r3, #1
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	6859      	ldr	r1, [r3, #4]
 8006946:	480c      	ldr	r0, [pc, #48]	@ (8006978 <HAL_OSPIM_Config+0x29c>)
 8006948:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800694c:	4613      	mov	r3, r2
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	4413      	add	r3, r2
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3350      	adds	r3, #80	@ 0x50
 8006956:	443b      	add	r3, r7
 8006958:	3b2c      	subs	r3, #44	@ 0x2c
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3b01      	subs	r3, #1
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4403      	add	r3, r0
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	e0b3      	b.n	8006ad6 <HAL_OSPIM_Config+0x3fa>
 800696e:	bf00      	nop
 8006970:	420d1400 	.word	0x420d1400
 8006974:	420d2400 	.word	0x420d2400
 8006978:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800697c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800697e:	4613      	mov	r3, r2
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	4413      	add	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	3350      	adds	r3, #80	@ 0x50
 8006988:	443b      	add	r3, r7
 800698a:	3b3c      	subs	r3, #60	@ 0x3c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80a1 	beq.w	8006ad6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006994:	4995      	ldr	r1, [pc, #596]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006998:	4613      	mov	r3, r2
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	4413      	add	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	3350      	adds	r3, #80	@ 0x50
 80069a2:	443b      	add	r3, r7
 80069a4:	3b3c      	subs	r3, #60	@ 0x3c
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	6859      	ldr	r1, [r3, #4]
 80069b0:	488e      	ldr	r0, [pc, #568]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 80069b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069b4:	4613      	mov	r3, r2
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	4413      	add	r3, r2
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	3350      	adds	r3, #80	@ 0x50
 80069be:	443b      	add	r3, r7
 80069c0:	3b3c      	subs	r3, #60	@ 0x3c
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	f021 0201 	bic.w	r2, r1, #1
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4403      	add	r3, r0
 80069ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80069d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	3350      	adds	r3, #80	@ 0x50
 80069dc:	443b      	add	r3, r7
 80069de:	3b38      	subs	r3, #56	@ 0x38
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d01d      	beq.n	8006a22 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80069e6:	4981      	ldr	r1, [pc, #516]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 80069e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ea:	4613      	mov	r3, r2
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	4413      	add	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	3350      	adds	r3, #80	@ 0x50
 80069f4:	443b      	add	r3, r7
 80069f6:	3b38      	subs	r3, #56	@ 0x38
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3b01      	subs	r3, #1
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	6859      	ldr	r1, [r3, #4]
 8006a02:	487a      	ldr	r0, [pc, #488]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006a04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a06:	4613      	mov	r3, r2
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	3350      	adds	r3, #80	@ 0x50
 8006a10:	443b      	add	r3, r7
 8006a12:	3b38      	subs	r3, #56	@ 0x38
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	f021 0210 	bic.w	r2, r1, #16
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4403      	add	r3, r0
 8006a20:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006a22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	3350      	adds	r3, #80	@ 0x50
 8006a2e:	443b      	add	r3, r7
 8006a30:	3b30      	subs	r3, #48	@ 0x30
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d021      	beq.n	8006a7c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006a38:	496c      	ldr	r1, [pc, #432]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006a3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	4413      	add	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	3350      	adds	r3, #80	@ 0x50
 8006a46:	443b      	add	r3, r7
 8006a48:	3b30      	subs	r3, #48	@ 0x30
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	6859      	ldr	r1, [r3, #4]
 8006a58:	4864      	ldr	r0, [pc, #400]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	3350      	adds	r3, #80	@ 0x50
 8006a66:	443b      	add	r3, r7
 8006a68:	3b30      	subs	r3, #48	@ 0x30
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	4403      	add	r3, r0
 8006a7a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a7e:	4613      	mov	r3, r2
 8006a80:	005b      	lsls	r3, r3, #1
 8006a82:	4413      	add	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	3350      	adds	r3, #80	@ 0x50
 8006a88:	443b      	add	r3, r7
 8006a8a:	3b2c      	subs	r3, #44	@ 0x2c
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d021      	beq.n	8006ad6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006a92:	4956      	ldr	r1, [pc, #344]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006a94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a96:	4613      	mov	r3, r2
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	3350      	adds	r3, #80	@ 0x50
 8006aa0:	443b      	add	r3, r7
 8006aa2:	3b2c      	subs	r3, #44	@ 0x2c
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	6859      	ldr	r1, [r3, #4]
 8006ab2:	484e      	ldr	r0, [pc, #312]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	4413      	add	r3, r2
 8006abc:	00db      	lsls	r3, r3, #3
 8006abe:	3350      	adds	r3, #80	@ 0x50
 8006ac0:	443b      	add	r3, r7
 8006ac2:	3b2c      	subs	r3, #44	@ 0x2c
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4403      	add	r3, r0
 8006ad4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	3350      	adds	r3, #80	@ 0x50
 8006ae8:	443b      	add	r3, r7
 8006aea:	3b3c      	subs	r3, #60	@ 0x3c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4299      	cmp	r1, r3
 8006af0:	d03c      	beq.n	8006b6c <HAL_OSPIM_Config+0x490>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6899      	ldr	r1, [r3, #8]
 8006af6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006afa:	4613      	mov	r3, r2
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	4413      	add	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	3350      	adds	r3, #80	@ 0x50
 8006b04:	443b      	add	r3, r7
 8006b06:	3b34      	subs	r3, #52	@ 0x34
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4299      	cmp	r1, r3
 8006b0c:	d02e      	beq.n	8006b6c <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6859      	ldr	r1, [r3, #4]
 8006b12:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b16:	4613      	mov	r3, r2
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	4413      	add	r3, r2
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	3350      	adds	r3, #80	@ 0x50
 8006b20:	443b      	add	r3, r7
 8006b22:	3b38      	subs	r3, #56	@ 0x38
 8006b24:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 8006b26:	4299      	cmp	r1, r3
 8006b28:	d103      	bne.n	8006b32 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d11c      	bne.n	8006b6c <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	68d9      	ldr	r1, [r3, #12]
 8006b36:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	3350      	adds	r3, #80	@ 0x50
 8006b44:	443b      	add	r3, r7
 8006b46:	3b30      	subs	r3, #48	@ 0x30
 8006b48:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	d00e      	beq.n	8006b6c <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6919      	ldr	r1, [r3, #16]
 8006b52:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b56:	4613      	mov	r3, r2
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	3350      	adds	r3, #80	@ 0x50
 8006b60:	443b      	add	r3, r7
 8006b62:	3b2c      	subs	r3, #44	@ 0x2c
 8006b64:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006b66:	4299      	cmp	r1, r3
 8006b68:	f040 810e 	bne.w	8006d88 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	3350      	adds	r3, #80	@ 0x50
 8006b7e:	443b      	add	r3, r7
 8006b80:	3b3c      	subs	r3, #60	@ 0x3c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	d133      	bne.n	8006bf0 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	6859      	ldr	r1, [r3, #4]
 8006b8c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006b90:	4613      	mov	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	4413      	add	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	3350      	adds	r3, #80	@ 0x50
 8006b9a:	443b      	add	r3, r7
 8006b9c:	3b38      	subs	r3, #56	@ 0x38
 8006b9e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	d125      	bne.n	8006bf0 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	68d9      	ldr	r1, [r3, #12]
 8006ba8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006bac:	4613      	mov	r3, r2
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	4413      	add	r3, r2
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	3350      	adds	r3, #80	@ 0x50
 8006bb6:	443b      	add	r3, r7
 8006bb8:	3b30      	subs	r3, #48	@ 0x30
 8006bba:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006bbc:	4299      	cmp	r1, r3
 8006bbe:	d117      	bne.n	8006bf0 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	6919      	ldr	r1, [r3, #16]
 8006bc4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006bc8:	4613      	mov	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4413      	add	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	3350      	adds	r3, #80	@ 0x50
 8006bd2:	443b      	add	r3, r7
 8006bd4:	3b2c      	subs	r3, #44	@ 0x2c
 8006bd6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d109      	bne.n	8006bf0 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006bdc:	4b03      	ldr	r3, [pc, #12]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a02      	ldr	r2, [pc, #8]	@ (8006bec <HAL_OSPIM_Config+0x510>)
 8006be2:	f043 0301 	orr.w	r3, r3, #1
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	e0ce      	b.n	8006d88 <HAL_OSPIM_Config+0x6ac>
 8006bea:	bf00      	nop
 8006bec:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006bf0:	49a4      	ldr	r1, [pc, #656]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006bf2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	3350      	adds	r3, #80	@ 0x50
 8006c00:	443b      	add	r3, r7
 8006c02:	3b3c      	subs	r3, #60	@ 0x3c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	6859      	ldr	r1, [r3, #4]
 8006c0e:	489d      	ldr	r0, [pc, #628]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006c10:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006c14:	4613      	mov	r3, r2
 8006c16:	005b      	lsls	r3, r3, #1
 8006c18:	4413      	add	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	3350      	adds	r3, #80	@ 0x50
 8006c1e:	443b      	add	r3, r7
 8006c20:	3b3c      	subs	r3, #60	@ 0x3c
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3b01      	subs	r3, #1
 8006c26:	f021 0201 	bic.w	r2, r1, #1
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4403      	add	r3, r0
 8006c2e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006c30:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006c34:	4613      	mov	r3, r2
 8006c36:	005b      	lsls	r3, r3, #1
 8006c38:	4413      	add	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	3350      	adds	r3, #80	@ 0x50
 8006c3e:	443b      	add	r3, r7
 8006c40:	3b38      	subs	r3, #56	@ 0x38
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01f      	beq.n	8006c88 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006c48:	498e      	ldr	r1, [pc, #568]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006c4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006c4e:	4613      	mov	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4413      	add	r3, r2
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	3350      	adds	r3, #80	@ 0x50
 8006c58:	443b      	add	r3, r7
 8006c5a:	3b38      	subs	r3, #56	@ 0x38
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	440b      	add	r3, r1
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	4887      	ldr	r0, [pc, #540]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006c68:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	3350      	adds	r3, #80	@ 0x50
 8006c76:	443b      	add	r3, r7
 8006c78:	3b38      	subs	r3, #56	@ 0x38
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	f021 0210 	bic.w	r2, r1, #16
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4403      	add	r3, r0
 8006c86:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006c88:	497e      	ldr	r1, [pc, #504]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006c8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006c8e:	4613      	mov	r3, r2
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	4413      	add	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	3350      	adds	r3, #80	@ 0x50
 8006c98:	443b      	add	r3, r7
 8006c9a:	3b34      	subs	r3, #52	@ 0x34
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	6859      	ldr	r1, [r3, #4]
 8006ca6:	4877      	ldr	r0, [pc, #476]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006ca8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006cac:	4613      	mov	r3, r2
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	4413      	add	r3, r2
 8006cb2:	00db      	lsls	r3, r3, #3
 8006cb4:	3350      	adds	r3, #80	@ 0x50
 8006cb6:	443b      	add	r3, r7
 8006cb8:	3b34      	subs	r3, #52	@ 0x34
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4403      	add	r3, r0
 8006cc6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006cc8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ccc:	4613      	mov	r3, r2
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	4413      	add	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3350      	adds	r3, #80	@ 0x50
 8006cd6:	443b      	add	r3, r7
 8006cd8:	3b30      	subs	r3, #48	@ 0x30
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d023      	beq.n	8006d28 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006ce0:	4968      	ldr	r1, [pc, #416]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006ce2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	3350      	adds	r3, #80	@ 0x50
 8006cf0:	443b      	add	r3, r7
 8006cf2:	3b30      	subs	r3, #48	@ 0x30
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	440b      	add	r3, r1
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	4860      	ldr	r0, [pc, #384]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006d04:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d08:	4613      	mov	r3, r2
 8006d0a:	005b      	lsls	r3, r3, #1
 8006d0c:	4413      	add	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	3350      	adds	r3, #80	@ 0x50
 8006d12:	443b      	add	r3, r7
 8006d14:	3b30      	subs	r3, #48	@ 0x30
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4403      	add	r3, r0
 8006d26:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006d28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	3350      	adds	r3, #80	@ 0x50
 8006d36:	443b      	add	r3, r7
 8006d38:	3b2c      	subs	r3, #44	@ 0x2c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d023      	beq.n	8006d88 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006d40:	4950      	ldr	r1, [pc, #320]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006d42:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d46:	4613      	mov	r3, r2
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	3350      	adds	r3, #80	@ 0x50
 8006d50:	443b      	add	r3, r7
 8006d52:	3b2c      	subs	r3, #44	@ 0x2c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	440b      	add	r3, r1
 8006d60:	6859      	ldr	r1, [r3, #4]
 8006d62:	4848      	ldr	r0, [pc, #288]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006d64:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d68:	4613      	mov	r3, r2
 8006d6a:	005b      	lsls	r3, r3, #1
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	3350      	adds	r3, #80	@ 0x50
 8006d72:	443b      	add	r3, r7
 8006d74:	3b2c      	subs	r3, #44	@ 0x2c
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4403      	add	r3, r0
 8006d86:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006d88:	4a3e      	ldr	r2, [pc, #248]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d9c:	025b      	lsls	r3, r3, #9
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	4938      	ldr	r1, [pc, #224]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d018      	beq.n	8006dec <HAL_OSPIM_Config+0x710>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006dc2:	d813      	bhi.n	8006dec <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	1e5a      	subs	r2, r3, #1
 8006dca:	4b2e      	ldr	r3, [pc, #184]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d90a      	bls.n	8006dec <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	041b      	lsls	r3, r3, #16
 8006de6:	4927      	ldr	r1, [pc, #156]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006de8:	4313      	orrs	r3, r2
 8006dea:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006dec:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0301 	and.w	r3, r3, #1
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 809a 	beq.w	8006f2e <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006dfa:	4a22      	ldr	r2, [pc, #136]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f023 0203 	bic.w	r2, r3, #3
 8006e0c:	491d      	ldr	r1, [pc, #116]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3b01      	subs	r3, #1
 8006e14:	f042 0201 	orr.w	r2, r2, #1
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d011      	beq.n	8006e4a <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006e26:	4a17      	ldr	r2, [pc, #92]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e38:	4912      	ldr	r1, [pc, #72]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	f042 0210 	orr.w	r2, r2, #16
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e56:	4a0b      	ldr	r2, [pc, #44]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	4413      	add	r3, r2
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006e6c:	4905      	ldr	r1, [pc, #20]	@ (8006e84 <HAL_OSPIM_Config+0x7a8>)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	e01b      	b.n	8006ebc <HAL_OSPIM_Config+0x7e0>
 8006e84:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006e90:	4a8a      	ldr	r2, [pc, #552]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006ea6:	4985      	ldr	r1, [pc, #532]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	440b      	add	r3, r1
 8006eba:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d016      	beq.n	8006ef6 <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006ede:	4977      	ldr	r1, [pc, #476]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	e0c3      	b.n	800707e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 80bf 	beq.w	800707e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f00:	4a6e      	ldr	r2, [pc, #440]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006f16:	4969      	ldr	r1, [pc, #420]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	605a      	str	r2, [r3, #4]
 8006f2c:	e0a7      	b.n	800707e <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006f2e:	4a63      	ldr	r2, [pc, #396]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f023 0203 	bic.w	r2, r3, #3
 8006f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f42:	005b      	lsls	r3, r3, #1
 8006f44:	431a      	orrs	r2, r3
 8006f46:	495d      	ldr	r1, [pc, #372]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d014      	beq.n	8006f8a <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006f60:	4a56      	ldr	r2, [pc, #344]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f74:	015b      	lsls	r3, r3, #5
 8006f76:	431a      	orrs	r2, r3
 8006f78:	4950      	ldr	r1, [pc, #320]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	f042 0210 	orr.w	r2, r2, #16
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d019      	beq.n	8006fca <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006f96:	4a49      	ldr	r2, [pc, #292]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fae:	049b      	lsls	r3, r3, #18
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	4942      	ldr	r1, [pc, #264]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	605a      	str	r2, [r3, #4]
 8006fc8:	e01c      	b.n	8007004 <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d018      	beq.n	8007004 <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8006fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fea:	069b      	lsls	r3, r3, #26
 8006fec:	431a      	orrs	r2, r3
 8006fee:	4933      	ldr	r1, [pc, #204]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d019      	beq.n	8007044 <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007010:	4a2a      	ldr	r2, [pc, #168]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	3b01      	subs	r3, #1
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007028:	049b      	lsls	r3, r3, #18
 800702a:	431a      	orrs	r2, r3
 800702c:	4923      	ldr	r1, [pc, #140]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	3b01      	subs	r3, #1
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	440b      	add	r3, r1
 8007040:	605a      	str	r2, [r3, #4]
 8007042:	e01c      	b.n	800707e <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d018      	beq.n	800707e <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800704c:	4a1b      	ldr	r2, [pc, #108]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	3b01      	subs	r3, #1
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007064:	069b      	lsls	r3, r3, #26
 8007066:	431a      	orrs	r2, r3
 8007068:	4914      	ldr	r1, [pc, #80]	@ (80070bc <HAL_OSPIM_Config+0x9e0>)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	3b01      	subs	r3, #1
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800707e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800708a:	4b0d      	ldr	r3, [pc, #52]	@ (80070c0 <HAL_OSPIM_Config+0x9e4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a0c      	ldr	r2, [pc, #48]	@ (80070c0 <HAL_OSPIM_Config+0x9e4>)
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007096:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d005      	beq.n	80070ae <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80070a2:	4b08      	ldr	r3, [pc, #32]	@ (80070c4 <HAL_OSPIM_Config+0x9e8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a07      	ldr	r2, [pc, #28]	@ (80070c4 <HAL_OSPIM_Config+0x9e8>)
 80070a8:	f043 0301 	orr.w	r3, r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80070ae:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3750      	adds	r7, #80	@ 0x50
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	420c4000 	.word	0x420c4000
 80070c0:	420d1400 	.word	0x420d1400
 80070c4:	420d2400 	.word	0x420d2400

080070c8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	603b      	str	r3, [r7, #0]
 80070d4:	4613      	mov	r3, r2
 80070d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80070d8:	e022      	b.n	8007120 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e0:	d01e      	beq.n	8007120 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070e2:	f7fc f8e3 	bl	80032ac <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d302      	bcc.n	80070f8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d113      	bne.n	8007120 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6a1a      	ldr	r2, [r3, #32]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	401a      	ands	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d00b      	beq.n	8007120 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800710e:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e00e      	b.n	800713e <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a1a      	ldr	r2, [r3, #32]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	4013      	ands	r3, r2
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf14      	ite	ne
 800712e:	2301      	movne	r3, #1
 8007130:	2300      	moveq	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	429a      	cmp	r2, r3
 800713a:	d1ce      	bne.n	80070da <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8007154:	2300      	movs	r3, #0
 8007156:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <OSPIM_GetConfig+0x26>
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d802      	bhi.n	800716e <OSPIM_GetConfig+0x26>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	75fb      	strb	r3, [r7, #23]
 8007172:	e098      	b.n	80072a6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2200      	movs	r2, #0
 8007184:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2200      	movs	r2, #0
 800718a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d10b      	bne.n	80071b0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007198:	4b46      	ldr	r3, [pc, #280]	@ (80072b4 <OSPIM_GetConfig+0x16c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80071a4:	4b44      	ldr	r3, [pc, #272]	@ (80072b8 <OSPIM_GetConfig+0x170>)
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	e002      	b.n	80071b0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80071aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071ae:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e074      	b.n	80072a0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80071b6:	4a3f      	ldr	r2, [pc, #252]	@ (80072b4 <OSPIM_GetConfig+0x16c>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	4413      	add	r3, r2
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	4053      	eors	r3, r2
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d00a      	beq.n	8007202 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4053      	eors	r3, r2
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d103      	bne.n	8007202 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	4053      	eors	r3, r2
 8007212:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d018      	beq.n	800725e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	4053      	eors	r3, r2
 8007232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d111      	bne.n	800725e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	60da      	str	r2, [r3, #12]
 8007250:	e005      	b.n	800725e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d018      	beq.n	800729a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4053      	eors	r3, r2
 800726e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d111      	bne.n	800729a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	611a      	str	r2, [r3, #16]
 800728c:	e005      	b.n	800729a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3301      	adds	r3, #1
 8007292:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3301      	adds	r3, #1
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d987      	bls.n	80071b6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	420c4000 	.word	0x420c4000
 80072b8:	04040222 	.word	0x04040222

080072bc <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0202 	orr.w	r2, r2, #2
 80072d8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2208      	movs	r2, #8
 80072de:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a15      	ldr	r2, [pc, #84]	@ (800733c <HAL_OSPI_DLYB_SetConfig+0x80>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d109      	bne.n	80072fe <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80072ea:	4815      	ldr	r0, [pc, #84]	@ (8007340 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80072ec:	f7ff f8a5 	bl	800643a <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	4813      	ldr	r0, [pc, #76]	@ (8007340 <HAL_OSPI_DLYB_SetConfig+0x84>)
 80072f4:	f007 fdc0 	bl	800ee78 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	e00d      	b.n	800731a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a10      	ldr	r2, [pc, #64]	@ (8007344 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d108      	bne.n	800731a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007308:	480f      	ldr	r0, [pc, #60]	@ (8007348 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800730a:	f7ff f896 	bl	800643a <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	480d      	ldr	r0, [pc, #52]	@ (8007348 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007312:	f007 fdb1 	bl	800ee78 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff f95a 	bl	80065d4 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0202 	bic.w	r2, r2, #2
 800732e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	420d1400 	.word	0x420d1400
 8007340:	420cf000 	.word	0x420cf000
 8007344:	420d2400 	.word	0x420d2400
 8007348:	420cf400 	.word	0x420cf400

0800734c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007350:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	4a04      	ldr	r2, [pc, #16]	@ (8007368 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	46020800 	.word	0x46020800

0800736c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007374:	4b39      	ldr	r3, [pc, #228]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800737c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d10b      	bne.n	800739e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800738c:	d905      	bls.n	800739a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800738e:	4b33      	ldr	r3, [pc, #204]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	4a32      	ldr	r2, [pc, #200]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007398:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e057      	b.n	800744e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073a4:	d90a      	bls.n	80073bc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80073a6:	4b2d      	ldr	r3, [pc, #180]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	4a2a      	ldr	r2, [pc, #168]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073b8:	60d3      	str	r3, [r2, #12]
 80073ba:	e007      	b.n	80073cc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80073bc:	4b27      	ldr	r3, [pc, #156]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80073c4:	4925      	ldr	r1, [pc, #148]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80073cc:	4b24      	ldr	r3, [pc, #144]	@ (8007460 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a24      	ldr	r2, [pc, #144]	@ (8007464 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	099b      	lsrs	r3, r3, #6
 80073d8:	2232      	movs	r2, #50	@ 0x32
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	4a21      	ldr	r2, [pc, #132]	@ (8007464 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80073e0:	fba2 2303 	umull	r2, r3, r2, r3
 80073e4:	099b      	lsrs	r3, r3, #6
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80073ea:	e002      	b.n	80073f2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80073f2:	4b1a      	ldr	r3, [pc, #104]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_PWREx_ControlVoltageScaling+0x98>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f3      	bne.n	80073ec <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01b      	beq.n	8007442 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800740a:	4b15      	ldr	r3, [pc, #84]	@ (8007460 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a15      	ldr	r2, [pc, #84]	@ (8007464 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	099b      	lsrs	r3, r3, #6
 8007416:	2232      	movs	r2, #50	@ 0x32
 8007418:	fb02 f303 	mul.w	r3, r2, r3
 800741c:	4a11      	ldr	r2, [pc, #68]	@ (8007464 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800741e:	fba2 2303 	umull	r2, r3, r2, r3
 8007422:	099b      	lsrs	r3, r3, #6
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007428:	e002      	b.n	8007430 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b01      	subs	r3, #1
 800742e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007430:	4b0a      	ldr	r3, [pc, #40]	@ (800745c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d102      	bne.n	8007442 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f3      	bne.n	800742a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e000      	b.n	800744e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	46020800 	.word	0x46020800
 8007460:	20000000 	.word	0x20000000
 8007464:	10624dd3 	.word	0x10624dd3

08007468 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800746c:	4b04      	ldr	r3, [pc, #16]	@ (8007480 <HAL_PWREx_GetVoltageRange+0x18>)
 800746e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	46020800 	.word	0x46020800

08007484 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800748c:	4b22      	ldr	r3, [pc, #136]	@ (8007518 <HAL_PWREx_ConfigSupply+0x94>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a22      	ldr	r2, [pc, #136]	@ (800751c <HAL_PWREx_ConfigSupply+0x98>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	2232      	movs	r2, #50	@ 0x32
 800749a:	fb02 f303 	mul.w	r3, r2, r3
 800749e:	4a1f      	ldr	r2, [pc, #124]	@ (800751c <HAL_PWREx_ConfigSupply+0x98>)
 80074a0:	fba2 2303 	umull	r2, r3, r2, r3
 80074a4:	099b      	lsrs	r3, r3, #6
 80074a6:	3301      	adds	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d113      	bne.n	80074d8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80074b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	4a1a      	ldr	r2, [pc, #104]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074b6:	f023 0302 	bic.w	r3, r3, #2
 80074ba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074bc:	e002      	b.n	80074c4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074c4:	4b16      	ldr	r3, [pc, #88]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d116      	bne.n	80074fe <HAL_PWREx_ConfigSupply+0x7a>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f3      	bne.n	80074be <HAL_PWREx_ConfigSupply+0x3a>
 80074d6:	e012      	b.n	80074fe <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80074d8:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	4a10      	ldr	r2, [pc, #64]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074de:	f043 0302 	orr.w	r3, r3, #2
 80074e2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074e4:	e002      	b.n	80074ec <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80074ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007520 <HAL_PWREx_ConfigSupply+0x9c>)
 80074ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <HAL_PWREx_ConfigSupply+0x7a>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f3      	bne.n	80074e6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e000      	b.n	800750a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20000000 	.word	0x20000000
 800751c:	10624dd3 	.word	0x10624dd3
 8007520:	46020800 	.word	0x46020800

08007524 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8007528:	4b05      	ldr	r3, [pc, #20]	@ (8007540 <HAL_PWREx_EnableVddUSB+0x1c>)
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	4a04      	ldr	r2, [pc, #16]	@ (8007540 <HAL_PWREx_EnableVddUSB+0x1c>)
 800752e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007532:	6113      	str	r3, [r2, #16]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	46020800 	.word	0x46020800

08007544 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <HAL_PWREx_EnableVddIO2+0x1c>)
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	4a04      	ldr	r2, [pc, #16]	@ (8007560 <HAL_PWREx_EnableVddIO2+0x1c>)
 800754e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007552:	6113      	str	r3, [r2, #16]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	46020800 	.word	0x46020800

08007564 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_PWREx_EnableVddA+0x1c>)
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	4a04      	ldr	r2, [pc, #16]	@ (8007580 <HAL_PWREx_EnableVddA+0x1c>)
 800756e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007572:	6113      	str	r3, [r2, #16]
}
 8007574:	bf00      	nop
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	46020800 	.word	0x46020800

08007584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b08e      	sub	sp, #56	@ 0x38
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800758c:	2300      	movs	r3, #0
 800758e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f000 bec8 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800759e:	4b99      	ldr	r3, [pc, #612]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 030c 	and.w	r3, r3, #12
 80075a6:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075a8:	4b96      	ldr	r3, [pc, #600]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	f003 0303 	and.w	r3, r3, #3
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 816c 	beq.w	8007898 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80075c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <HAL_RCC_OscConfig+0x52>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c8:	2b0c      	cmp	r3, #12
 80075ca:	f040 80de 	bne.w	800778a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80075ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 80da 	bne.w	800778a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	f000 bea5 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075e8:	4b86      	ldr	r3, [pc, #536]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <HAL_RCC_OscConfig+0x7a>
 80075f4:	4b83      	ldr	r3, [pc, #524]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80075fc:	e005      	b.n	800760a <HAL_RCC_OscConfig+0x86>
 80075fe:	4b81      	ldr	r3, [pc, #516]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007600:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800760a:	4293      	cmp	r3, r2
 800760c:	d255      	bcs.n	80076ba <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d10a      	bne.n	800762a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	4618      	mov	r0, r3
 800761a:	f001 fa49 	bl	8008ab0 <RCC_SetFlashLatencyFromMSIRange>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	f000 be82 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800762a:	4b76      	ldr	r3, [pc, #472]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	4a75      	ldr	r2, [pc, #468]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007630:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007634:	6093      	str	r3, [r2, #8]
 8007636:	4b73      	ldr	r3, [pc, #460]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007642:	4970      	ldr	r1, [pc, #448]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007644:	4313      	orrs	r3, r2
 8007646:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007650:	d309      	bcc.n	8007666 <HAL_RCC_OscConfig+0xe2>
 8007652:	4b6c      	ldr	r3, [pc, #432]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f023 021f 	bic.w	r2, r3, #31
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	4969      	ldr	r1, [pc, #420]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007660:	4313      	orrs	r3, r2
 8007662:	60cb      	str	r3, [r1, #12]
 8007664:	e07e      	b.n	8007764 <HAL_RCC_OscConfig+0x1e0>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	da0a      	bge.n	8007684 <HAL_RCC_OscConfig+0x100>
 800766e:	4b65      	ldr	r3, [pc, #404]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	015b      	lsls	r3, r3, #5
 800767c:	4961      	ldr	r1, [pc, #388]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800767e:	4313      	orrs	r3, r2
 8007680:	60cb      	str	r3, [r1, #12]
 8007682:	e06f      	b.n	8007764 <HAL_RCC_OscConfig+0x1e0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768c:	d30a      	bcc.n	80076a4 <HAL_RCC_OscConfig+0x120>
 800768e:	4b5d      	ldr	r3, [pc, #372]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	029b      	lsls	r3, r3, #10
 800769c:	4959      	ldr	r1, [pc, #356]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	60cb      	str	r3, [r1, #12]
 80076a2:	e05f      	b.n	8007764 <HAL_RCC_OscConfig+0x1e0>
 80076a4:	4b57      	ldr	r3, [pc, #348]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	03db      	lsls	r3, r3, #15
 80076b2:	4954      	ldr	r1, [pc, #336]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60cb      	str	r3, [r1, #12]
 80076b8:	e054      	b.n	8007764 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80076ba:	4b52      	ldr	r3, [pc, #328]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	4a51      	ldr	r2, [pc, #324]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80076c4:	6093      	str	r3, [r2, #8]
 80076c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d2:	494c      	ldr	r1, [pc, #304]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076dc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80076e0:	d309      	bcc.n	80076f6 <HAL_RCC_OscConfig+0x172>
 80076e2:	4b48      	ldr	r3, [pc, #288]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f023 021f 	bic.w	r2, r3, #31
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	4945      	ldr	r1, [pc, #276]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60cb      	str	r3, [r1, #12]
 80076f4:	e028      	b.n	8007748 <HAL_RCC_OscConfig+0x1c4>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	da0a      	bge.n	8007714 <HAL_RCC_OscConfig+0x190>
 80076fe:	4b41      	ldr	r3, [pc, #260]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	015b      	lsls	r3, r3, #5
 800770c:	493d      	ldr	r1, [pc, #244]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800770e:	4313      	orrs	r3, r2
 8007710:	60cb      	str	r3, [r1, #12]
 8007712:	e019      	b.n	8007748 <HAL_RCC_OscConfig+0x1c4>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771c:	d30a      	bcc.n	8007734 <HAL_RCC_OscConfig+0x1b0>
 800771e:	4b39      	ldr	r3, [pc, #228]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	029b      	lsls	r3, r3, #10
 800772c:	4935      	ldr	r1, [pc, #212]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 800772e:	4313      	orrs	r3, r2
 8007730:	60cb      	str	r3, [r1, #12]
 8007732:	e009      	b.n	8007748 <HAL_RCC_OscConfig+0x1c4>
 8007734:	4b33      	ldr	r3, [pc, #204]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	03db      	lsls	r3, r3, #15
 8007742:	4930      	ldr	r1, [pc, #192]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007744:	4313      	orrs	r3, r2
 8007746:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	4618      	mov	r0, r3
 8007754:	f001 f9ac 	bl	8008ab0 <RCC_SetFlashLatencyFromMSIRange>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f000 bde5 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007764:	f001 f916 	bl	8008994 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007768:	4b27      	ldr	r3, [pc, #156]	@ (8007808 <HAL_RCC_OscConfig+0x284>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f7fb fc33 	bl	8002fd8 <HAL_InitTick>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 808a 	beq.w	8007896 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007786:	f000 bdd2 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d066      	beq.n	8007860 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007792:	4b1c      	ldr	r3, [pc, #112]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1b      	ldr	r2, [pc, #108]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800779e:	f7fb fd85 	bl	80032ac <HAL_GetTick>
 80077a2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80077a4:	e009      	b.n	80077ba <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077a6:	f7fb fd81 	bl	80032ac <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d902      	bls.n	80077ba <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	f000 bdba 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80077ba:	4b12      	ldr	r3, [pc, #72]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d0ef      	beq.n	80077a6 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80077c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80077d0:	6093      	str	r3, [r2, #8]
 80077d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077de:	4909      	ldr	r1, [pc, #36]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80077ec:	d30e      	bcc.n	800780c <HAL_RCC_OscConfig+0x288>
 80077ee:	4b05      	ldr	r3, [pc, #20]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f023 021f 	bic.w	r2, r3, #31
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	4902      	ldr	r1, [pc, #8]	@ (8007804 <HAL_RCC_OscConfig+0x280>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	60cb      	str	r3, [r1, #12]
 8007800:	e04a      	b.n	8007898 <HAL_RCC_OscConfig+0x314>
 8007802:	bf00      	nop
 8007804:	46020c00 	.word	0x46020c00
 8007808:	20000004 	.word	0x20000004
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007810:	2b00      	cmp	r3, #0
 8007812:	da0a      	bge.n	800782a <HAL_RCC_OscConfig+0x2a6>
 8007814:	4b98      	ldr	r3, [pc, #608]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	015b      	lsls	r3, r3, #5
 8007822:	4995      	ldr	r1, [pc, #596]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007824:	4313      	orrs	r3, r2
 8007826:	60cb      	str	r3, [r1, #12]
 8007828:	e036      	b.n	8007898 <HAL_RCC_OscConfig+0x314>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007832:	d30a      	bcc.n	800784a <HAL_RCC_OscConfig+0x2c6>
 8007834:	4b90      	ldr	r3, [pc, #576]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	029b      	lsls	r3, r3, #10
 8007842:	498d      	ldr	r1, [pc, #564]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007844:	4313      	orrs	r3, r2
 8007846:	60cb      	str	r3, [r1, #12]
 8007848:	e026      	b.n	8007898 <HAL_RCC_OscConfig+0x314>
 800784a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	03db      	lsls	r3, r3, #15
 8007858:	4987      	ldr	r1, [pc, #540]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800785a:	4313      	orrs	r3, r2
 800785c:	60cb      	str	r3, [r1, #12]
 800785e:	e01b      	b.n	8007898 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007860:	4b85      	ldr	r3, [pc, #532]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a84      	ldr	r2, [pc, #528]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800786c:	f7fb fd1e 	bl	80032ac <HAL_GetTick>
 8007870:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007872:	e009      	b.n	8007888 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007874:	f7fb fd1a 	bl	80032ac <HAL_GetTick>
 8007878:	4602      	mov	r2, r0
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d902      	bls.n	8007888 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	f000 bd53 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8007888:	4b7b      	ldr	r3, [pc, #492]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ef      	bne.n	8007874 <HAL_RCC_OscConfig+0x2f0>
 8007894:	e000      	b.n	8007898 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007896:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 808b 	beq.w	80079bc <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d005      	beq.n	80078b8 <HAL_RCC_OscConfig+0x334>
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	2b0c      	cmp	r3, #12
 80078b0:	d109      	bne.n	80078c6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80078b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d106      	bne.n	80078c6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d17d      	bne.n	80079bc <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	f000 bd34 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078ce:	d106      	bne.n	80078de <HAL_RCC_OscConfig+0x35a>
 80078d0:	4b69      	ldr	r3, [pc, #420]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a68      	ldr	r2, [pc, #416]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	e041      	b.n	8007962 <HAL_RCC_OscConfig+0x3de>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078e6:	d112      	bne.n	800790e <HAL_RCC_OscConfig+0x38a>
 80078e8:	4b63      	ldr	r3, [pc, #396]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a62      	ldr	r2, [pc, #392]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4b60      	ldr	r3, [pc, #384]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a5f      	ldr	r2, [pc, #380]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80078fa:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	4b5d      	ldr	r3, [pc, #372]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a5c      	ldr	r2, [pc, #368]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e029      	b.n	8007962 <HAL_RCC_OscConfig+0x3de>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007916:	d112      	bne.n	800793e <HAL_RCC_OscConfig+0x3ba>
 8007918:	4b57      	ldr	r3, [pc, #348]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a56      	ldr	r2, [pc, #344]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800791e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	4b54      	ldr	r3, [pc, #336]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a53      	ldr	r2, [pc, #332]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800792a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800792e:	6013      	str	r3, [r2, #0]
 8007930:	4b51      	ldr	r3, [pc, #324]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a50      	ldr	r2, [pc, #320]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	e011      	b.n	8007962 <HAL_RCC_OscConfig+0x3de>
 800793e:	4b4e      	ldr	r3, [pc, #312]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a4d      	ldr	r2, [pc, #308]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007948:	6013      	str	r3, [r2, #0]
 800794a:	4b4b      	ldr	r3, [pc, #300]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a4a      	ldr	r2, [pc, #296]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b48      	ldr	r3, [pc, #288]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a47      	ldr	r2, [pc, #284]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 800795c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d014      	beq.n	8007994 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800796a:	f7fb fc9f 	bl	80032ac <HAL_GetTick>
 800796e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007970:	e009      	b.n	8007986 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007972:	f7fb fc9b 	bl	80032ac <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b64      	cmp	r3, #100	@ 0x64
 800797e:	d902      	bls.n	8007986 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	f000 bcd4 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007986:	4b3c      	ldr	r3, [pc, #240]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0ef      	beq.n	8007972 <HAL_RCC_OscConfig+0x3ee>
 8007992:	e013      	b.n	80079bc <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007994:	f7fb fc8a 	bl	80032ac <HAL_GetTick>
 8007998:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800799a:	e009      	b.n	80079b0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800799c:	f7fb fc86 	bl	80032ac <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	@ 0x64
 80079a8:	d902      	bls.n	80079b0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	f000 bcbf 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079b0:	4b31      	ldr	r3, [pc, #196]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1ef      	bne.n	800799c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d05f      	beq.n	8007a88 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d005      	beq.n	80079da <HAL_RCC_OscConfig+0x456>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d114      	bne.n	80079fe <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d111      	bne.n	80079fe <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d102      	bne.n	80079e8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	f000 bca3 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80079e8:	4b23      	ldr	r3, [pc, #140]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	4920      	ldr	r1, [pc, #128]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079fc:	e044      	b.n	8007a88 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d024      	beq.n	8007a50 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007a06:	4b1c      	ldr	r3, [pc, #112]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a10:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a12:	f7fb fc4b 	bl	80032ac <HAL_GetTick>
 8007a16:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a18:	e009      	b.n	8007a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a1a:	f7fb fc47 	bl	80032ac <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d902      	bls.n	8007a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	f000 bc80 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a2e:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0ef      	beq.n	8007a1a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	490b      	ldr	r1, [pc, #44]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]
 8007a4e:	e01b      	b.n	8007a88 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007a50:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a08      	ldr	r2, [pc, #32]	@ (8007a78 <HAL_RCC_OscConfig+0x4f4>)
 8007a56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a5a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007a5c:	f7fb fc26 	bl	80032ac <HAL_GetTick>
 8007a60:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a62:	e00b      	b.n	8007a7c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a64:	f7fb fc22 	bl	80032ac <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d904      	bls.n	8007a7c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	f000 bc5b 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
 8007a78:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a7c:	4baf      	ldr	r3, [pc, #700]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1ed      	bne.n	8007a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 80c8 	beq.w	8007c26 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007a96:	2300      	movs	r3, #0
 8007a98:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a9c:	4ba7      	ldr	r3, [pc, #668]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007aa2:	f003 0304 	and.w	r3, r3, #4
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d111      	bne.n	8007ace <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aaa:	4ba4      	ldr	r3, [pc, #656]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ab0:	4aa2      	ldr	r2, [pc, #648]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007ab2:	f043 0304 	orr.w	r3, r3, #4
 8007ab6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007aba:	4ba0      	ldr	r3, [pc, #640]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	617b      	str	r3, [r7, #20]
 8007ac6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007ace:	4b9c      	ldr	r3, [pc, #624]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d119      	bne.n	8007b0e <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007ada:	4b99      	ldr	r3, [pc, #612]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ade:	4a98      	ldr	r2, [pc, #608]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ae6:	f7fb fbe1 	bl	80032ac <HAL_GetTick>
 8007aea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007aec:	e009      	b.n	8007b02 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aee:	f7fb fbdd 	bl	80032ac <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d902      	bls.n	8007b02 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	f000 bc16 	b.w	800832e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007b02:	4b8f      	ldr	r3, [pc, #572]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0ef      	beq.n	8007aee <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d05f      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007b16:	4b89      	ldr	r3, [pc, #548]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b1c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d037      	beq.n	8007b9c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e3f4      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d01b      	beq.n	8007b86 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b54:	4a79      	ldr	r2, [pc, #484]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b56:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007b5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007b5e:	f7fb fba5 	bl	80032ac <HAL_GetTick>
 8007b62:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b66:	f7fb fba1 	bl	80032ac <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b05      	cmp	r3, #5
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e3da      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007b78:	4b70      	ldr	r3, [pc, #448]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1ef      	bne.n	8007b66 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007b86:	4b6d      	ldr	r3, [pc, #436]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b8c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	4969      	ldr	r1, [pc, #420]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007b9c:	4b67      	ldr	r3, [pc, #412]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ba2:	4a66      	ldr	r2, [pc, #408]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007ba4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ba8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007bac:	f7fb fb7e 	bl	80032ac <HAL_GetTick>
 8007bb0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb4:	f7fb fb7a 	bl	80032ac <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e3b3      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0ef      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x630>
 8007bd4:	e01b      	b.n	8007c0e <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007bd6:	4b59      	ldr	r3, [pc, #356]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bdc:	4a57      	ldr	r2, [pc, #348]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007bde:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007be2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007be6:	f7fb fb61 	bl	80032ac <HAL_GetTick>
 8007bea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007bec:	e008      	b.n	8007c00 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bee:	f7fb fb5d 	bl	80032ac <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b05      	cmp	r3, #5
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e396      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007c00:	4b4e      	ldr	r3, [pc, #312]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1ef      	bne.n	8007bee <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d107      	bne.n	8007c26 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c16:	4b49      	ldr	r3, [pc, #292]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c1c:	4a47      	ldr	r2, [pc, #284]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c1e:	f023 0304 	bic.w	r3, r3, #4
 8007c22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0304 	and.w	r3, r3, #4
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8111 	beq.w	8007e56 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007c34:	2300      	movs	r3, #0
 8007c36:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3a:	4b40      	ldr	r3, [pc, #256]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d111      	bne.n	8007c6c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c48:	4b3c      	ldr	r3, [pc, #240]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c4e:	4a3b      	ldr	r2, [pc, #236]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c50:	f043 0304 	orr.w	r3, r3, #4
 8007c54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007c58:	4b38      	ldr	r3, [pc, #224]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c5e:	f003 0304 	and.w	r3, r3, #4
 8007c62:	613b      	str	r3, [r7, #16]
 8007c64:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007c66:	2301      	movs	r3, #1
 8007c68:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c6c:	4b34      	ldr	r3, [pc, #208]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d118      	bne.n	8007caa <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c78:	4b31      	ldr	r3, [pc, #196]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7c:	4a30      	ldr	r2, [pc, #192]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007c7e:	f043 0301 	orr.w	r3, r3, #1
 8007c82:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c84:	f7fb fb12 	bl	80032ac <HAL_GetTick>
 8007c88:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c8a:	e008      	b.n	8007c9e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8c:	f7fb fb0e 	bl	80032ac <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e347      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c9e:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <HAL_RCC_OscConfig+0x7bc>)
 8007ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d0f0      	beq.n	8007c8c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d01f      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d010      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cd8:	4a18      	ldr	r2, [pc, #96]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007ce2:	e018      	b.n	8007d16 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007ce4:	4b15      	ldr	r3, [pc, #84]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cea:	4a14      	ldr	r2, [pc, #80]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007cf4:	e00f      	b.n	8007d16 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cf6:	4b11      	ldr	r3, [pc, #68]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d06:	4b0d      	ldr	r3, [pc, #52]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d3c <HAL_RCC_OscConfig+0x7b8>)
 8007d0e:	f023 0304 	bic.w	r3, r3, #4
 8007d12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d057      	beq.n	8007dce <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007d1e:	f7fb fac5 	bl	80032ac <HAL_GetTick>
 8007d22:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d24:	e00e      	b.n	8007d44 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d26:	f7fb fac1 	bl	80032ac <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d905      	bls.n	8007d44 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e2f8      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
 8007d3c:	46020c00 	.word	0x46020c00
 8007d40:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d44:	4b9c      	ldr	r3, [pc, #624]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0e9      	beq.n	8007d26 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01b      	beq.n	8007d96 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d5e:	4b96      	ldr	r3, [pc, #600]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d64:	4a94      	ldr	r2, [pc, #592]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d6e:	e00a      	b.n	8007d86 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d70:	f7fb fa9c 	bl	80032ac <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e2d3      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007d86:	4b8c      	ldr	r3, [pc, #560]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0ed      	beq.n	8007d70 <HAL_RCC_OscConfig+0x7ec>
 8007d94:	e053      	b.n	8007e3e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007d96:	4b88      	ldr	r3, [pc, #544]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d9c:	4a86      	ldr	r2, [pc, #536]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007da6:	e00a      	b.n	8007dbe <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007da8:	f7fb fa80 	bl	80032ac <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d901      	bls.n	8007dbe <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007dba:	2303      	movs	r3, #3
 8007dbc:	e2b7      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1ed      	bne.n	8007da8 <HAL_RCC_OscConfig+0x824>
 8007dcc:	e037      	b.n	8007e3e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007dce:	f7fb fa6d 	bl	80032ac <HAL_GetTick>
 8007dd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7fb fa69 	bl	80032ac <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e2a0      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dec:	4b72      	ldr	r3, [pc, #456]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1ed      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01a      	beq.n	8007e3e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e08:	4b6b      	ldr	r3, [pc, #428]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e14:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e18:	e00a      	b.n	8007e30 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e1a:	f7fb fa47 	bl	80032ac <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e27e      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007e30:	4b61      	ldr	r3, [pc, #388]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ed      	bne.n	8007e1a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e3e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d107      	bne.n	8007e56 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e46:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e4e:	f023 0304 	bic.w	r3, r3, #4
 8007e52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d036      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d019      	beq.n	8007e9e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007e6a:	4b53      	ldr	r3, [pc, #332]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a52      	ldr	r2, [pc, #328]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e74:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007e76:	f7fb fa19 	bl	80032ac <HAL_GetTick>
 8007e7a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e7e:	f7fb fa15 	bl	80032ac <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e24e      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007e90:	4b49      	ldr	r3, [pc, #292]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f0      	beq.n	8007e7e <HAL_RCC_OscConfig+0x8fa>
 8007e9c:	e018      	b.n	8007ed0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007e9e:	4b46      	ldr	r3, [pc, #280]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a45      	ldr	r2, [pc, #276]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007ea4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ea8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007eaa:	f7fb f9ff 	bl	80032ac <HAL_GetTick>
 8007eae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007eb2:	f7fb f9fb 	bl	80032ac <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e234      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1f0      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d036      	beq.n	8007f4a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d019      	beq.n	8007f18 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007ee4:	4b34      	ldr	r3, [pc, #208]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a33      	ldr	r2, [pc, #204]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007eee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ef0:	f7fb f9dc 	bl	80032ac <HAL_GetTick>
 8007ef4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007ef6:	e008      	b.n	8007f0a <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007ef8:	f7fb f9d8 	bl	80032ac <HAL_GetTick>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	1ad3      	subs	r3, r2, r3
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d901      	bls.n	8007f0a <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e211      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0f0      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x974>
 8007f16:	e018      	b.n	8007f4a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007f18:	4b27      	ldr	r3, [pc, #156]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a26      	ldr	r2, [pc, #152]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007f24:	f7fb f9c2 	bl	80032ac <HAL_GetTick>
 8007f28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f2a:	e008      	b.n	8007f3e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007f2c:	f7fb f9be 	bl	80032ac <HAL_GetTick>
 8007f30:	4602      	mov	r2, r0
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d901      	bls.n	8007f3e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e1f7      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f0      	bne.n	8007f2c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d07f      	beq.n	8008056 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d062      	beq.n	8008024 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007f5e:	4b16      	ldr	r3, [pc, #88]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f68:	6093      	str	r3, [r2, #8]
 8007f6a:	4b13      	ldr	r3, [pc, #76]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f76:	4910      	ldr	r1, [pc, #64]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007f84:	d309      	bcc.n	8007f9a <HAL_RCC_OscConfig+0xa16>
 8007f86:	4b0c      	ldr	r3, [pc, #48]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f023 021f 	bic.w	r2, r3, #31
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	4909      	ldr	r1, [pc, #36]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60cb      	str	r3, [r1, #12]
 8007f98:	e02a      	b.n	8007ff0 <HAL_RCC_OscConfig+0xa6c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da0c      	bge.n	8007fbc <HAL_RCC_OscConfig+0xa38>
 8007fa2:	4b05      	ldr	r3, [pc, #20]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6a1b      	ldr	r3, [r3, #32]
 8007fae:	015b      	lsls	r3, r3, #5
 8007fb0:	4901      	ldr	r1, [pc, #4]	@ (8007fb8 <HAL_RCC_OscConfig+0xa34>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60cb      	str	r3, [r1, #12]
 8007fb6:	e01b      	b.n	8007ff0 <HAL_RCC_OscConfig+0xa6c>
 8007fb8:	46020c00 	.word	0x46020c00
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc4:	d30a      	bcc.n	8007fdc <HAL_RCC_OscConfig+0xa58>
 8007fc6:	4ba1      	ldr	r3, [pc, #644]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	029b      	lsls	r3, r3, #10
 8007fd4:	499d      	ldr	r1, [pc, #628]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60cb      	str	r3, [r1, #12]
 8007fda:	e009      	b.n	8007ff0 <HAL_RCC_OscConfig+0xa6c>
 8007fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	03db      	lsls	r3, r3, #15
 8007fea:	4998      	ldr	r1, [pc, #608]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007ff0:	4b96      	ldr	r3, [pc, #600]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a95      	ldr	r2, [pc, #596]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8007ff6:	f043 0310 	orr.w	r3, r3, #16
 8007ffa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007ffc:	f7fb f956 	bl	80032ac <HAL_GetTick>
 8008000:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008004:	f7fb f952 	bl	80032ac <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e18b      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008016:	4b8d      	ldr	r3, [pc, #564]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCC_OscConfig+0xa80>
 8008022:	e018      	b.n	8008056 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008024:	4b89      	ldr	r3, [pc, #548]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a88      	ldr	r2, [pc, #544]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800802a:	f023 0310 	bic.w	r3, r3, #16
 800802e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008030:	f7fb f93c 	bl	80032ac <HAL_GetTick>
 8008034:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008036:	e008      	b.n	800804a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008038:	f7fb f938 	bl	80032ac <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	2b02      	cmp	r3, #2
 8008044:	d901      	bls.n	800804a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e171      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800804a:	4b80      	ldr	r3, [pc, #512]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1f0      	bne.n	8008038 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 8166 	beq.w	800832c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008060:	2300      	movs	r3, #0
 8008062:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008066:	4b79      	ldr	r3, [pc, #484]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	f003 030c 	and.w	r3, r3, #12
 800806e:	2b0c      	cmp	r3, #12
 8008070:	f000 80f2 	beq.w	8008258 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008078:	2b02      	cmp	r3, #2
 800807a:	f040 80c5 	bne.w	8008208 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800807e:	4b73      	ldr	r3, [pc, #460]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a72      	ldr	r2, [pc, #456]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008084:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008088:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800808a:	f7fb f90f 	bl	80032ac <HAL_GetTick>
 800808e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008092:	f7fb f90b 	bl	80032ac <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e144      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80080a4:	4b69      	ldr	r3, [pc, #420]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080b0:	4b66      	ldr	r3, [pc, #408]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80080b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d111      	bne.n	80080e2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80080be:	4b63      	ldr	r3, [pc, #396]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80080c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080c4:	4a61      	ldr	r2, [pc, #388]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80080c6:	f043 0304 	orr.w	r3, r3, #4
 80080ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80080ce:	4b5f      	ldr	r3, [pc, #380]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80080d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080d4:	f003 0304 	and.w	r3, r3, #4
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80080e2:	4b5b      	ldr	r3, [pc, #364]	@ (8008250 <HAL_RCC_OscConfig+0xccc>)
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80080ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80080ee:	d102      	bne.n	80080f6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80080f6:	4b56      	ldr	r3, [pc, #344]	@ (8008250 <HAL_RCC_OscConfig+0xccc>)
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	4a55      	ldr	r2, [pc, #340]	@ (8008250 <HAL_RCC_OscConfig+0xccc>)
 80080fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008100:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8008102:	4b52      	ldr	r3, [pc, #328]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008116:	3a01      	subs	r2, #1
 8008118:	0212      	lsls	r2, r2, #8
 800811a:	4311      	orrs	r1, r2
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008120:	430a      	orrs	r2, r1
 8008122:	494a      	ldr	r1, [pc, #296]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008124:	4313      	orrs	r3, r2
 8008126:	628b      	str	r3, [r1, #40]	@ 0x28
 8008128:	4b48      	ldr	r3, [pc, #288]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800812a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800812c:	4b49      	ldr	r3, [pc, #292]	@ (8008254 <HAL_RCC_OscConfig+0xcd0>)
 800812e:	4013      	ands	r3, r2
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008134:	3a01      	subs	r2, #1
 8008136:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800813e:	3a01      	subs	r2, #1
 8008140:	0252      	lsls	r2, r2, #9
 8008142:	b292      	uxth	r2, r2
 8008144:	4311      	orrs	r1, r2
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800814a:	3a01      	subs	r2, #1
 800814c:	0412      	lsls	r2, r2, #16
 800814e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8008152:	4311      	orrs	r1, r2
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008158:	3a01      	subs	r2, #1
 800815a:	0612      	lsls	r2, r2, #24
 800815c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008160:	430a      	orrs	r2, r1
 8008162:	493a      	ldr	r1, [pc, #232]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008164:	4313      	orrs	r3, r2
 8008166:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008168:	4b38      	ldr	r3, [pc, #224]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	4a37      	ldr	r2, [pc, #220]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800816e:	f023 0310 	bic.w	r3, r3, #16
 8008172:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008178:	4a34      	ldr	r2, [pc, #208]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800817e:	4b33      	ldr	r3, [pc, #204]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	4a32      	ldr	r2, [pc, #200]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008184:	f043 0310 	orr.w	r3, r3, #16
 8008188:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800818a:	4b30      	ldr	r3, [pc, #192]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800818c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818e:	f023 020c 	bic.w	r2, r3, #12
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008196:	492d      	ldr	r1, [pc, #180]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008198:	4313      	orrs	r3, r2
 800819a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800819c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d105      	bne.n	80081b0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80081a4:	4b2a      	ldr	r3, [pc, #168]	@ (8008250 <HAL_RCC_OscConfig+0xccc>)
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	4a29      	ldr	r2, [pc, #164]	@ (8008250 <HAL_RCC_OscConfig+0xccc>)
 80081aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081ae:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80081b0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d107      	bne.n	80081c8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80081b8:	4b24      	ldr	r3, [pc, #144]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081be:	4a23      	ldr	r2, [pc, #140]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081c0:	f023 0304 	bic.w	r3, r3, #4
 80081c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80081c8:	4b20      	ldr	r3, [pc, #128]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a1f      	ldr	r2, [pc, #124]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081d4:	f7fb f86a 	bl	80032ac <HAL_GetTick>
 80081d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081dc:	f7fb f866 	bl	80032ac <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e09f      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80081ee:	4b17      	ldr	r3, [pc, #92]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081fa:	4b14      	ldr	r3, [pc, #80]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	4a13      	ldr	r2, [pc, #76]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008204:	6293      	str	r3, [r2, #40]	@ 0x28
 8008206:	e091      	b.n	800832c <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008208:	4b10      	ldr	r3, [pc, #64]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a0f      	ldr	r2, [pc, #60]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800820e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008212:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008214:	f7fb f84a 	bl	80032ac <HAL_GetTick>
 8008218:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821c:	f7fb f846 	bl	80032ac <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e07f      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800822e:	4b07      	ldr	r3, [pc, #28]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f0      	bne.n	800821c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800823a:	4b04      	ldr	r3, [pc, #16]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	4a03      	ldr	r2, [pc, #12]	@ (800824c <HAL_RCC_OscConfig+0xcc8>)
 8008240:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	6293      	str	r3, [r2, #40]	@ 0x28
 800824a:	e06f      	b.n	800832c <HAL_RCC_OscConfig+0xda8>
 800824c:	46020c00 	.word	0x46020c00
 8008250:	46020800 	.word	0x46020800
 8008254:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008258:	4b37      	ldr	r3, [pc, #220]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 800825a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800825e:	4b36      	ldr	r3, [pc, #216]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 8008260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008262:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008268:	2b01      	cmp	r3, #1
 800826a:	d039      	beq.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f003 0203 	and.w	r2, r3, #3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d132      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	0a1b      	lsrs	r3, r3, #8
 800827e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008286:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008288:	429a      	cmp	r2, r3
 800828a:	d129      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d122      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a4:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d11a      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	0a5b      	lsrs	r3, r3, #9
 80082ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d111      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	0c1b      	lsrs	r3, r3, #16
 80082c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d108      	bne.n	80082e0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	0e1b      	lsrs	r3, r3, #24
 80082d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082dc:	429a      	cmp	r2, r3
 80082de:	d001      	beq.n	80082e4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e024      	b.n	800832e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082e4:	4b14      	ldr	r3, [pc, #80]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 80082e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e8:	08db      	lsrs	r3, r3, #3
 80082ea:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d01a      	beq.n	800832c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80082f6:	4b10      	ldr	r3, [pc, #64]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fa:	4a0f      	ldr	r2, [pc, #60]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 80082fc:	f023 0310 	bic.w	r3, r3, #16
 8008300:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008302:	f7fa ffd3 	bl	80032ac <HAL_GetTick>
 8008306:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008308:	bf00      	nop
 800830a:	f7fa ffcf 	bl	80032ac <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008312:	4293      	cmp	r3, r2
 8008314:	d0f9      	beq.n	800830a <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831a:	4a07      	ldr	r2, [pc, #28]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 800831c:	00db      	lsls	r3, r3, #3
 800831e:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008320:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 8008322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008324:	4a04      	ldr	r2, [pc, #16]	@ (8008338 <HAL_RCC_OscConfig+0xdb4>)
 8008326:	f043 0310 	orr.w	r3, r3, #16
 800832a:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3738      	adds	r7, #56	@ 0x38
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	46020c00 	.word	0x46020c00

0800833c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e1d9      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008350:	4b9b      	ldr	r3, [pc, #620]	@ (80085c0 <HAL_RCC_ClockConfig+0x284>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d910      	bls.n	8008380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800835e:	4b98      	ldr	r3, [pc, #608]	@ (80085c0 <HAL_RCC_ClockConfig+0x284>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f023 020f 	bic.w	r2, r3, #15
 8008366:	4996      	ldr	r1, [pc, #600]	@ (80085c0 <HAL_RCC_ClockConfig+0x284>)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	4313      	orrs	r3, r2
 800836c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800836e:	4b94      	ldr	r3, [pc, #592]	@ (80085c0 <HAL_RCC_ClockConfig+0x284>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	429a      	cmp	r2, r3
 800837a:	d001      	beq.n	8008380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e1c1      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b00      	cmp	r3, #0
 800838a:	d010      	beq.n	80083ae <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	695a      	ldr	r2, [r3, #20]
 8008390:	4b8c      	ldr	r3, [pc, #560]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008394:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008398:	429a      	cmp	r2, r3
 800839a:	d908      	bls.n	80083ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800839c:	4b89      	ldr	r3, [pc, #548]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 800839e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	4986      	ldr	r1, [pc, #536]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d012      	beq.n	80083e0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	4b81      	ldr	r3, [pc, #516]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	091b      	lsrs	r3, r3, #4
 80083c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d909      	bls.n	80083e0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80083cc:	4b7d      	ldr	r3, [pc, #500]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	497a      	ldr	r1, [pc, #488]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d010      	beq.n	800840e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	4b74      	ldr	r3, [pc, #464]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083f2:	6a1b      	ldr	r3, [r3, #32]
 80083f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d908      	bls.n	800840e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80083fc:	4b71      	ldr	r3, [pc, #452]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	496e      	ldr	r1, [pc, #440]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 800840a:	4313      	orrs	r3, r2
 800840c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0302 	and.w	r3, r3, #2
 8008416:	2b00      	cmp	r3, #0
 8008418:	d010      	beq.n	800843c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	4b69      	ldr	r3, [pc, #420]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	429a      	cmp	r2, r3
 8008428:	d908      	bls.n	800843c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800842a:	4b66      	ldr	r3, [pc, #408]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 020f 	bic.w	r2, r3, #15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	4963      	ldr	r1, [pc, #396]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008438:	4313      	orrs	r3, r2
 800843a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 80d2 	beq.w	80085ee <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d143      	bne.n	80084de <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008456:	4b5b      	ldr	r3, [pc, #364]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d110      	bne.n	8008486 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008464:	4b57      	ldr	r3, [pc, #348]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008466:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800846a:	4a56      	ldr	r2, [pc, #344]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 800846c:	f043 0304 	orr.w	r3, r3, #4
 8008470:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008474:	4b53      	ldr	r3, [pc, #332]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800847a:	f003 0304 	and.w	r3, r3, #4
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008482:	2301      	movs	r3, #1
 8008484:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008486:	f7fa ff11 	bl	80032ac <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800848c:	4b4e      	ldr	r3, [pc, #312]	@ (80085c8 <HAL_RCC_ClockConfig+0x28c>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00f      	beq.n	80084b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008498:	e008      	b.n	80084ac <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800849a:	f7fa ff07 	bl	80032ac <HAL_GetTick>
 800849e:	4602      	mov	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e12b      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80084ac:	4b46      	ldr	r3, [pc, #280]	@ (80085c8 <HAL_RCC_ClockConfig+0x28c>)
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d107      	bne.n	80084ce <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80084be:	4b41      	ldr	r3, [pc, #260]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80084c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084c4:	4a3f      	ldr	r2, [pc, #252]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80084c6:	f023 0304 	bic.w	r3, r3, #4
 80084ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80084ce:	4b3d      	ldr	r3, [pc, #244]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d121      	bne.n	800851e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e112      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d107      	bne.n	80084f6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084e6:	4b37      	ldr	r3, [pc, #220]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d115      	bne.n	800851e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e106      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d107      	bne.n	800850e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80084fe:	4b31      	ldr	r3, [pc, #196]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 0304 	and.w	r3, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e0fa      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850e:	4b2d      	ldr	r3, [pc, #180]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e0f2      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800851e:	4b29      	ldr	r3, [pc, #164]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008520:	69db      	ldr	r3, [r3, #28]
 8008522:	f023 0203 	bic.w	r2, r3, #3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4926      	ldr	r1, [pc, #152]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 800852c:	4313      	orrs	r3, r2
 800852e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008530:	f7fa febc 	bl	80032ac <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2b03      	cmp	r3, #3
 800853c:	d112      	bne.n	8008564 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800853e:	e00a      	b.n	8008556 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008540:	f7fa feb4 	bl	80032ac <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800854e:	4293      	cmp	r3, r2
 8008550:	d901      	bls.n	8008556 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e0d6      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008556:	4b1b      	ldr	r3, [pc, #108]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f003 030c 	and.w	r3, r3, #12
 800855e:	2b0c      	cmp	r3, #12
 8008560:	d1ee      	bne.n	8008540 <HAL_RCC_ClockConfig+0x204>
 8008562:	e044      	b.n	80085ee <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d112      	bne.n	8008592 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800856c:	e00a      	b.n	8008584 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800856e:	f7fa fe9d 	bl	80032ac <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800857c:	4293      	cmp	r3, r2
 800857e:	d901      	bls.n	8008584 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e0bf      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008584:	4b0f      	ldr	r3, [pc, #60]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f003 030c 	and.w	r3, r3, #12
 800858c:	2b08      	cmp	r3, #8
 800858e:	d1ee      	bne.n	800856e <HAL_RCC_ClockConfig+0x232>
 8008590:	e02d      	b.n	80085ee <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d123      	bne.n	80085e2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800859a:	e00a      	b.n	80085b2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800859c:	f7fa fe86 	bl	80032ac <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e0a8      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80085b2:	4b04      	ldr	r3, [pc, #16]	@ (80085c4 <HAL_RCC_ClockConfig+0x288>)
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f003 030c 	and.w	r3, r3, #12
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1ee      	bne.n	800859c <HAL_RCC_ClockConfig+0x260>
 80085be:	e016      	b.n	80085ee <HAL_RCC_ClockConfig+0x2b2>
 80085c0:	40022000 	.word	0x40022000
 80085c4:	46020c00 	.word	0x46020c00
 80085c8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085cc:	f7fa fe6e 	bl	80032ac <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085da:	4293      	cmp	r3, r2
 80085dc:	d901      	bls.n	80085e2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e090      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80085e2:	4b4a      	ldr	r3, [pc, #296]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f003 030c 	and.w	r3, r3, #12
 80085ea:	2b04      	cmp	r3, #4
 80085ec:	d1ee      	bne.n	80085cc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	689a      	ldr	r2, [r3, #8]
 80085fe:	4b43      	ldr	r3, [pc, #268]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f003 030f 	and.w	r3, r3, #15
 8008606:	429a      	cmp	r2, r3
 8008608:	d208      	bcs.n	800861c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800860a:	4b40      	ldr	r3, [pc, #256]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	f023 020f 	bic.w	r2, r3, #15
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	493d      	ldr	r1, [pc, #244]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 8008618:	4313      	orrs	r3, r2
 800861a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800861c:	4b3c      	ldr	r3, [pc, #240]	@ (8008710 <HAL_RCC_ClockConfig+0x3d4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d210      	bcs.n	800864c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862a:	4b39      	ldr	r3, [pc, #228]	@ (8008710 <HAL_RCC_ClockConfig+0x3d4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f023 020f 	bic.w	r2, r3, #15
 8008632:	4937      	ldr	r1, [pc, #220]	@ (8008710 <HAL_RCC_ClockConfig+0x3d4>)
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	4313      	orrs	r3, r2
 8008638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800863a:	4b35      	ldr	r3, [pc, #212]	@ (8008710 <HAL_RCC_ClockConfig+0x3d4>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d001      	beq.n	800864c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e05b      	b.n	8008704 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	4b2b      	ldr	r3, [pc, #172]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008664:	429a      	cmp	r2, r3
 8008666:	d208      	bcs.n	800867a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008668:	4b28      	ldr	r3, [pc, #160]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	4925      	ldr	r1, [pc, #148]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 8008676:	4313      	orrs	r3, r2
 8008678:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0308 	and.w	r3, r3, #8
 8008682:	2b00      	cmp	r3, #0
 8008684:	d012      	beq.n	80086ac <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691a      	ldr	r2, [r3, #16]
 800868a:	4b20      	ldr	r3, [pc, #128]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	091b      	lsrs	r3, r3, #4
 8008690:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008694:	429a      	cmp	r2, r3
 8008696:	d209      	bcs.n	80086ac <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008698:	4b1c      	ldr	r3, [pc, #112]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	4919      	ldr	r1, [pc, #100]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d010      	beq.n	80086da <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695a      	ldr	r2, [r3, #20]
 80086bc:	4b13      	ldr	r3, [pc, #76]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80086be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d208      	bcs.n	80086da <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80086c8:	4b10      	ldr	r3, [pc, #64]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80086ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	490d      	ldr	r1, [pc, #52]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80086da:	f000 f859 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b0a      	ldr	r3, [pc, #40]	@ (800870c <HAL_RCC_ClockConfig+0x3d0>)
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	490a      	ldr	r1, [pc, #40]	@ (8008714 <HAL_RCC_ClockConfig+0x3d8>)
 80086ea:	5ccb      	ldrb	r3, [r1, r3]
 80086ec:	fa22 f303 	lsr.w	r3, r2, r3
 80086f0:	4a09      	ldr	r2, [pc, #36]	@ (8008718 <HAL_RCC_ClockConfig+0x3dc>)
 80086f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086f4:	4b09      	ldr	r3, [pc, #36]	@ (800871c <HAL_RCC_ClockConfig+0x3e0>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fa fc6d 	bl	8002fd8 <HAL_InitTick>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]

  return status;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	46020c00 	.word	0x46020c00
 8008710:	40022000 	.word	0x40022000
 8008714:	0800ef28 	.word	0x0800ef28
 8008718:	20000000 	.word	0x20000000
 800871c:	20000004 	.word	0x20000004

08008720 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	@ 0x28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 800872c:	4b16      	ldr	r3, [pc, #88]	@ (8008788 <HAL_RCC_MCOConfig+0x68>)
 800872e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008732:	4a15      	ldr	r2, [pc, #84]	@ (8008788 <HAL_RCC_MCOConfig+0x68>)
 8008734:	f043 0301 	orr.w	r3, r3, #1
 8008738:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800873c:	4b12      	ldr	r3, [pc, #72]	@ (8008788 <HAL_RCC_MCOConfig+0x68>)
 800873e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	613b      	str	r3, [r7, #16]
 8008748:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 800874a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800874e:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8008750:	2302      	movs	r3, #2
 8008752:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008754:	2302      	movs	r3, #2
 8008756:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8008760:	f107 0314 	add.w	r3, r7, #20
 8008764:	4619      	mov	r1, r3
 8008766:	4809      	ldr	r0, [pc, #36]	@ (800878c <HAL_RCC_MCOConfig+0x6c>)
 8008768:	f7fc fff6 	bl	8005758 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 800876c:	4b06      	ldr	r3, [pc, #24]	@ (8008788 <HAL_RCC_MCOConfig+0x68>)
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008774:	68b9      	ldr	r1, [r7, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	430b      	orrs	r3, r1
 800877a:	4903      	ldr	r1, [pc, #12]	@ (8008788 <HAL_RCC_MCOConfig+0x68>)
 800877c:	4313      	orrs	r3, r2
 800877e:	61cb      	str	r3, [r1, #28]
}
 8008780:	bf00      	nop
 8008782:	3728      	adds	r7, #40	@ 0x28
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}
 8008788:	46020c00 	.word	0x46020c00
 800878c:	42020000 	.word	0x42020000

08008790 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008790:	b480      	push	{r7}
 8008792:	b08b      	sub	sp, #44	@ 0x2c
 8008794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800879e:	4b78      	ldr	r3, [pc, #480]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	f003 030c 	and.w	r3, r3, #12
 80087a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087a8:	4b75      	ldr	r3, [pc, #468]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d005      	beq.n	80087c4 <HAL_RCC_GetSysClockFreq+0x34>
 80087b8:	69bb      	ldr	r3, [r7, #24]
 80087ba:	2b0c      	cmp	r3, #12
 80087bc:	d121      	bne.n	8008802 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d11e      	bne.n	8008802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80087c4:	4b6e      	ldr	r3, [pc, #440]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d107      	bne.n	80087e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80087d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087d6:	0b1b      	lsrs	r3, r3, #12
 80087d8:	f003 030f 	and.w	r3, r3, #15
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80087de:	e005      	b.n	80087ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80087e0:	4b67      	ldr	r3, [pc, #412]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	0f1b      	lsrs	r3, r3, #28
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80087ec:	4a65      	ldr	r2, [pc, #404]	@ (8008984 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d110      	bne.n	800881e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008800:	e00d      	b.n	800881e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008802:	4b5f      	ldr	r3, [pc, #380]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 030c 	and.w	r3, r3, #12
 800880a:	2b04      	cmp	r3, #4
 800880c:	d102      	bne.n	8008814 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800880e:	4b5e      	ldr	r3, [pc, #376]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008810:	623b      	str	r3, [r7, #32]
 8008812:	e004      	b.n	800881e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	2b08      	cmp	r3, #8
 8008818:	d101      	bne.n	800881e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800881a:	4b5b      	ldr	r3, [pc, #364]	@ (8008988 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800881c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b0c      	cmp	r3, #12
 8008822:	f040 80a5 	bne.w	8008970 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008826:	4b56      	ldr	r3, [pc, #344]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800882a:	f003 0303 	and.w	r3, r3, #3
 800882e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008830:	4b53      	ldr	r3, [pc, #332]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	f003 030f 	and.w	r3, r3, #15
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800883e:	4b50      	ldr	r3, [pc, #320]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800884a:	4b4d      	ldr	r3, [pc, #308]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800884c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	fb02 f303 	mul.w	r3, r2, r3
 800885a:	ee07 3a90 	vmov	s15, r3
 800885e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008862:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d003      	beq.n	8008874 <HAL_RCC_GetSysClockFreq+0xe4>
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b03      	cmp	r3, #3
 8008870:	d022      	beq.n	80088b8 <HAL_RCC_GetSysClockFreq+0x128>
 8008872:	e043      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800898c <HAL_RCC_GetSysClockFreq+0x1fc>
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b3e      	ldr	r3, [pc, #248]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008896:	ed97 6a01 	vldr	s12, [r7, #4]
 800889a:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008990 <HAL_RCC_GetSysClockFreq+0x200>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b6:	e046      	b.n	8008946 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800898c <HAL_RCC_GetSysClockFreq+0x1fc>
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ca:	4b2d      	ldr	r3, [pc, #180]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80088cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80088da:	ed97 6a01 	vldr	s12, [r7, #4]
 80088de:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008990 <HAL_RCC_GetSysClockFreq+0x200>
 80088e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80088ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088fa:	e024      	b.n	8008946 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	ee07 3a90 	vmov	s15, r3
 800890c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008914:	4b1a      	ldr	r3, [pc, #104]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008924:	ed97 6a01 	vldr	s12, [r7, #4]
 8008928:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008990 <HAL_RCC_GetSysClockFreq+0x200>
 800892c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008930:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008938:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800893c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008940:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008944:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008946:	4b0e      	ldr	r3, [pc, #56]	@ (8008980 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800894a:	0e1b      	lsrs	r3, r3, #24
 800894c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008950:	3301      	adds	r3, #1
 8008952:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	ee07 3a90 	vmov	s15, r3
 800895a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800895e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800896a:	ee17 3a90 	vmov	r3, s15
 800896e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008970:	6a3b      	ldr	r3, [r7, #32]
}
 8008972:	4618      	mov	r0, r3
 8008974:	372c      	adds	r7, #44	@ 0x2c
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	46020c00 	.word	0x46020c00
 8008984:	0800ef40 	.word	0x0800ef40
 8008988:	00f42400 	.word	0x00f42400
 800898c:	4b742400 	.word	0x4b742400
 8008990:	46000000 	.word	0x46000000

08008994 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008998:	f7ff fefa 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800899c:	4602      	mov	r2, r0
 800899e:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <HAL_RCC_GetHCLKFreq+0x28>)
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f003 030f 	and.w	r3, r3, #15
 80089a6:	4906      	ldr	r1, [pc, #24]	@ (80089c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80089a8:	5ccb      	ldrb	r3, [r1, r3]
 80089aa:	fa22 f303 	lsr.w	r3, r2, r3
 80089ae:	4a05      	ldr	r2, [pc, #20]	@ (80089c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80089b0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80089b2:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80089b4:	681b      	ldr	r3, [r3, #0]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	46020c00 	.word	0x46020c00
 80089c0:	0800ef28 	.word	0x0800ef28
 80089c4:	20000000 	.word	0x20000000

080089c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80089cc:	f7ff ffe2 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089d0:	4602      	mov	r2, r0
 80089d2:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	091b      	lsrs	r3, r3, #4
 80089d8:	f003 0307 	and.w	r3, r3, #7
 80089dc:	4903      	ldr	r1, [pc, #12]	@ (80089ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80089de:	5ccb      	ldrb	r3, [r1, r3]
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	46020c00 	.word	0x46020c00
 80089ec:	0800ef38 	.word	0x0800ef38

080089f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80089f4:	f7ff ffce 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089f8:	4602      	mov	r2, r0
 80089fa:	4b05      	ldr	r3, [pc, #20]	@ (8008a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	4903      	ldr	r1, [pc, #12]	@ (8008a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a06:	5ccb      	ldrb	r3, [r1, r3]
 8008a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	46020c00 	.word	0x46020c00
 8008a14:	0800ef38 	.word	0x0800ef38

08008a18 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008a1c:	f7ff ffba 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 8008a20:	4602      	mov	r2, r0
 8008a22:	4b05      	ldr	r3, [pc, #20]	@ (8008a38 <HAL_RCC_GetPCLK3Freq+0x20>)
 8008a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a26:	091b      	lsrs	r3, r3, #4
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	4903      	ldr	r1, [pc, #12]	@ (8008a3c <HAL_RCC_GetPCLK3Freq+0x24>)
 8008a2e:	5ccb      	ldrb	r3, [r1, r3]
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	46020c00 	.word	0x46020c00
 8008a3c:	0800ef38 	.word	0x0800ef38

08008a40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	221f      	movs	r2, #31
 8008a4e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008a50:	4b15      	ldr	r3, [pc, #84]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x68>)
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f003 0203 	and.w	r2, r3, #3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008a5c:	4b12      	ldr	r3, [pc, #72]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x68>)
 8008a5e:	6a1b      	ldr	r3, [r3, #32]
 8008a60:	f003 020f 	and.w	r2, r3, #15
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008a68:	4b0f      	ldr	r3, [pc, #60]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x68>)
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008a74:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x68>)
 8008a76:	6a1b      	ldr	r3, [r3, #32]
 8008a78:	091b      	lsrs	r3, r3, #4
 8008a7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008a82:	4b09      	ldr	r3, [pc, #36]	@ (8008aa8 <HAL_RCC_GetClockConfig+0x68>)
 8008a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a86:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008a8e:	4b07      	ldr	r3, [pc, #28]	@ (8008aac <HAL_RCC_GetClockConfig+0x6c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 020f 	and.w	r2, r3, #15
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	601a      	str	r2, [r3, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	46020c00 	.word	0x46020c00
 8008aac:	40022000 	.word	0x40022000

08008ab0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008ac6:	f7fe fccf 	bl	8007468 <HAL_PWREx_GetVoltageRange>
 8008aca:	6178      	str	r0, [r7, #20]
 8008acc:	e019      	b.n	8008b02 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ace:	4b39      	ldr	r3, [pc, #228]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad4:	4a37      	ldr	r2, [pc, #220]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ad6:	f043 0304 	orr.w	r3, r3, #4
 8008ada:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008ade:	4b35      	ldr	r3, [pc, #212]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008aec:	f7fe fcbc 	bl	8007468 <HAL_PWREx_GetVoltageRange>
 8008af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008af2:	4b30      	ldr	r3, [pc, #192]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008af8:	4a2e      	ldr	r2, [pc, #184]	@ (8008bb4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008afa:	f023 0304 	bic.w	r3, r3, #4
 8008afe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b08:	d003      	beq.n	8008b12 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b10:	d109      	bne.n	8008b26 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b18:	d202      	bcs.n	8008b20 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008b1e:	e033      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008b20:	2300      	movs	r3, #0
 8008b22:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008b24:	e030      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b2c:	d208      	bcs.n	8008b40 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b34:	d102      	bne.n	8008b3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008b36:	2303      	movs	r3, #3
 8008b38:	613b      	str	r3, [r7, #16]
 8008b3a:	e025      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e035      	b.n	8008bac <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b46:	d90f      	bls.n	8008b68 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d109      	bne.n	8008b62 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b54:	d902      	bls.n	8008b5c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	e015      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	e012      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008b62:	2300      	movs	r3, #0
 8008b64:	613b      	str	r3, [r7, #16]
 8008b66:	e00f      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b6e:	d109      	bne.n	8008b84 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b76:	d102      	bne.n	8008b7e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008b78:	2301      	movs	r3, #1
 8008b7a:	613b      	str	r3, [r7, #16]
 8008b7c:	e004      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008b7e:	2302      	movs	r3, #2
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	e001      	b.n	8008b88 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008b84:	2301      	movs	r3, #1
 8008b86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008b88:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f023 020f 	bic.w	r2, r3, #15
 8008b90:	4909      	ldr	r1, [pc, #36]	@ (8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008b98:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d001      	beq.n	8008baa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	46020c00 	.word	0x46020c00
 8008bb8:	40022000 	.word	0x40022000

08008bbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc0:	b0c8      	sub	sp, #288	@ 0x120
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	f002 0401 	and.w	r4, r2, #1
 8008be0:	2500      	movs	r5, #0
 8008be2:	ea54 0305 	orrs.w	r3, r4, r5
 8008be6:	d00b      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008be8:	4bd5      	ldr	r3, [pc, #852]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008bee:	f023 0103 	bic.w	r1, r3, #3
 8008bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf8:	4ad1      	ldr	r2, [pc, #836]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008bfa:	430b      	orrs	r3, r1
 8008bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c08:	f002 0802 	and.w	r8, r2, #2
 8008c0c:	f04f 0900 	mov.w	r9, #0
 8008c10:	ea58 0309 	orrs.w	r3, r8, r9
 8008c14:	d00b      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008c16:	4bca      	ldr	r3, [pc, #808]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c1c:	f023 010c 	bic.w	r1, r3, #12
 8008c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c26:	4ac6      	ldr	r2, [pc, #792]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c28:	430b      	orrs	r3, r1
 8008c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c36:	f002 0a04 	and.w	sl, r2, #4
 8008c3a:	f04f 0b00 	mov.w	fp, #0
 8008c3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c42:	d00b      	beq.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008c44:	4bbe      	ldr	r3, [pc, #760]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c4a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c54:	4aba      	ldr	r2, [pc, #744]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c56:	430b      	orrs	r3, r1
 8008c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c64:	f002 0308 	and.w	r3, r2, #8
 8008c68:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008c72:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008c76:	460b      	mov	r3, r1
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	d00b      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008c7c:	4bb0      	ldr	r3, [pc, #704]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008c82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c8c:	4aac      	ldr	r2, [pc, #688]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f002 0310 	and.w	r3, r2, #16
 8008ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008caa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	d00b      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008cb4:	4ba2      	ldr	r3, [pc, #648]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008cbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cc4:	4a9e      	ldr	r2, [pc, #632]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cc6:	430b      	orrs	r3, r1
 8008cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ccc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008cd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008cdc:	2300      	movs	r3, #0
 8008cde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008ce2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8008cec:	4b94      	ldr	r3, [pc, #592]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cf2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cfc:	4a90      	ldr	r2, [pc, #576]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f002 0320 	and.w	r3, r2, #32
 8008d10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d14:	2300      	movs	r3, #0
 8008d16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d1a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4313      	orrs	r3, r2
 8008d22:	d00b      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008d24:	4b86      	ldr	r3, [pc, #536]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d2a:	f023 0107 	bic.w	r1, r3, #7
 8008d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d34:	4a82      	ldr	r2, [pc, #520]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d36:	430b      	orrs	r3, r1
 8008d38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d52:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	d00b      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008d5c:	4b78      	ldr	r3, [pc, #480]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d62:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6c:	4a74      	ldr	r2, [pc, #464]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d6e:	430b      	orrs	r3, r1
 8008d70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d84:	2300      	movs	r3, #0
 8008d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4313      	orrs	r3, r2
 8008d92:	d00b      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008d94:	4b6a      	ldr	r3, [pc, #424]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da4:	4a66      	ldr	r2, [pc, #408]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008da6:	430b      	orrs	r3, r1
 8008da8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008db8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008dc2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	d00b      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ddc:	4a58      	ldr	r2, [pc, #352]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008dde:	430b      	orrs	r3, r1
 8008de0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008de4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008df0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008df4:	2300      	movs	r3, #0
 8008df6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008dfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008dfe:	460b      	mov	r3, r1
 8008e00:	4313      	orrs	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008e04:	4b4e      	ldr	r3, [pc, #312]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e0a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e14:	4a4a      	ldr	r2, [pc, #296]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e16:	430b      	orrs	r3, r1
 8008e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8008e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008e28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e32:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	d00b      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8008e3c:	4b40      	ldr	r3, [pc, #256]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e42:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8008e46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008e60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e6a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4313      	orrs	r3, r2
 8008e72:	d00c      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8008e74:	4b32      	ldr	r3, [pc, #200]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e86:	4a2e      	ldr	r2, [pc, #184]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ea4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	d00c      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008eae:	4b24      	ldr	r3, [pc, #144]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008eb4:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008ec2:	430b      	orrs	r3, r1
 8008ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ede:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d00c      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008ee8:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eee:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008efa:	4a11      	ldr	r2, [pc, #68]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008efc:	430b      	orrs	r3, r1
 8008efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008f18:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	d010      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f34:	4a02      	ldr	r2, [pc, #8]	@ (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8008f36:	430b      	orrs	r3, r1
 8008f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008f3c:	e002      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8008f3e:	bf00      	nop
 8008f40:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f54:	2300      	movs	r3, #0
 8008f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f5a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008f5e:	460b      	mov	r3, r1
 8008f60:	4313      	orrs	r3, r2
 8008f62:	d04c      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f6c:	2b80      	cmp	r3, #128	@ 0x80
 8008f6e:	d02d      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008f70:	2b80      	cmp	r3, #128	@ 0x80
 8008f72:	d827      	bhi.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008f74:	2b60      	cmp	r3, #96	@ 0x60
 8008f76:	d02b      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008f78:	2b60      	cmp	r3, #96	@ 0x60
 8008f7a:	d823      	bhi.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008f7c:	2b40      	cmp	r3, #64	@ 0x40
 8008f7e:	d006      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8008f80:	2b40      	cmp	r3, #64	@ 0x40
 8008f82:	d81f      	bhi.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d009      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008f88:	2b20      	cmp	r3, #32
 8008f8a:	d011      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008f8c:	e01a      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f8e:	4bc0      	ldr	r3, [pc, #768]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f92:	4abf      	ldr	r2, [pc, #764]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f98:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008f9a:	e01a      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f002 fce8 	bl	800b978 <RCCEx_PLL2_Config>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008fae:	e010      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fb4:	332c      	adds	r3, #44	@ 0x2c
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 fd76 	bl	800baa8 <RCCEx_PLL3_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008fc2:	e006      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8008fca:	e002      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008fcc:	bf00      	nop
 8008fce:	e000      	b.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8008fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10d      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8008fda:	4bad      	ldr	r3, [pc, #692]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008fdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fe0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8008fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fec:	4aa8      	ldr	r2, [pc, #672]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008ff4:	e003      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff6:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8008ffa:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009006:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800900a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800900e:	2300      	movs	r3, #0
 8009010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009014:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009018:	460b      	mov	r3, r1
 800901a:	4313      	orrs	r3, r2
 800901c:	d053      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800901e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800902a:	d033      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 800902c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009030:	d82c      	bhi.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009036:	d02f      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8009038:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800903c:	d826      	bhi.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800903e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009042:	d008      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8009044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009048:	d820      	bhi.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00a      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800904e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009052:	d011      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009054:	e01a      	b.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009056:	4b8e      	ldr	r3, [pc, #568]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905a:	4a8d      	ldr	r2, [pc, #564]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800905c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009060:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009062:	e01a      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009064:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009068:	3308      	adds	r3, #8
 800906a:	4618      	mov	r0, r3
 800906c:	f002 fc84 	bl	800b978 <RCCEx_PLL2_Config>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009076:	e010      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009078:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800907c:	332c      	adds	r3, #44	@ 0x2c
 800907e:	4618      	mov	r0, r3
 8009080:	f002 fd12 	bl	800baa8 <RCCEx_PLL3_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800908a:	e006      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009092:	e002      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009094:	bf00      	nop
 8009096:	e000      	b.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800909a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10d      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80090a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80090a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090a8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80090ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090b4:	4a76      	ldr	r2, [pc, #472]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80090b6:	430b      	orrs	r3, r1
 80090b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80090bc:	e003      	b.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090be:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80090c2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80090c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80090d6:	2300      	movs	r3, #0
 80090d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80090e0:	460b      	mov	r3, r1
 80090e2:	4313      	orrs	r3, r2
 80090e4:	d046      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80090e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090ee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090f2:	d028      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80090f4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090f8:	d821      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
 80090fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090fe:	d022      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009104:	d81b      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009106:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800910a:	d01c      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 800910c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009110:	d815      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009116:	d008      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8009118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800911c:	d80f      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800911e:	2b00      	cmp	r3, #0
 8009120:	d011      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009126:	d00e      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8009128:	e009      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800912a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912e:	3308      	adds	r3, #8
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fc21 	bl	800b978 <RCCEx_PLL2_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800913c:	e004      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 8009146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009148:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10d      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009150:	4b4f      	ldr	r3, [pc, #316]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009152:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009156:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800915a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009162:	4a4b      	ldr	r2, [pc, #300]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009164:	430b      	orrs	r3, r1
 8009166:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009170:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8009174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009180:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800918a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800918e:	460b      	mov	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	d03f      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8009194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009198:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800919c:	2b04      	cmp	r3, #4
 800919e:	d81e      	bhi.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x622>
 80091a0:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091e7 	.word	0x080091e7
 80091ac:	080091bd 	.word	0x080091bd
 80091b0:	080091cb 	.word	0x080091cb
 80091b4:	080091e7 	.word	0x080091e7
 80091b8:	080091e7 	.word	0x080091e7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091bc:	4b34      	ldr	r3, [pc, #208]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c0:	4a33      	ldr	r2, [pc, #204]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091c6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80091c8:	e00e      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091ce:	332c      	adds	r3, #44	@ 0x2c
 80091d0:	4618      	mov	r0, r3
 80091d2:	f002 fc69 	bl	800baa8 <RCCEx_PLL3_Config>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80091dc:	e004      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80091e4:	e000      	b.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 80091e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80091e8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10d      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80091f0:	4b27      	ldr	r3, [pc, #156]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80091f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80091f6:	f023 0107 	bic.w	r1, r3, #7
 80091fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009202:	4a23      	ldr	r2, [pc, #140]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009204:	430b      	orrs	r3, r1
 8009206:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800920a:	e003      	b.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009210:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8009214:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009222:	2300      	movs	r3, #0
 8009224:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009226:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800922a:	460b      	mov	r3, r1
 800922c:	4313      	orrs	r3, r2
 800922e:	d04c      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009238:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800923c:	d02a      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800923e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009242:	d821      	bhi.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009244:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009248:	d026      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 800924a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800924e:	d81b      	bhi.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009254:	d00e      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800925a:	d815      	bhi.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01d      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009264:	d110      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009266:	4b0a      	ldr	r3, [pc, #40]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926a:	4a09      	ldr	r2, [pc, #36]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800926c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009270:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009272:	e014      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009274:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009278:	332c      	adds	r3, #44	@ 0x2c
 800927a:	4618      	mov	r0, r3
 800927c:	f002 fc14 	bl	800baa8 <RCCEx_PLL3_Config>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009286:	e00a      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800928e:	e006      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009290:	46020c00 	.word	0x46020c00
        break;
 8009294:	bf00      	nop
 8009296:	e002      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009298:	bf00      	nop
 800929a:	e000      	b.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 800929c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800929e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10d      	bne.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80092a6:	4baf      	ldr	r3, [pc, #700]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80092a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092b8:	4aaa      	ldr	r2, [pc, #680]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80092ba:	430b      	orrs	r3, r1
 80092bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80092c0:	e003      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80092c6:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80092ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80092d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80092d8:	2300      	movs	r3, #0
 80092da:	677b      	str	r3, [r7, #116]	@ 0x74
 80092dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80092e0:	460b      	mov	r3, r1
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f000 80b5 	beq.w	8009452 <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092ee:	4b9d      	ldr	r3, [pc, #628]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80092f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d113      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092fc:	4b99      	ldr	r3, [pc, #612]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80092fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009302:	4a98      	ldr	r2, [pc, #608]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009304:	f043 0304 	orr.w	r3, r3, #4
 8009308:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800930c:	4b95      	ldr	r3, [pc, #596]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800930e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800931a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009324:	4b90      	ldr	r3, [pc, #576]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009328:	4a8f      	ldr	r2, [pc, #572]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800932a:	f043 0301 	orr.w	r3, r3, #1
 800932e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009330:	f7f9 ffbc 	bl	80032ac <HAL_GetTick>
 8009334:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009338:	e00b      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800933a:	f7f9 ffb7 	bl	80032ac <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	2b02      	cmp	r3, #2
 8009348:	d903      	bls.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 800934a:	2303      	movs	r3, #3
 800934c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009350:	e005      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009352:	4b85      	ldr	r3, [pc, #532]	@ (8009568 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0ed      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 800935e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009362:	2b00      	cmp	r3, #0
 8009364:	d165      	bne.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009366:	4b7f      	ldr	r3, [pc, #508]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800936c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009370:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009374:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009378:	2b00      	cmp	r3, #0
 800937a:	d023      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 800937c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009380:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009384:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009388:	4293      	cmp	r3, r2
 800938a:	d01b      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800938c:	4b75      	ldr	r3, [pc, #468]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800938e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009396:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800939a:	4b72      	ldr	r3, [pc, #456]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800939c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093a0:	4a70      	ldr	r2, [pc, #448]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093aa:	4b6e      	ldr	r3, [pc, #440]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093b0:	4a6c      	ldr	r2, [pc, #432]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093ba:	4a6a      	ldr	r2, [pc, #424]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80093c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d019      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093d0:	f7f9 ff6c 	bl	80032ac <HAL_GetTick>
 80093d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093d8:	e00d      	b.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093da:	f7f9 ff67 	bl	80032ac <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e4:	1ad2      	subs	r2, r2, r3
 80093e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d903      	bls.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 80093ee:	2303      	movs	r3, #3
 80093f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 80093f4:	e006      	b.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093f6:	4b5b      	ldr	r3, [pc, #364]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80093f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ea      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009404:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10d      	bne.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800940c:	4b55      	ldr	r3, [pc, #340]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800940e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009412:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009416:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800941a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800941e:	4a51      	ldr	r2, [pc, #324]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009420:	430b      	orrs	r3, r1
 8009422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009426:	e008      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009428:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800942c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8009430:	e003      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009432:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009436:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800943a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 800943e:	2b01      	cmp	r3, #1
 8009440:	d107      	bne.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009442:	4b48      	ldr	r3, [pc, #288]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009448:	4a46      	ldr	r2, [pc, #280]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800944a:	f023 0304 	bic.w	r3, r3, #4
 800944e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009452:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800945e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009460:	2300      	movs	r3, #0
 8009462:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009464:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009468:	460b      	mov	r3, r1
 800946a:	4313      	orrs	r3, r2
 800946c:	d042      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800946e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009476:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800947a:	d022      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x906>
 800947c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009480:	d81b      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009482:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009486:	d011      	beq.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948c:	d815      	bhi.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800948e:	2b00      	cmp	r3, #0
 8009490:	d019      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009496:	d110      	bne.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800949c:	3308      	adds	r3, #8
 800949e:	4618      	mov	r0, r3
 80094a0:	f002 fa6a 	bl	800b978 <RCCEx_PLL2_Config>
 80094a4:	4603      	mov	r3, r0
 80094a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80094aa:	e00d      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80094b8:	e006      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80094c0:	e002      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80094c2:	bf00      	nop
 80094c4:	e000      	b.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 80094c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80094c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d10d      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80094d0:	4b24      	ldr	r3, [pc, #144]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80094da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80094e2:	4a20      	ldr	r2, [pc, #128]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80094e4:	430b      	orrs	r3, r1
 80094e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80094ea:	e003      	b.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80094f0:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009500:	663b      	str	r3, [r7, #96]	@ 0x60
 8009502:	2300      	movs	r3, #0
 8009504:	667b      	str	r3, [r7, #100]	@ 0x64
 8009506:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800950a:	460b      	mov	r3, r1
 800950c:	4313      	orrs	r3, r2
 800950e:	d031      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800951c:	d00b      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800951e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009522:	d804      	bhi.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009524:	2b00      	cmp	r3, #0
 8009526:	d008      	beq.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952c:	d007      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009534:	e004      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009536:	bf00      	nop
 8009538:	e002      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800953a:	bf00      	nop
 800953c:	e000      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 800953e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009540:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009544:	2b00      	cmp	r3, #0
 8009546:	d111      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009548:	4b06      	ldr	r3, [pc, #24]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800954a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800954e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009552:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800955a:	4a02      	ldr	r2, [pc, #8]	@ (8009564 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800955c:	430b      	orrs	r3, r1
 800955e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009562:	e007      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009564:	46020c00 	.word	0x46020c00
 8009568:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800956c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009570:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009580:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009582:	2300      	movs	r3, #0
 8009584:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009586:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800958a:	460b      	mov	r3, r1
 800958c:	4313      	orrs	r3, r2
 800958e:	d00c      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009590:	4bb2      	ldr	r3, [pc, #712]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009592:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009596:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 800959a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800959e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095a2:	4aae      	ldr	r2, [pc, #696]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095a4:	430b      	orrs	r3, r1
 80095a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80095aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80095b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095b8:	2300      	movs	r3, #0
 80095ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80095bc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80095c0:	460b      	mov	r3, r1
 80095c2:	4313      	orrs	r3, r2
 80095c4:	d019      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80095c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095d2:	d105      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095d4:	4ba1      	ldr	r3, [pc, #644]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095d8:	4aa0      	ldr	r2, [pc, #640]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095de:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80095e0:	4b9e      	ldr	r3, [pc, #632]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095e6:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80095ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80095f2:	4a9a      	ldr	r2, [pc, #616]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80095f4:	430b      	orrs	r3, r1
 80095f6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80095fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009606:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009608:	2300      	movs	r3, #0
 800960a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800960c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d00c      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009616:	4b91      	ldr	r3, [pc, #580]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800961c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009624:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009628:	4a8c      	ldr	r2, [pc, #560]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800962a:	430b      	orrs	r3, r1
 800962c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009630:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009638:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800963c:	643b      	str	r3, [r7, #64]	@ 0x40
 800963e:	2300      	movs	r3, #0
 8009640:	647b      	str	r3, [r7, #68]	@ 0x44
 8009642:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009646:	460b      	mov	r3, r1
 8009648:	4313      	orrs	r3, r2
 800964a:	d00c      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800964c:	4b83      	ldr	r3, [pc, #524]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800964e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009652:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800965a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800965e:	4a7f      	ldr	r2, [pc, #508]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009660:	430b      	orrs	r3, r1
 8009662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800966a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966e:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009674:	2300      	movs	r3, #0
 8009676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009678:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800967c:	460b      	mov	r3, r1
 800967e:	4313      	orrs	r3, r2
 8009680:	d00c      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009682:	4b76      	ldr	r3, [pc, #472]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009688:	f023 0118 	bic.w	r1, r3, #24
 800968c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009690:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009694:	4a71      	ldr	r2, [pc, #452]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009696:	430b      	orrs	r3, r1
 8009698:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800969c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80096a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80096aa:	2300      	movs	r3, #0
 80096ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80096b2:	460b      	mov	r3, r1
 80096b4:	4313      	orrs	r3, r2
 80096b6:	d032      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80096b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80096c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096c4:	d105      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096c6:	4b65      	ldr	r3, [pc, #404]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ca:	4a64      	ldr	r2, [pc, #400]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096d0:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80096d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80096da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096de:	d108      	bne.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e4:	3308      	adds	r3, #8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f002 f946 	bl	800b978 <RCCEx_PLL2_Config>
 80096ec:	4603      	mov	r3, r0
 80096ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 80096f2:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10d      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80096fa:	4b58      	ldr	r3, [pc, #352]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80096fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009700:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009708:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800970c:	4a53      	ldr	r2, [pc, #332]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800970e:	430b      	orrs	r3, r1
 8009710:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009714:	e003      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009716:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800971a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 800971e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	2100      	movs	r1, #0
 8009728:	62b9      	str	r1, [r7, #40]	@ 0x28
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009730:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009734:	460b      	mov	r3, r1
 8009736:	4313      	orrs	r3, r2
 8009738:	d04a      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 800973a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800973e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009742:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009746:	d01e      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009748:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800974c:	d825      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800974e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009752:	d00e      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009758:	d81f      	bhi.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d021      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800975e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009762:	d11a      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009764:	4b3d      	ldr	r3, [pc, #244]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	4a3c      	ldr	r2, [pc, #240]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800976a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800976e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009770:	e018      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009772:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009776:	3308      	adds	r3, #8
 8009778:	4618      	mov	r0, r3
 800977a:	f002 f8fd 	bl	800b978 <RCCEx_PLL2_Config>
 800977e:	4603      	mov	r3, r0
 8009780:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009784:	e00e      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800978a:	332c      	adds	r3, #44	@ 0x2c
 800978c:	4618      	mov	r0, r3
 800978e:	f002 f98b 	bl	800baa8 <RCCEx_PLL3_Config>
 8009792:	4603      	mov	r3, r0
 8009794:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009798:	e004      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80097a0:	e000      	b.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 80097a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10d      	bne.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80097ac:	4b2b      	ldr	r3, [pc, #172]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80097b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80097be:	4927      	ldr	r1, [pc, #156]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80097c6:	e003      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80097cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80097d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80097dc:	623b      	str	r3, [r7, #32]
 80097de:	2300      	movs	r3, #0
 80097e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097e2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097e6:	460b      	mov	r3, r1
 80097e8:	4313      	orrs	r3, r2
 80097ea:	d03d      	beq.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80097ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097f8:	d00e      	beq.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80097fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097fe:	d815      	bhi.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d017      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009808:	d110      	bne.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800980a:	4b14      	ldr	r3, [pc, #80]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	4a13      	ldr	r2, [pc, #76]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009814:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009816:	e00e      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800981c:	3308      	adds	r3, #8
 800981e:	4618      	mov	r0, r3
 8009820:	f002 f8aa 	bl	800b978 <RCCEx_PLL2_Config>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800982a:	e004      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009832:	e000      	b.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009834:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009836:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800983a:	2b00      	cmp	r3, #0
 800983c:	d110      	bne.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800983e:	4b07      	ldr	r3, [pc, #28]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009844:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800984c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009850:	4902      	ldr	r1, [pc, #8]	@ (800985c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009852:	4313      	orrs	r3, r2
 8009854:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009858:	e006      	b.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800985a:	bf00      	nop
 800985c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009860:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009864:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	2300      	movs	r3, #0
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800987e:	460b      	mov	r3, r1
 8009880:	4313      	orrs	r3, r2
 8009882:	d00c      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8009884:	4b68      	ldr	r3, [pc, #416]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800988a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800988e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009892:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009896:	4964      	ldr	r1, [pc, #400]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009898:	4313      	orrs	r3, r2
 800989a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800989e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	2100      	movs	r1, #0
 80098a8:	6139      	str	r1, [r7, #16]
 80098aa:	f003 0302 	and.w	r3, r3, #2
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80098b4:	460b      	mov	r3, r1
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d036      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 80098ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00c      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80098c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098ca:	d113      	bne.n	80098f4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098d0:	3308      	adds	r3, #8
 80098d2:	4618      	mov	r0, r3
 80098d4:	f002 f850 	bl	800b978 <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80098de:	e00d      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80098e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e4:	332c      	adds	r3, #44	@ 0x2c
 80098e6:	4618      	mov	r0, r3
 80098e8:	f002 f8de 	bl	800baa8 <RCCEx_PLL3_Config>
 80098ec:	4603      	mov	r3, r0
 80098ee:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 80098f2:	e003      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80098fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098fc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10d      	bne.n	8009920 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 8009904:	4b48      	ldr	r3, [pc, #288]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800990a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800990e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009912:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8009916:	4944      	ldr	r1, [pc, #272]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009918:	4313      	orrs	r3, r2
 800991a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800991e:	e003      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009920:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009924:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800992c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009930:	2100      	movs	r1, #0
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	f003 0304 	and.w	r3, r3, #4
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800993e:	460b      	mov	r3, r1
 8009940:	4313      	orrs	r3, r2
 8009942:	d024      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 8009944:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800994c:	2b00      	cmp	r3, #0
 800994e:	d108      	bne.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009954:	332c      	adds	r3, #44	@ 0x2c
 8009956:	4618      	mov	r0, r3
 8009958:	f002 f8a6 	bl	800baa8 <RCCEx_PLL3_Config>
 800995c:	4603      	mov	r3, r0
 800995e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 8009962:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10d      	bne.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800996a:	4b2f      	ldr	r3, [pc, #188]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800996c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009970:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009974:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800997c:	492a      	ldr	r1, [pc, #168]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800997e:	4313      	orrs	r3, r2
 8009980:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009984:	e003      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009986:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800998a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800998e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009996:	2100      	movs	r1, #0
 8009998:	6039      	str	r1, [r7, #0]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	607b      	str	r3, [r7, #4]
 80099a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80099a4:	460b      	mov	r3, r1
 80099a6:	4313      	orrs	r3, r2
 80099a8:	d036      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80099aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80099b2:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80099b6:	d00d      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80099b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80099bc:	d811      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80099be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c2:	d012      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c8:	d80b      	bhi.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d00d      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80099ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d2:	d106      	bne.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80099d4:	4b14      	ldr	r3, [pc, #80]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80099d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d8:	4a13      	ldr	r2, [pc, #76]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80099da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099de:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80099e0:	e004      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80099e8:	e000      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 80099ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ec:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10d      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80099f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 80099f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80099fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a06:	4908      	ldr	r1, [pc, #32]	@ (8009a28 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009a0e:	e003      	b.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a10:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a14:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8009a18:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009a22:	46bd      	mov	sp, r7
 8009a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a28:	46020c00 	.word	0x46020c00

08009a2c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b089      	sub	sp, #36	@ 0x24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8009a34:	4ba6      	ldr	r3, [pc, #664]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009a3e:	4ba4      	ldr	r3, [pc, #656]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009a48:	4ba1      	ldr	r3, [pc, #644]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	f003 030f 	and.w	r3, r3, #15
 8009a52:	3301      	adds	r3, #1
 8009a54:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009a56:	4b9e      	ldr	r3, [pc, #632]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5a:	091b      	lsrs	r3, r3, #4
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009a62:	4b9b      	ldr	r3, [pc, #620]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a66:	08db      	lsrs	r3, r3, #3
 8009a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	fb02 f303 	mul.w	r3, r2, r3
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d062      	beq.n	8009b4a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b03      	cmp	r3, #3
 8009a88:	f200 8081 	bhi.w	8009b8e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d024      	beq.n	8009adc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	d17a      	bne.n	8009b8e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b89      	ldr	r3, [pc, #548]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8009abe:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ada:	e08f      	b.n	8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009adc:	4b7c      	ldr	r3, [pc, #496]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009ae8:	4b79      	ldr	r3, [pc, #484]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	0f1b      	lsrs	r3, r3, #28
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	e006      	b.n	8009b02 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009af4:	4b76      	ldr	r3, [pc, #472]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009afa:	041b      	lsls	r3, r3, #16
 8009afc:	0f1b      	lsrs	r3, r3, #28
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	4a76      	ldr	r2, [pc, #472]	@ (8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b08:	ee07 3a90 	vmov	s15, r3
 8009b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	ee07 3a90 	vmov	s15, r3
 8009b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	ee07 3a90 	vmov	s15, r3
 8009b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b28:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b2c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b48:	e058      	b.n	8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	ee07 3a90 	vmov	s15, r3
 8009b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b54:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b64:	ee07 3a90 	vmov	s15, r3
 8009b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b70:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b8c:	e036      	b.n	8009bfc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009b8e:	4b50      	ldr	r3, [pc, #320]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d005      	beq.n	8009ba6 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8009b9a:	4b4d      	ldr	r3, [pc, #308]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	0f1b      	lsrs	r3, r3, #28
 8009ba0:	f003 030f 	and.w	r3, r3, #15
 8009ba4:	e006      	b.n	8009bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009ba6:	4b4a      	ldr	r3, [pc, #296]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bac:	041b      	lsls	r3, r3, #16
 8009bae:	0f1b      	lsrs	r3, r3, #28
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	4a49      	ldr	r2, [pc, #292]	@ (8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	ee07 3a90 	vmov	s15, r3
 8009bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	ee07 3a90 	vmov	s15, r3
 8009bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bde:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009bfa:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009bfc:	4b34      	ldr	r3, [pc, #208]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d017      	beq.n	8009c38 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c08:	4b31      	ldr	r3, [pc, #196]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c0c:	0a5b      	lsrs	r3, r3, #9
 8009c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c12:	ee07 3a90 	vmov	s15, r3
 8009c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c2e:	ee17 2a90 	vmov	r2, s15
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009c3e:	4b24      	ldr	r3, [pc, #144]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d017      	beq.n	8009c7a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c4a:	4b21      	ldr	r3, [pc, #132]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c4e:	0c1b      	lsrs	r3, r3, #16
 8009c50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009c5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c60:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c64:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c70:	ee17 2a90 	vmov	r2, s15
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	605a      	str	r2, [r3, #4]
 8009c78:	e002      	b.n	8009c80 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009c80:	4b13      	ldr	r3, [pc, #76]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d017      	beq.n	8009cbc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009c8c:	4b10      	ldr	r3, [pc, #64]	@ (8009cd0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c90:	0e1b      	lsrs	r3, r3, #24
 8009c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009c9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ca2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ca6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cb2:	ee17 2a90 	vmov	r2, s15
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009cba:	e002      	b.n	8009cc2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	609a      	str	r2, [r3, #8]
}
 8009cc2:	bf00      	nop
 8009cc4:	3724      	adds	r7, #36	@ 0x24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
 8009cce:	bf00      	nop
 8009cd0:	46020c00 	.word	0x46020c00
 8009cd4:	4b742400 	.word	0x4b742400
 8009cd8:	46000000 	.word	0x46000000
 8009cdc:	0800ef40 	.word	0x0800ef40

08009ce0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b089      	sub	sp, #36	@ 0x24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009ce8:	4ba6      	ldr	r3, [pc, #664]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009cf2:	4ba4      	ldr	r3, [pc, #656]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009cfc:	4ba1      	ldr	r3, [pc, #644]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d00:	0a1b      	lsrs	r3, r3, #8
 8009d02:	f003 030f 	and.w	r3, r3, #15
 8009d06:	3301      	adds	r3, #1
 8009d08:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009d0a:	4b9e      	ldr	r3, [pc, #632]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0e:	091b      	lsrs	r3, r3, #4
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009d16:	4b9b      	ldr	r3, [pc, #620]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	d062      	beq.n	8009dfe <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	f200 8081 	bhi.w	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d024      	beq.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d17a      	bne.n	8009e42 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5e:	4b89      	ldr	r3, [pc, #548]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d72:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d8e:	e08f      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009d90:	4b7c      	ldr	r3, [pc, #496]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8009d9c:	4b79      	ldr	r3, [pc, #484]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	0f1b      	lsrs	r3, r3, #28
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	e006      	b.n	8009db6 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009da8:	4b76      	ldr	r3, [pc, #472]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009dae:	041b      	lsls	r3, r3, #16
 8009db0:	0f1b      	lsrs	r3, r3, #28
 8009db2:	f003 030f 	and.w	r3, r3, #15
 8009db6:	4a76      	ldr	r2, [pc, #472]	@ (8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dbc:	ee07 3a90 	vmov	s15, r3
 8009dc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	ee07 3a90 	vmov	s15, r3
 8009dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ddc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009de0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009de4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009df0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009df4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dfc:	e058      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e08:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8009e0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e10:	4b5c      	ldr	r3, [pc, #368]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e18:	ee07 3a90 	vmov	s15, r3
 8009e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e20:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009e28:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e30:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009e40:	e036      	b.n	8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009e42:	4b50      	ldr	r3, [pc, #320]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8009e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	0f1b      	lsrs	r3, r3, #28
 8009e54:	f003 030f 	and.w	r3, r3, #15
 8009e58:	e006      	b.n	8009e68 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8009e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009e60:	041b      	lsls	r3, r3, #16
 8009e62:	0f1b      	lsrs	r3, r3, #28
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	4a49      	ldr	r2, [pc, #292]	@ (8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	ee07 3a90 	vmov	s15, r3
 8009e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e92:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009f8c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009eae:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009eb0:	4b34      	ldr	r3, [pc, #208]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d017      	beq.n	8009eec <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ebc:	4b31      	ldr	r3, [pc, #196]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ec0:	0a5b      	lsrs	r3, r3, #9
 8009ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009ece:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ed2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009ed6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ee2:	ee17 2a90 	vmov	r2, s15
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	e002      	b.n	8009ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009ef2:	4b24      	ldr	r3, [pc, #144]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d017      	beq.n	8009f2e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009efe:	4b21      	ldr	r3, [pc, #132]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f02:	0c1b      	lsrs	r3, r3, #16
 8009f04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009f10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f14:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 2a90 	vmov	r2, s15
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	e002      	b.n	8009f34 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009f34:	4b13      	ldr	r3, [pc, #76]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d017      	beq.n	8009f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f40:	4b10      	ldr	r3, [pc, #64]	@ (8009f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f44:	0e1b      	lsrs	r3, r3, #24
 8009f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009f56:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f66:	ee17 2a90 	vmov	r2, s15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f6e:	e002      	b.n	8009f76 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	609a      	str	r2, [r3, #8]
}
 8009f76:	bf00      	nop
 8009f78:	3724      	adds	r7, #36	@ 0x24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	46020c00 	.word	0x46020c00
 8009f88:	4b742400 	.word	0x4b742400
 8009f8c:	46000000 	.word	0x46000000
 8009f90:	0800ef40 	.word	0x0800ef40

08009f94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	@ 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009f9c:	4ba6      	ldr	r3, [pc, #664]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fa4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009fa6:	4ba4      	ldr	r3, [pc, #656]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009faa:	f003 0303 	and.w	r3, r3, #3
 8009fae:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009fb0:	4ba1      	ldr	r3, [pc, #644]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	f003 030f 	and.w	r3, r3, #15
 8009fba:	3301      	adds	r3, #1
 8009fbc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009fbe:	4b9e      	ldr	r3, [pc, #632]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc2:	091b      	lsrs	r3, r3, #4
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009fca:	4b9b      	ldr	r3, [pc, #620]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fce:	08db      	lsrs	r3, r3, #3
 8009fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	fb02 f303 	mul.w	r3, r2, r3
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fe2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d062      	beq.n	800a0b2 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	f200 8081 	bhi.w	800a0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d024      	beq.n	800a044 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d17a      	bne.n	800a0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	ee07 3a90 	vmov	s15, r3
 800a006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a012:	4b89      	ldr	r3, [pc, #548]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a022:	ed97 6a02 	vldr	s12, [r7, #8]
 800a026:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a036:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a03e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a042:	e08f      	b.n	800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a044:	4b7c      	ldr	r3, [pc, #496]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d005      	beq.n	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a050:	4b79      	ldr	r3, [pc, #484]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	0f1b      	lsrs	r3, r3, #28
 800a056:	f003 030f 	and.w	r3, r3, #15
 800a05a:	e006      	b.n	800a06a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a05c:	4b76      	ldr	r3, [pc, #472]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a05e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a062:	041b      	lsls	r3, r3, #16
 800a064:	0f1b      	lsrs	r3, r3, #28
 800a066:	f003 030f 	and.w	r3, r3, #15
 800a06a:	4a76      	ldr	r2, [pc, #472]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a070:	ee07 3a90 	vmov	s15, r3
 800a074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	ee07 3a90 	vmov	s15, r3
 800a07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	ee07 3a90 	vmov	s15, r3
 800a08c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a090:	ed97 6a02 	vldr	s12, [r7, #8]
 800a094:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a09c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0b0:	e058      	b.n	800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	ee07 3a90 	vmov	s15, r3
 800a0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0bc:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a23c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a0c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0c4:	4b5c      	ldr	r3, [pc, #368]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0cc:	ee07 3a90 	vmov	s15, r3
 800a0d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a0d8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a0dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a0f4:	e036      	b.n	800a164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a0f6:	4b50      	ldr	r3, [pc, #320]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d005      	beq.n	800a10e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a102:	4b4d      	ldr	r3, [pc, #308]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a104:	689b      	ldr	r3, [r3, #8]
 800a106:	0f1b      	lsrs	r3, r3, #28
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	e006      	b.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a10e:	4b4a      	ldr	r3, [pc, #296]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a110:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a114:	041b      	lsls	r3, r3, #16
 800a116:	0f1b      	lsrs	r3, r3, #28
 800a118:	f003 030f 	and.w	r3, r3, #15
 800a11c:	4a49      	ldr	r2, [pc, #292]	@ (800a244 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	ee07 3a90 	vmov	s15, r3
 800a130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	ee07 3a90 	vmov	s15, r3
 800a13e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a142:	ed97 6a02 	vldr	s12, [r7, #8]
 800a146:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a240 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a14a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a14e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a156:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a162:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a164:	4b34      	ldr	r3, [pc, #208]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d017      	beq.n	800a1a0 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a170:	4b31      	ldr	r3, [pc, #196]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a174:	0a5b      	lsrs	r3, r3, #9
 800a176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a186:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a18a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a18e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a196:	ee17 2a90 	vmov	r2, s15
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a1a6:	4b24      	ldr	r3, [pc, #144]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d017      	beq.n	800a1e2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1b2:	4b21      	ldr	r3, [pc, #132]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b6:	0c1b      	lsrs	r3, r3, #16
 800a1b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1bc:	ee07 3a90 	vmov	s15, r3
 800a1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a1c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a1c8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1d8:	ee17 2a90 	vmov	r2, s15
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	605a      	str	r2, [r3, #4]
 800a1e0:	e002      	b.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a1e8:	4b13      	ldr	r3, [pc, #76]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d017      	beq.n	800a224 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a1f4:	4b10      	ldr	r3, [pc, #64]	@ (800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a1f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1f8:	0e1b      	lsrs	r3, r3, #24
 800a1fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1fe:	ee07 3a90 	vmov	s15, r3
 800a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a20a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a20e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a21a:	ee17 2a90 	vmov	r2, s15
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a222:	e002      	b.n	800a22a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
}
 800a22a:	bf00      	nop
 800a22c:	3724      	adds	r7, #36	@ 0x24
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr
 800a236:	bf00      	nop
 800a238:	46020c00 	.word	0x46020c00
 800a23c:	4b742400 	.word	0x4b742400
 800a240:	46000000 	.word	0x46000000
 800a244:	0800ef40 	.word	0x0800ef40

0800a248 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08e      	sub	sp, #56	@ 0x38
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a252:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a256:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a25a:	430b      	orrs	r3, r1
 800a25c:	d145      	bne.n	800a2ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a25e:	4ba7      	ldr	r3, [pc, #668]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a268:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a26a:	4ba4      	ldr	r3, [pc, #656]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a26c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	2b02      	cmp	r3, #2
 800a276:	d108      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a27e:	d104      	bne.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a280:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a284:	637b      	str	r3, [r7, #52]	@ 0x34
 800a286:	f001 bb5a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a28a:	4b9c      	ldr	r3, [pc, #624]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a28c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a298:	d114      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a0:	d110      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2a2:	4b96      	ldr	r3, [pc, #600]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2b0:	d103      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a2b2:	23fa      	movs	r3, #250	@ 0xfa
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2b6:	f001 bb42 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800a2ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a2be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a2c0:	f001 bb3d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a2c4:	4b8d      	ldr	r3, [pc, #564]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d8:	d103      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a2da:	4b89      	ldr	r3, [pc, #548]	@ (800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800a2dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2de:	f001 bb2e 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e6:	f001 bb2a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a2ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ee:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a2f2:	430b      	orrs	r3, r1
 800a2f4:	d151      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a2f6:	4b81      	ldr	r3, [pc, #516]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a2f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a2fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a300:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	2b80      	cmp	r3, #128	@ 0x80
 800a306:	d035      	beq.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	2b80      	cmp	r3, #128	@ 0x80
 800a30c:	d841      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2b60      	cmp	r3, #96	@ 0x60
 800a312:	d02a      	beq.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a316:	2b60      	cmp	r3, #96	@ 0x60
 800a318:	d83b      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31c:	2b40      	cmp	r3, #64	@ 0x40
 800a31e:	d009      	beq.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a322:	2b40      	cmp	r3, #64	@ 0x40
 800a324:	d835      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00c      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d012      	beq.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a332:	e02e      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7ff fb77 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a342:	f001 bafc 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a346:	f107 0318 	add.w	r3, r7, #24
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff fcc8 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a354:	f001 baf3 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a358:	f107 030c 	add.w	r3, r7, #12
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fe19 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a366:	f001 baea 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a36a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a36e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a370:	f001 bae5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a374:	4b61      	ldr	r3, [pc, #388]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a37c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a380:	d103      	bne.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a382:	4b60      	ldr	r3, [pc, #384]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a384:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a386:	f001 bada 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a38a:	2300      	movs	r3, #0
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a38e:	f001 bad6 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a396:	f001 bad2 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a39a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a3a2:	430b      	orrs	r3, r1
 800a3a4:	d158      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a3a6:	4b55      	ldr	r3, [pc, #340]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a3a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3b8:	d03b      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3c0:	d846      	bhi.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3c8:	d02e      	beq.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a3d0:	d83e      	bhi.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3d8:	d00b      	beq.n	800a3f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3e0:	d836      	bhi.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00d      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ee:	d012      	beq.n	800a416 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a3f0:	e02e      	b.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fb18 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a400:	f001 ba9d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a404:	f107 0318 	add.w	r3, r7, #24
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fc69 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a412:	f001 ba94 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a416:	f107 030c 	add.w	r3, r7, #12
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fdba 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a424:	f001 ba8b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a428:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a42e:	f001 ba86 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a432:	4b32      	ldr	r3, [pc, #200]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a43a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a43e:	d103      	bne.n	800a448 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a440:	4b30      	ldr	r3, [pc, #192]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a442:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a444:	f001 ba7b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a448:	2300      	movs	r3, #0
 800a44a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a44c:	f001 ba77 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a450:	2300      	movs	r3, #0
 800a452:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a454:	f001 ba73 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a460:	430b      	orrs	r3, r1
 800a462:	d126      	bne.n	800a4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800a464:	4b25      	ldr	r3, [pc, #148]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a46a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a46e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800a470:	4b22      	ldr	r3, [pc, #136]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a47c:	d106      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800a47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800a484:	4b1f      	ldr	r3, [pc, #124]	@ (800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800a486:	637b      	str	r3, [r7, #52]	@ 0x34
 800a488:	f001 ba59 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800a48c:	4b1b      	ldr	r3, [pc, #108]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a498:	d107      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800a49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4a0:	d103      	bne.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800a4a2:	4b19      	ldr	r3, [pc, #100]	@ (800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4a6:	f001 ba4a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ae:	f001 ba46 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a4b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4b6:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a4ba:	430b      	orrs	r3, r1
 800a4bc:	d16e      	bne.n	800a59c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a4be:	4b0f      	ldr	r3, [pc, #60]	@ (800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800a4c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4c4:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a4c8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a4d0:	d03d      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a4d8:	d85c      	bhi.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4e0:	d014      	beq.n	800a50c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4e8:	d854      	bhi.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01f      	beq.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a4f6:	d012      	beq.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a4f8:	e04c      	b.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800a4fa:	bf00      	nop
 800a4fc:	46020c00 	.word	0x46020c00
 800a500:	0007a120 	.word	0x0007a120
 800a504:	00f42400 	.word	0x00f42400
 800a508:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a50c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a510:	4618      	mov	r0, r3
 800a512:	f7ff fa8b 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a518:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a51a:	f001 ba10 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51e:	f107 0318 	add.w	r3, r7, #24
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fbdc 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a52c:	f001 ba07 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a530:	4ba7      	ldr	r3, [pc, #668]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a538:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a53c:	d103      	bne.n	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800a53e:	4ba5      	ldr	r3, [pc, #660]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a540:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a542:	f001 b9fc 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a54a:	f001 b9f8 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a54e:	4ba0      	ldr	r3, [pc, #640]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b20      	cmp	r3, #32
 800a558:	d118      	bne.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a55a:	4b9d      	ldr	r3, [pc, #628]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a566:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	0e1b      	lsrs	r3, r3, #24
 800a56c:	f003 030f 	and.w	r3, r3, #15
 800a570:	e006      	b.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800a572:	4b97      	ldr	r3, [pc, #604]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a578:	041b      	lsls	r3, r3, #16
 800a57a:	0e1b      	lsrs	r3, r3, #24
 800a57c:	f003 030f 	and.w	r3, r3, #15
 800a580:	4a95      	ldr	r2, [pc, #596]	@ (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a588:	f001 b9d9 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a590:	f001 b9d5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800a594:	2300      	movs	r3, #0
 800a596:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a598:	f001 b9d1 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a59c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5a0:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a5a4:	430b      	orrs	r3, r1
 800a5a6:	d17f      	bne.n	800a6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a5a8:	4b89      	ldr	r3, [pc, #548]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a5ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d165      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a5ba:	4b85      	ldr	r3, [pc, #532]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a5bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5c0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a5c4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a5cc:	d034      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a5d4:	d853      	bhi.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5dc:	d00b      	beq.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5e4:	d84b      	bhi.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d016      	beq.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800a5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a5f2:	d009      	beq.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800a5f4:	e043      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fa16 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a602:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a604:	f001 b99b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a608:	f107 0318 	add.w	r3, r7, #24
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fb67 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a616:	f001 b992 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a61a:	4b6d      	ldr	r3, [pc, #436]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a626:	d103      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800a628:	4b6a      	ldr	r3, [pc, #424]	@ (800a7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800a62a:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a62c:	f001 b987 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a634:	f001 b983 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a638:	4b65      	ldr	r3, [pc, #404]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b20      	cmp	r3, #32
 800a642:	d118      	bne.n	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a644:	4b62      	ldr	r3, [pc, #392]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800a650:	4b5f      	ldr	r3, [pc, #380]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	0e1b      	lsrs	r3, r3, #24
 800a656:	f003 030f 	and.w	r3, r3, #15
 800a65a:	e006      	b.n	800a66a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800a65c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a65e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a662:	041b      	lsls	r3, r3, #16
 800a664:	0e1b      	lsrs	r3, r3, #24
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	4a5b      	ldr	r2, [pc, #364]	@ (800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800a66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a670:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a672:	f001 b964 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a67a:	f001 b960 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800a67e:	2300      	movs	r3, #0
 800a680:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a682:	f001 b95c 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a68c:	d108      	bne.n	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a68e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff f9ca 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69c:	f001 b94f 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a4:	f001 b94b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6ac:	1e51      	subs	r1, r2, #1
 800a6ae:	430b      	orrs	r3, r1
 800a6b0:	d136      	bne.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a6b2:	4b47      	ldr	r3, [pc, #284]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d104      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a6c4:	f7fe f994 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 800a6c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6ca:	f001 b938 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d104      	bne.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6d4:	f7fe f85c 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a6d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6da:	f001 b930 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a6de:	4b3c      	ldr	r3, [pc, #240]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6ea:	d106      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d103      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800a6f2:	4b3a      	ldr	r3, [pc, #232]	@ (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a6f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f6:	f001 b922 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a6fa:	4b35      	ldr	r3, [pc, #212]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a6fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a700:	f003 0302 	and.w	r3, r3, #2
 800a704:	2b02      	cmp	r3, #2
 800a706:	d107      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70a:	2b03      	cmp	r3, #3
 800a70c:	d104      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800a70e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a712:	637b      	str	r3, [r7, #52]	@ 0x34
 800a714:	f001 b913 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71c:	f001 b90f 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a724:	1e91      	subs	r1, r2, #2
 800a726:	430b      	orrs	r3, r1
 800a728:	d136      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a72a:	4b29      	ldr	r3, [pc, #164]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a72c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a730:	f003 030c 	and.w	r3, r3, #12
 800a734:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d104      	bne.n	800a746 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a73c:	f7fe f944 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a740:	6378      	str	r0, [r7, #52]	@ 0x34
 800a742:	f001 b8fc 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a748:	2b04      	cmp	r3, #4
 800a74a:	d104      	bne.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a74c:	f7fe f820 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a750:	6378      	str	r0, [r7, #52]	@ 0x34
 800a752:	f001 b8f4 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a756:	4b1e      	ldr	r3, [pc, #120]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a75e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a762:	d106      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a766:	2b08      	cmp	r3, #8
 800a768:	d103      	bne.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800a76a:	4b1c      	ldr	r3, [pc, #112]	@ (800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a76e:	f001 b8e6 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a772:	4b17      	ldr	r3, [pc, #92]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d107      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800a780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a782:	2b0c      	cmp	r3, #12
 800a784:	d104      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800a786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a78a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a78c:	f001 b8d7 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	637b      	str	r3, [r7, #52]	@ 0x34
 800a794:	f001 b8d3 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a79c:	1f11      	subs	r1, r2, #4
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	d13f      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800a7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a7a8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a7ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d104      	bne.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a7b4:	f7fe f908 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a7b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7ba:	f001 b8c0 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d10d      	bne.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7c4:	f7fd ffe4 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a7c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7ca:	f001 b8b8 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800a7ce:	bf00      	nop
 800a7d0:	46020c00 	.word	0x46020c00
 800a7d4:	02dc6c00 	.word	0x02dc6c00
 800a7d8:	0800ef40 	.word	0x0800ef40
 800a7dc:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a7e0:	4ba8      	ldr	r3, [pc, #672]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ec:	d106      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	2b20      	cmp	r3, #32
 800a7f2:	d103      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800a7f4:	4ba4      	ldr	r3, [pc, #656]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a7f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f8:	f001 b8a1 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a7fc:	4ba1      	ldr	r3, [pc, #644]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a7fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a802:	f003 0302 	and.w	r3, r3, #2
 800a806:	2b02      	cmp	r3, #2
 800a808:	d107      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	2b30      	cmp	r3, #48	@ 0x30
 800a80e:	d104      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800a810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a814:	637b      	str	r3, [r7, #52]	@ 0x34
 800a816:	f001 b892 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a81e:	f001 b88e 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a826:	f1a2 0108 	sub.w	r1, r2, #8
 800a82a:	430b      	orrs	r3, r1
 800a82c:	d136      	bne.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a82e:	4b95      	ldr	r3, [pc, #596]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a834:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a838:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d104      	bne.n	800a84a <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a840:	f7fe f8c2 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a844:	6378      	str	r0, [r7, #52]	@ 0x34
 800a846:	f001 b87a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a84c:	2b40      	cmp	r3, #64	@ 0x40
 800a84e:	d104      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a850:	f7fd ff9e 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a854:	6378      	str	r0, [r7, #52]	@ 0x34
 800a856:	f001 b872 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a85a:	4b8a      	ldr	r3, [pc, #552]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a866:	d106      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800a868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a86a:	2b80      	cmp	r3, #128	@ 0x80
 800a86c:	d103      	bne.n	800a876 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800a86e:	4b86      	ldr	r3, [pc, #536]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a870:	637b      	str	r3, [r7, #52]	@ 0x34
 800a872:	f001 b864 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a876:	4b83      	ldr	r3, [pc, #524]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b02      	cmp	r3, #2
 800a882:	d107      	bne.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800a884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a886:	2bc0      	cmp	r3, #192	@ 0xc0
 800a888:	d104      	bne.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800a88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a890:	f001 b855 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a894:	2300      	movs	r3, #0
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34
 800a898:	f001 b851 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a89c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a0:	f1a2 0110 	sub.w	r1, r2, #16
 800a8a4:	430b      	orrs	r3, r1
 800a8a6:	d139      	bne.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a8a8:	4b76      	ldr	r3, [pc, #472]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d104      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a8ba:	f7fe f885 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a8be:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8c0:	f001 b83d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ca:	d104      	bne.n	800a8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a8cc:	f7fd ff60 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a8d0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a8d2:	f001 b834 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a8d6:	4b6b      	ldr	r3, [pc, #428]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a8de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8e2:	d107      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8ea:	d103      	bne.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800a8ec:	4b66      	ldr	r3, [pc, #408]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a8ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f0:	f001 b825 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a8f4:	4b63      	ldr	r3, [pc, #396]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a8f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8fa:	f003 0302 	and.w	r3, r3, #2
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d108      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a908:	d104      	bne.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800a90a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a910:	f001 b815 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a914:	2300      	movs	r3, #0
 800a916:	637b      	str	r3, [r7, #52]	@ 0x34
 800a918:	f001 b811 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800a91c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a920:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800a924:	430b      	orrs	r3, r1
 800a926:	d139      	bne.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800a928:	4b56      	ldr	r3, [pc, #344]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a92a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a92e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a932:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a936:	2b00      	cmp	r3, #0
 800a938:	d104      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a93a:	f7fe f845 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800a93e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a940:	f000 bffd 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800a944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a94a:	d104      	bne.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a94c:	f7fd ff20 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a950:	6378      	str	r0, [r7, #52]	@ 0x34
 800a952:	f000 bff4 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800a956:	4b4b      	ldr	r3, [pc, #300]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a95e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a962:	d107      	bne.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a96a:	d103      	bne.n	800a974 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800a96c:	4b46      	ldr	r3, [pc, #280]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a96e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a970:	f000 bfe5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800a974:	4b43      	ldr	r3, [pc, #268]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d108      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800a982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a988:	d104      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800a98a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a98e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a990:	f000 bfd5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a994:	2300      	movs	r3, #0
 800a996:	637b      	str	r3, [r7, #52]	@ 0x34
 800a998:	f000 bfd1 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a99c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9a0:	f1a2 0120 	sub.w	r1, r2, #32
 800a9a4:	430b      	orrs	r3, r1
 800a9a6:	d158      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a9a8:	4b36      	ldr	r3, [pc, #216]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a9ba:	f7fe f82d 	bl	8008a18 <HAL_RCC_GetPCLK3Freq>
 800a9be:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9c0:	f000 bfbd 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d104      	bne.n	800a9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a9ca:	f7fd fee1 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800a9ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9d0:	f000 bfb5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a9d4:	4b2b      	ldr	r3, [pc, #172]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9e0:	d106      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d103      	bne.n	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800a9e8:	4b27      	ldr	r3, [pc, #156]	@ (800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9ec:	f000 bfa7 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a9f0:	4b24      	ldr	r3, [pc, #144]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800a9f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d104      	bne.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800aa04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa08:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa0a:	f000 bf98 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800aa0e:	4b1d      	ldr	r3, [pc, #116]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d11b      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d118      	bne.n	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa20:	4b18      	ldr	r3, [pc, #96]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800aa2c:	4b15      	ldr	r3, [pc, #84]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	0e1b      	lsrs	r3, r3, #24
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	e006      	b.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800aa38:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa3e:	041b      	lsls	r3, r3, #16
 800aa40:	0e1b      	lsrs	r3, r3, #24
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	4a11      	ldr	r2, [pc, #68]	@ (800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800aa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa4e:	f000 bf76 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa56:	f000 bf72 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800aa5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa5e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800aa62:	430b      	orrs	r3, r1
 800aa64:	d172      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800aa66:	4b07      	ldr	r3, [pc, #28]	@ (800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800aa68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa6c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aa70:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800aa72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa78:	d10a      	bne.n	800aa90 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aa7a:	f7fd fe89 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800aa7e:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa80:	f000 bf5d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800aa84:	46020c00 	.word	0x46020c00
 800aa88:	00f42400 	.word	0x00f42400
 800aa8c:	0800ef40 	.word	0x0800ef40
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa96:	d108      	bne.n	800aaaa <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa98:	f107 0318 	add.w	r3, r7, #24
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff f91f 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800aaa2:	6a3b      	ldr	r3, [r7, #32]
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa6:	f000 bf4a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d104      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800aab0:	f7fd ff70 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 800aab4:	6378      	str	r0, [r7, #52]	@ 0x34
 800aab6:	f000 bf42 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aac0:	d122      	bne.n	800ab08 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aac2:	4bb0      	ldr	r3, [pc, #704]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b20      	cmp	r3, #32
 800aacc:	d118      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aace:	4bad      	ldr	r3, [pc, #692]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800aada:	4baa      	ldr	r3, [pc, #680]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	0e1b      	lsrs	r3, r3, #24
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	e006      	b.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800aae6:	4ba7      	ldr	r3, [pc, #668]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aae8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aaec:	041b      	lsls	r3, r3, #16
 800aaee:	0e1b      	lsrs	r3, r3, #24
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	4aa4      	ldr	r2, [pc, #656]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800aaf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aafa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aafc:	f000 bf1f 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab04:	f000 bf1b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800ab08:	4b9e      	ldr	r3, [pc, #632]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab14:	d107      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800ab16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab1c:	d103      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800ab1e:	4b9b      	ldr	r3, [pc, #620]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ab20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab22:	f000 bf0c 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800ab26:	4b97      	ldr	r3, [pc, #604]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab32:	d107      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab3a:	d103      	bne.n	800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800ab3c:	4b93      	ldr	r3, [pc, #588]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ab3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab40:	f000 befd 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab48:	f000 bef9 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800ab4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab50:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ab54:	430b      	orrs	r3, r1
 800ab56:	d158      	bne.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800ab58:	4b8a      	ldr	r3, [pc, #552]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ab5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d84b      	bhi.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800ab6a:	a201      	add	r2, pc, #4	@ (adr r2, 800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800aba9 	.word	0x0800aba9
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab97 	.word	0x0800ab97
 800ab7c:	0800abb3 	.word	0x0800abb3
 800ab80:	0800abbd 	.word	0x0800abbd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe ff4f 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab92:	f000 bed4 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab96:	f107 030c 	add.w	r3, r7, #12
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff f9fa 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aba4:	f000 becb 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aba8:	f7fd fef4 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 800abac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800abae:	f000 bec6 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800abb2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800abb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abb8:	f000 bec1 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800abbc:	4b71      	ldr	r3, [pc, #452]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0320 	and.w	r3, r3, #32
 800abc4:	2b20      	cmp	r3, #32
 800abc6:	d118      	bne.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abc8:	4b6e      	ldr	r3, [pc, #440]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d005      	beq.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800abd4:	4b6b      	ldr	r3, [pc, #428]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	0e1b      	lsrs	r3, r3, #24
 800abda:	f003 030f 	and.w	r3, r3, #15
 800abde:	e006      	b.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800abe0:	4b68      	ldr	r3, [pc, #416]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800abe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800abe6:	041b      	lsls	r3, r3, #16
 800abe8:	0e1b      	lsrs	r3, r3, #24
 800abea:	f003 030f 	and.w	r3, r3, #15
 800abee:	4a66      	ldr	r2, [pc, #408]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800abf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abf6:	f000 bea2 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abfe:	f000 be9e 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac06:	f000 be9a 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800ac0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac0e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800ac12:	430b      	orrs	r3, r1
 800ac14:	d167      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800ac16:	4b5b      	ldr	r3, [pc, #364]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac1c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ac20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac28:	d036      	beq.n	800ac98 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ac30:	d855      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac38:	d029      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ac40:	d84d      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac48:	d013      	beq.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac50:	d845      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d015      	beq.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800ac58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac5e:	d13e      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fee1 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac6e:	f000 be66 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac72:	f107 030c 	add.w	r3, r7, #12
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff f98c 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac80:	f000 be5d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800ac84:	f7fd fe86 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 800ac88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac8a:	f000 be58 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ac8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac94:	f000 be53 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac98:	4b3a      	ldr	r3, [pc, #232]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f003 0320 	and.w	r3, r3, #32
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d118      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aca4:	4b37      	ldr	r3, [pc, #220]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800acb0:	4b34      	ldr	r3, [pc, #208]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	0e1b      	lsrs	r3, r3, #24
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	e006      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800acbc:	4b31      	ldr	r3, [pc, #196]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acc2:	041b      	lsls	r3, r3, #16
 800acc4:	0e1b      	lsrs	r3, r3, #24
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	4a2f      	ldr	r2, [pc, #188]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800accc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800acd2:	f000 be34 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acda:	f000 be30 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ace2:	f000 be2c 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800ace6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acea:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800acee:	430b      	orrs	r3, r1
 800acf0:	d152      	bne.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800acf2:	4b24      	ldr	r3, [pc, #144]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800acf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800acf8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800acfc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d104      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ad04:	f7fd fe60 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800ad08:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad0a:	f000 be18 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800ad0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad14:	d104      	bne.n	800ad20 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad16:	f7fd fd3b 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800ad1a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad1c:	f000 be0f 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ad20:	4b18      	ldr	r3, [pc, #96]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad2c:	d107      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad34:	d103      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800ad36:	4b15      	ldr	r3, [pc, #84]	@ (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800ad38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad3a:	f000 be00 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ad3e:	4b11      	ldr	r3, [pc, #68]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 0320 	and.w	r3, r3, #32
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d122      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ad50:	d11e      	bne.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad52:	4b0c      	ldr	r3, [pc, #48]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d005      	beq.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800ad5e:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	0e1b      	lsrs	r3, r3, #24
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	e006      	b.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800ad6a:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800ad6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad70:	041b      	lsls	r3, r3, #16
 800ad72:	0e1b      	lsrs	r3, r3, #24
 800ad74:	f003 030f 	and.w	r3, r3, #15
 800ad78:	4a03      	ldr	r2, [pc, #12]	@ (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800ad7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad80:	f000 bddd 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800ad84:	46020c00 	.word	0x46020c00
 800ad88:	0800ef40 	.word	0x0800ef40
 800ad8c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ad90:	2300      	movs	r3, #0
 800ad92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad94:	f000 bdd3 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ad98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad9c:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ada0:	430b      	orrs	r3, r1
 800ada2:	d14c      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ada4:	4ba8      	ldr	r3, [pc, #672]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ada6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800adaa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800adae:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800adb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d104      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800adb6:	f7fd fe07 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800adba:	6378      	str	r0, [r7, #52]	@ 0x34
 800adbc:	f000 bdbf 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adc6:	d104      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800adc8:	f7fd fce2 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800adcc:	6378      	str	r0, [r7, #52]	@ 0x34
 800adce:	f000 bdb6 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800add2:	4b9d      	ldr	r3, [pc, #628]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adde:	d107      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ade6:	d103      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800ade8:	4b98      	ldr	r3, [pc, #608]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800adea:	637b      	str	r3, [r7, #52]	@ 0x34
 800adec:	f000 bda7 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800adf0:	4b95      	ldr	r3, [pc, #596]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d11c      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800adfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ae02:	d118      	bne.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae04:	4b90      	ldr	r3, [pc, #576]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d005      	beq.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800ae10:	4b8d      	ldr	r3, [pc, #564]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	0e1b      	lsrs	r3, r3, #24
 800ae16:	f003 030f 	and.w	r3, r3, #15
 800ae1a:	e006      	b.n	800ae2a <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800ae1c:	4b8a      	ldr	r3, [pc, #552]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae22:	041b      	lsls	r3, r3, #16
 800ae24:	0e1b      	lsrs	r3, r3, #24
 800ae26:	f003 030f 	and.w	r3, r3, #15
 800ae2a:	4a89      	ldr	r2, [pc, #548]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae32:	f000 bd84 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae3a:	f000 bd80 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ae3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae42:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ae46:	430b      	orrs	r3, r1
 800ae48:	d158      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ae4a:	4b7f      	ldr	r3, [pc, #508]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae50:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae54:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae5a:	d028      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae60:	d848      	bhi.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	2b80      	cmp	r3, #128	@ 0x80
 800ae66:	d00e      	beq.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6a:	2b80      	cmp	r3, #128	@ 0x80
 800ae6c:	d842      	bhi.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	2b40      	cmp	r3, #64	@ 0x40
 800ae78:	d014      	beq.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ae7a:	e03b      	b.n	800aef4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ae7c:	f7fd fdcc 	bl	8008a18 <HAL_RCC_GetPCLK3Freq>
 800ae80:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ae82:	f000 bd5c 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ae86:	4b70      	ldr	r3, [pc, #448]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae92:	d103      	bne.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800ae94:	4b6d      	ldr	r3, [pc, #436]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800ae96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ae98:	f000 bd51 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aea0:	f000 bd4d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800aea4:	f7fd fc74 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800aea8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aeaa:	f000 bd48 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aeae:	4b66      	ldr	r3, [pc, #408]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b20      	cmp	r3, #32
 800aeb8:	d118      	bne.n	800aeec <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aeba:	4b63      	ldr	r3, [pc, #396]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d005      	beq.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800aec6:	4b60      	ldr	r3, [pc, #384]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	0e1b      	lsrs	r3, r3, #24
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	e006      	b.n	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800aed2:	4b5d      	ldr	r3, [pc, #372]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800aed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aed8:	041b      	lsls	r3, r3, #16
 800aeda:	0e1b      	lsrs	r3, r3, #24
 800aedc:	f003 030f 	and.w	r3, r3, #15
 800aee0:	4a5b      	ldr	r2, [pc, #364]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800aee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aee8:	f000 bd29 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800aeec:	2300      	movs	r3, #0
 800aeee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aef0:	f000 bd25 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aef8:	f000 bd21 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800aefc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af00:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800af04:	430b      	orrs	r3, r1
 800af06:	d14c      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800af08:	4b4f      	ldr	r3, [pc, #316]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af0e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800af12:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	2b00      	cmp	r3, #0
 800af18:	d104      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af1a:	f7fd fd55 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800af1e:	6378      	str	r0, [r7, #52]	@ 0x34
 800af20:	f000 bd0d 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800af2a:	d104      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af2c:	f7fd fc30 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800af30:	6378      	str	r0, [r7, #52]	@ 0x34
 800af32:	f000 bd04 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800af36:	4b44      	ldr	r3, [pc, #272]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af42:	d107      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800af44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af4a:	d103      	bne.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800af4c:	4b3f      	ldr	r3, [pc, #252]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800af4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800af50:	f000 bcf5 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800af54:	4b3c      	ldr	r3, [pc, #240]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	d11c      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800af66:	d118      	bne.n	800af9a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800af68:	4b37      	ldr	r3, [pc, #220]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800af74:	4b34      	ldr	r3, [pc, #208]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	0e1b      	lsrs	r3, r3, #24
 800af7a:	f003 030f 	and.w	r3, r3, #15
 800af7e:	e006      	b.n	800af8e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800af80:	4b31      	ldr	r3, [pc, #196]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800af82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800af86:	041b      	lsls	r3, r3, #16
 800af88:	0e1b      	lsrs	r3, r3, #24
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	4a30      	ldr	r2, [pc, #192]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800af90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af94:	637b      	str	r3, [r7, #52]	@ 0x34
 800af96:	f000 bcd2 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800af9e:	f000 bcce 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800afa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa6:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800afaa:	430b      	orrs	r3, r1
 800afac:	d152      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800afae:	4b26      	ldr	r3, [pc, #152]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800afb4:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800afb8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800afba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d104      	bne.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800afc0:	f7fd fd02 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800afc4:	6378      	str	r0, [r7, #52]	@ 0x34
 800afc6:	f000 bcba 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800afd0:	d104      	bne.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800afd2:	f7fd fbdd 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800afd6:	6378      	str	r0, [r7, #52]	@ 0x34
 800afd8:	f000 bcb1 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800afdc:	4b1a      	ldr	r3, [pc, #104]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afe8:	d107      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800afea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aff0:	d103      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800aff2:	4b16      	ldr	r3, [pc, #88]	@ (800b04c <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800aff4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff6:	f000 bca2 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800affa:	4b13      	ldr	r3, [pc, #76]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b20      	cmp	r3, #32
 800b004:	d11c      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b00c:	d118      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b00e:	4b0e      	ldr	r3, [pc, #56]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b01a:	4b0b      	ldr	r3, [pc, #44]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	0e1b      	lsrs	r3, r3, #24
 800b020:	f003 030f 	and.w	r3, r3, #15
 800b024:	e006      	b.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b026:	4b08      	ldr	r3, [pc, #32]	@ (800b048 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b02c:	041b      	lsls	r3, r3, #16
 800b02e:	0e1b      	lsrs	r3, r3, #24
 800b030:	f003 030f 	and.w	r3, r3, #15
 800b034:	4a06      	ldr	r2, [pc, #24]	@ (800b050 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b03a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b03c:	f000 bc7f 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	637b      	str	r3, [r7, #52]	@ 0x34
 800b044:	f000 bc7b 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b048:	46020c00 	.word	0x46020c00
 800b04c:	00f42400 	.word	0x00f42400
 800b050:	0800ef40 	.word	0x0800ef40
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b058:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800b05c:	430b      	orrs	r3, r1
 800b05e:	d14c      	bne.n	800b0fa <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b060:	4ba6      	ldr	r3, [pc, #664]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b062:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b066:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b06a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d104      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b072:	f7fd fca9 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800b076:	6378      	str	r0, [r7, #52]	@ 0x34
 800b078:	f000 bc61 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b082:	d104      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b084:	f7fd fb84 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b088:	6378      	str	r0, [r7, #52]	@ 0x34
 800b08a:	f000 bc58 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b08e:	4b9b      	ldr	r3, [pc, #620]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09a:	d107      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0a2:	d103      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b0a4:	4b96      	ldr	r3, [pc, #600]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a8:	f000 bc49 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b0ac:	4b93      	ldr	r3, [pc, #588]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0320 	and.w	r3, r3, #32
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	d11c      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ba:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b0be:	d118      	bne.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0c0:	4b8e      	ldr	r3, [pc, #568]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d005      	beq.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b0cc:	4b8b      	ldr	r3, [pc, #556]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	0e1b      	lsrs	r3, r3, #24
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	e006      	b.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b0d8:	4b88      	ldr	r3, [pc, #544]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b0da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0de:	041b      	lsls	r3, r3, #16
 800b0e0:	0e1b      	lsrs	r3, r3, #24
 800b0e2:	f003 030f 	and.w	r3, r3, #15
 800b0e6:	4a87      	ldr	r2, [pc, #540]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b0e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0ee:	f000 bc26 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0f6:	f000 bc22 	b.w	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0fe:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b102:	430b      	orrs	r3, r1
 800b104:	d164      	bne.n	800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b106:	4b7d      	ldr	r3, [pc, #500]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b10c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b110:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b114:	2b00      	cmp	r3, #0
 800b116:	d120      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b118:	4b78      	ldr	r3, [pc, #480]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f003 0320 	and.w	r3, r3, #32
 800b120:	2b20      	cmp	r3, #32
 800b122:	d117      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b124:	4b75      	ldr	r3, [pc, #468]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d005      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b130:	4b72      	ldr	r3, [pc, #456]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	0e1b      	lsrs	r3, r3, #24
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	e006      	b.n	800b14a <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b13c:	4b6f      	ldr	r3, [pc, #444]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b13e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b142:	041b      	lsls	r3, r3, #16
 800b144:	0e1b      	lsrs	r3, r3, #24
 800b146:	f003 030f 	and.w	r3, r3, #15
 800b14a:	4a6e      	ldr	r2, [pc, #440]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b14c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b150:	637b      	str	r3, [r7, #52]	@ 0x34
 800b152:	e3f4      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b154:	2300      	movs	r3, #0
 800b156:	637b      	str	r3, [r7, #52]	@ 0x34
 800b158:	e3f1      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b15a:	4b68      	ldr	r3, [pc, #416]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b15c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b160:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b164:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b168:	d112      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b16a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b170:	d10e      	bne.n	800b190 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b172:	4b62      	ldr	r3, [pc, #392]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b17c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b180:	d102      	bne.n	800b188 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b182:	23fa      	movs	r3, #250	@ 0xfa
 800b184:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b186:	e3da      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b188:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b18c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b18e:	e3d6      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b190:	4b5a      	ldr	r3, [pc, #360]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b19c:	d106      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1a4:	d102      	bne.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b1a6:	4b56      	ldr	r3, [pc, #344]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b1a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1aa:	e3c8      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b1ac:	4b53      	ldr	r3, [pc, #332]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d107      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1c0:	d103      	bne.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b1c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c8:	e3b9      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ce:	e3b6      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	d164      	bne.n	800b2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b1dc:	4b47      	ldr	r3, [pc, #284]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1e2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1e6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d120      	bne.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b1ee:	4b43      	ldr	r3, [pc, #268]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b20      	cmp	r3, #32
 800b1f8:	d117      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1fa:	4b40      	ldr	r3, [pc, #256]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b206:	4b3d      	ldr	r3, [pc, #244]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	0e1b      	lsrs	r3, r3, #24
 800b20c:	f003 030f 	and.w	r3, r3, #15
 800b210:	e006      	b.n	800b220 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b212:	4b3a      	ldr	r3, [pc, #232]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b214:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b218:	041b      	lsls	r3, r3, #16
 800b21a:	0e1b      	lsrs	r3, r3, #24
 800b21c:	f003 030f 	and.w	r3, r3, #15
 800b220:	4a38      	ldr	r2, [pc, #224]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b226:	637b      	str	r3, [r7, #52]	@ 0x34
 800b228:	e389      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b22e:	e386      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b230:	4b32      	ldr	r3, [pc, #200]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b236:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b23a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b23e:	d112      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b246:	d10e      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b248:	4b2c      	ldr	r3, [pc, #176]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b24a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b24e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b256:	d102      	bne.n	800b25e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800b258:	23fa      	movs	r3, #250	@ 0xfa
 800b25a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b25c:	e36f      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b25e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b264:	e36b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800b266:	4b25      	ldr	r3, [pc, #148]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b26e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b272:	d106      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b27a:	d102      	bne.n	800b282 <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800b27c:	4b20      	ldr	r3, [pc, #128]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b27e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b280:	e35d      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800b282:	4b1e      	ldr	r3, [pc, #120]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b288:	f003 0302 	and.w	r3, r3, #2
 800b28c:	2b02      	cmp	r3, #2
 800b28e:	d107      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b296:	d103      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800b298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b29e:	e34e      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2a4:	e34b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800b2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2aa:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b2ae:	430b      	orrs	r3, r1
 800b2b0:	d14e      	bne.n	800b350 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800b2b2:	4b12      	ldr	r3, [pc, #72]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b2b8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b2bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800b2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d103      	bne.n	800b2cc <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b2c4:	f7fd fb80 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800b2c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b2ca:	e338      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800b2cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b2da:	d119      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800b2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b2e2:	d115      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b2e4:	4b05      	ldr	r3, [pc, #20]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b2e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b2ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b2ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2f2:	d109      	bne.n	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800b2f4:	23fa      	movs	r3, #250	@ 0xfa
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b2f8:	e321      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b2fa:	bf00      	nop
 800b2fc:	46020c00 	.word	0x46020c00
 800b300:	00f42400 	.word	0x00f42400
 800b304:	0800ef40 	.word	0x0800ef40
      }
      else
      {
        frequency = LSI_VALUE;
 800b308:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b30c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b30e:	e316      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800b310:	4ba8      	ldr	r3, [pc, #672]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b31c:	d106      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800b31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b320:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b324:	d102      	bne.n	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800b326:	4ba4      	ldr	r3, [pc, #656]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b328:	637b      	str	r3, [r7, #52]	@ 0x34
 800b32a:	e308      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800b32c:	4ba1      	ldr	r3, [pc, #644]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b32e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b02      	cmp	r3, #2
 800b338:	d107      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800b33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b340:	d103      	bne.n	800b34a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800b342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b346:	637b      	str	r3, [r7, #52]	@ 0x34
 800b348:	e2f9      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b34e:	e2f6      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800b350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b354:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800b358:	430b      	orrs	r3, r1
 800b35a:	d12d      	bne.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800b35c:	4b95      	ldr	r3, [pc, #596]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b35e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b362:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b366:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800b368:	4b92      	ldr	r3, [pc, #584]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b374:	d105      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d102      	bne.n	800b382 <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800b37c:	4b8e      	ldr	r3, [pc, #568]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b37e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b380:	e2dd      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800b382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b388:	d107      	bne.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b38a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fe fb4c 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34
 800b398:	e2d1      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b3a0:	d107      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3a2:	f107 0318 	add.w	r3, r7, #24
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fc9a 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3b0:	e2c5      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3b6:	e2c2      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b3b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3bc:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	d156      	bne.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b3c4:	4b7b      	ldr	r3, [pc, #492]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b3c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b3ca:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b3ce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3d6:	d028      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b3de:	d845      	bhi.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3e6:	d013      	beq.n	800b410 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3ee:	d83d      	bhi.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800b3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d004      	beq.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3fc:	d004      	beq.n	800b408 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800b3fe:	e035      	b.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b400:	f7fd faf6 	bl	80089f0 <HAL_RCC_GetPCLK2Freq>
 800b404:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b406:	e29a      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b408:	f7fd f9c2 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b40c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b40e:	e296      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b410:	4b68      	ldr	r3, [pc, #416]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b418:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b41c:	d102      	bne.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800b41e:	4b66      	ldr	r3, [pc, #408]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b420:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b422:	e28c      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b424:	2300      	movs	r3, #0
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b428:	e289      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b42a:	4b62      	ldr	r3, [pc, #392]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0320 	and.w	r3, r3, #32
 800b432:	2b20      	cmp	r3, #32
 800b434:	d117      	bne.n	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b436:	4b5f      	ldr	r3, [pc, #380]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d005      	beq.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800b442:	4b5c      	ldr	r3, [pc, #368]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	0e1b      	lsrs	r3, r3, #24
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	e006      	b.n	800b45c <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800b44e:	4b59      	ldr	r3, [pc, #356]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b454:	041b      	lsls	r3, r3, #16
 800b456:	0e1b      	lsrs	r3, r3, #24
 800b458:	f003 030f 	and.w	r3, r3, #15
 800b45c:	4a57      	ldr	r2, [pc, #348]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b45e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b462:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b464:	e26b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b46a:	e268      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b46c:	2300      	movs	r3, #0
 800b46e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b470:	e265      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b476:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b47a:	430b      	orrs	r3, r1
 800b47c:	d156      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b47e:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b488:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b490:	d028      	beq.n	800b4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b498:	d845      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b49c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4a0:	d013      	beq.n	800b4ca <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4a8:	d83d      	bhi.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4b6:	d004      	beq.n	800b4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800b4b8:	e035      	b.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b4ba:	f7fd fa85 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800b4be:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4c0:	e23d      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b4c2:	f7fd f965 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b4c6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b4c8:	e239      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4ca:	4b3a      	ldr	r3, [pc, #232]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4d6:	d102      	bne.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800b4d8:	4b37      	ldr	r3, [pc, #220]	@ (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800b4da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4dc:	e22f      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b4e2:	e22c      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b4e4:	4b33      	ldr	r3, [pc, #204]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0320 	and.w	r3, r3, #32
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	d117      	bne.n	800b520 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b4f0:	4b30      	ldr	r3, [pc, #192]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800b4fc:	4b2d      	ldr	r3, [pc, #180]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	0e1b      	lsrs	r3, r3, #24
 800b502:	f003 030f 	and.w	r3, r3, #15
 800b506:	e006      	b.n	800b516 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800b508:	4b2a      	ldr	r3, [pc, #168]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b50a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b50e:	041b      	lsls	r3, r3, #16
 800b510:	0e1b      	lsrs	r3, r3, #24
 800b512:	f003 030f 	and.w	r3, r3, #15
 800b516:	4a29      	ldr	r2, [pc, #164]	@ (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800b518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b51c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b51e:	e20e      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b524:	e20b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b526:	2300      	movs	r3, #0
 800b528:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b52a:	e208      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b52c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b530:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b534:	430b      	orrs	r3, r1
 800b536:	d17c      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b538:	4b1e      	ldr	r3, [pc, #120]	@ (800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800b53a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b53e:	f003 0318 	and.w	r3, r3, #24
 800b542:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b546:	2b18      	cmp	r3, #24
 800b548:	d870      	bhi.n	800b62c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800b54a:	a201      	add	r2, pc, #4	@ (adr r2, 800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800b54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b550:	0800b5c1 	.word	0x0800b5c1
 800b554:	0800b62d 	.word	0x0800b62d
 800b558:	0800b62d 	.word	0x0800b62d
 800b55c:	0800b62d 	.word	0x0800b62d
 800b560:	0800b62d 	.word	0x0800b62d
 800b564:	0800b62d 	.word	0x0800b62d
 800b568:	0800b62d 	.word	0x0800b62d
 800b56c:	0800b62d 	.word	0x0800b62d
 800b570:	0800b5c9 	.word	0x0800b5c9
 800b574:	0800b62d 	.word	0x0800b62d
 800b578:	0800b62d 	.word	0x0800b62d
 800b57c:	0800b62d 	.word	0x0800b62d
 800b580:	0800b62d 	.word	0x0800b62d
 800b584:	0800b62d 	.word	0x0800b62d
 800b588:	0800b62d 	.word	0x0800b62d
 800b58c:	0800b62d 	.word	0x0800b62d
 800b590:	0800b5d1 	.word	0x0800b5d1
 800b594:	0800b62d 	.word	0x0800b62d
 800b598:	0800b62d 	.word	0x0800b62d
 800b59c:	0800b62d 	.word	0x0800b62d
 800b5a0:	0800b62d 	.word	0x0800b62d
 800b5a4:	0800b62d 	.word	0x0800b62d
 800b5a8:	0800b62d 	.word	0x0800b62d
 800b5ac:	0800b62d 	.word	0x0800b62d
 800b5b0:	0800b5eb 	.word	0x0800b5eb
 800b5b4:	46020c00 	.word	0x46020c00
 800b5b8:	00f42400 	.word	0x00f42400
 800b5bc:	0800ef40 	.word	0x0800ef40
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b5c0:	f7fd fa2a 	bl	8008a18 <HAL_RCC_GetPCLK3Freq>
 800b5c4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b5c6:	e1ba      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b5c8:	f7fd f8e2 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b5cc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b5ce:	e1b6      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5d0:	4b9f      	ldr	r3, [pc, #636]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b5d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b5dc:	d102      	bne.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800b5de:	4b9d      	ldr	r3, [pc, #628]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b5e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5e2:	e1ac      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5e8:	e1a9      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b5ea:	4b99      	ldr	r3, [pc, #612]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0320 	and.w	r3, r3, #32
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d117      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5f6:	4b96      	ldr	r3, [pc, #600]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800b602:	4b93      	ldr	r3, [pc, #588]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	0e1b      	lsrs	r3, r3, #24
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	e006      	b.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800b60e:	4b90      	ldr	r3, [pc, #576]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b610:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b614:	041b      	lsls	r3, r3, #16
 800b616:	0e1b      	lsrs	r3, r3, #24
 800b618:	f003 030f 	and.w	r3, r3, #15
 800b61c:	4a8e      	ldr	r2, [pc, #568]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b61e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b622:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b624:	e18b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b62a:	e188      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b62c:	2300      	movs	r3, #0
 800b62e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b630:	e185      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b636:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b63a:	430b      	orrs	r3, r1
 800b63c:	d155      	bne.n	800b6ea <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b63e:	4b84      	ldr	r3, [pc, #528]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b640:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b644:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b648:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b650:	d013      	beq.n	800b67a <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800b652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b654:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b658:	d844      	bhi.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b660:	d013      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b668:	d83c      	bhi.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800b66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d014      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800b670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b676:	d014      	beq.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800b678:	e034      	b.n	800b6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b67a:	f107 0318 	add.w	r3, r7, #24
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fb2e 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b688:	e159      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b68a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe f9cc 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b698:	e151      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b69a:	f7fd f879 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b69e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b6a0:	e14d      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6a2:	4b6b      	ldr	r3, [pc, #428]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 0320 	and.w	r3, r3, #32
 800b6aa:	2b20      	cmp	r3, #32
 800b6ac:	d117      	bne.n	800b6de <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6ae:	4b68      	ldr	r3, [pc, #416]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d005      	beq.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800b6ba:	4b65      	ldr	r3, [pc, #404]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	0e1b      	lsrs	r3, r3, #24
 800b6c0:	f003 030f 	and.w	r3, r3, #15
 800b6c4:	e006      	b.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800b6c6:	4b62      	ldr	r3, [pc, #392]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b6cc:	041b      	lsls	r3, r3, #16
 800b6ce:	0e1b      	lsrs	r3, r3, #24
 800b6d0:	f003 030f 	and.w	r3, r3, #15
 800b6d4:	4a60      	ldr	r2, [pc, #384]	@ (800b858 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800b6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6da:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6dc:	e12f      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6e2:	e12c      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6e8:	e129      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800b6ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6ee:	1e59      	subs	r1, r3, #1
 800b6f0:	ea52 0301 	orrs.w	r3, r2, r1
 800b6f4:	d13c      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800b6f6:	4b56      	ldr	r3, [pc, #344]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b6f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6fc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b700:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b708:	d027      	beq.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b710:	d82b      	bhi.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b718:	d017      	beq.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b720:	d823      	bhi.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b724:	2b00      	cmp	r3, #0
 800b726:	d004      	beq.n	800b732 <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800b728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b72e:	d004      	beq.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800b730:	e01b      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b732:	f7fd f82d 	bl	8008790 <HAL_RCC_GetSysClockFreq>
 800b736:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b738:	e101      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b73a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe f974 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b748:	e0f9      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b74a:	f107 0318 	add.w	r3, r7, #24
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fac6 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b758:	e0f1      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b75a:	f107 030c 	add.w	r3, r7, #12
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fc18 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b768:	e0e9      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b76a:	2300      	movs	r3, #0
 800b76c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b76e:	e0e6      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b770:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b774:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b778:	430b      	orrs	r3, r1
 800b77a:	d131      	bne.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b77c:	4b34      	ldr	r3, [pc, #208]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b77e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b782:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b786:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b788:	4b31      	ldr	r3, [pc, #196]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b78a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b78e:	f003 0302 	and.w	r3, r3, #2
 800b792:	2b02      	cmp	r3, #2
 800b794:	d106      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d103      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800b79c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7a2:	e0cc      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7b2:	d112      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800b7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7ba:	d10e      	bne.n	800b7da <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7bc:	4b24      	ldr	r3, [pc, #144]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b7c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7ca:	d102      	bne.n	800b7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800b7cc:	23fa      	movs	r3, #250	@ 0xfa
 800b7ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7d0:	e0b5      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b7d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b7d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b7d8:	e0b1      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7de:	e0ae      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7e4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	d13b      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b7ec:	4b18      	ldr	r3, [pc, #96]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b7f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b7f8:	4b15      	ldr	r3, [pc, #84]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b804:	d105      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800b80c:	4b13      	ldr	r3, [pc, #76]	@ (800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b810:	e095      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b812:	4b0f      	ldr	r3, [pc, #60]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b81a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b81e:	d106      	bne.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b826:	d102      	bne.n	800b82e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b828:	4b0d      	ldr	r3, [pc, #52]	@ (800b860 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800b82a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b82c:	e087      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b82e:	4b08      	ldr	r3, [pc, #32]	@ (800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b83a:	d106      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800b83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b83e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b842:	d102      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800b844:	4b03      	ldr	r3, [pc, #12]	@ (800b854 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800b846:	637b      	str	r3, [r7, #52]	@ 0x34
 800b848:	e079      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b84e:	e076      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b850:	46020c00 	.word	0x46020c00
 800b854:	00f42400 	.word	0x00f42400
 800b858:	0800ef40 	.word	0x0800ef40
 800b85c:	02dc6c00 	.word	0x02dc6c00
 800b860:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800b864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b868:	1e99      	subs	r1, r3, #2
 800b86a:	ea52 0301 	orrs.w	r3, r2, r1
 800b86e:	d120      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800b870:	4b35      	ldr	r3, [pc, #212]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b872:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b87a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800b882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b888:	d008      	beq.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800b88a:	e00f      	b.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe fb7f 	bl	8009f94 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b89a:	e050      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b89c:	f107 0318 	add.w	r3, r7, #24
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7fe fa1d 	bl	8009ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8aa:	e048      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8b0:	e045      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800b8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b6:	f1a3 0108 	sub.w	r1, r3, #8
 800b8ba:	ea52 0301 	orrs.w	r3, r2, r1
 800b8be:	d13c      	bne.n	800b93a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800b8c0:	4b21      	ldr	r3, [pc, #132]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b8c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b8c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b8ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800b8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8d8:	d105      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800b8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800b8e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8e4:	e02b      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800b8e6:	4b18      	ldr	r3, [pc, #96]	@ (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b8f2:	d106      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800b8fc:	4b14      	ldr	r3, [pc, #80]	@ (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800b8fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b900:	e01d      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b908:	d107      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b90a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b90e:	4618      	mov	r0, r3
 800b910:	f7fe f88c 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34
 800b918:	e011      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800b920:	d108      	bne.n	800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe f880 	bl	8009a2c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800b92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b92e:	085b      	lsrs	r3, r3, #1
 800b930:	637b      	str	r3, [r7, #52]	@ 0x34
 800b932:	e004      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800b934:	2300      	movs	r3, #0
 800b936:	637b      	str	r3, [r7, #52]	@ 0x34
 800b938:	e001      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b940:	4618      	mov	r0, r3
 800b942:	3738      	adds	r7, #56	@ 0x38
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	46020c00 	.word	0x46020c00
 800b94c:	00f42400 	.word	0x00f42400
 800b950:	007a1200 	.word	0x007a1200

0800b954 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800b954:	b480      	push	{r7}
 800b956:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800b958:	4b06      	ldr	r3, [pc, #24]	@ (800b974 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b95a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b95e:	4a05      	ldr	r2, [pc, #20]	@ (800b974 <HAL_RCCEx_EnableLSECSS+0x20>)
 800b960:	f043 0320 	orr.w	r3, r3, #32
 800b964:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800b968:	bf00      	nop
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	46020c00 	.word	0x46020c00

0800b978 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b980:	4b47      	ldr	r3, [pc, #284]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a46      	ldr	r2, [pc, #280]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b98a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b98c:	f7f7 fc8e 	bl	80032ac <HAL_GetTick>
 800b990:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b992:	e008      	b.n	800b9a6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b994:	f7f7 fc8a 	bl	80032ac <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e077      	b.n	800ba96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9a6:	4b3e      	ldr	r3, [pc, #248]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1f0      	bne.n	800b994 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b9b2:	4b3b      	ldr	r3, [pc, #236]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b9ba:	f023 0303 	bic.w	r3, r3, #3
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	6811      	ldr	r1, [r2, #0]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	6852      	ldr	r2, [r2, #4]
 800b9c6:	3a01      	subs	r2, #1
 800b9c8:	0212      	lsls	r2, r2, #8
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	4934      	ldr	r1, [pc, #208]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b9d2:	4b33      	ldr	r3, [pc, #204]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800b9d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9d6:	4b33      	ldr	r3, [pc, #204]	@ (800baa4 <RCCEx_PLL2_Config+0x12c>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	6892      	ldr	r2, [r2, #8]
 800b9de:	3a01      	subs	r2, #1
 800b9e0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	68d2      	ldr	r2, [r2, #12]
 800b9e8:	3a01      	subs	r2, #1
 800b9ea:	0252      	lsls	r2, r2, #9
 800b9ec:	b292      	uxth	r2, r2
 800b9ee:	4311      	orrs	r1, r2
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	6912      	ldr	r2, [r2, #16]
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	0412      	lsls	r2, r2, #16
 800b9f8:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b9fc:	4311      	orrs	r1, r2
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	6952      	ldr	r2, [r2, #20]
 800ba02:	3a01      	subs	r2, #1
 800ba04:	0612      	lsls	r2, r2, #24
 800ba06:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	4924      	ldr	r1, [pc, #144]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800ba12:	4b23      	ldr	r3, [pc, #140]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba16:	f023 020c 	bic.w	r2, r3, #12
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	4920      	ldr	r1, [pc, #128]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800ba24:	4b1e      	ldr	r3, [pc, #120]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	491c      	ldr	r1, [pc, #112]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800ba32:	4b1b      	ldr	r3, [pc, #108]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba36:	4a1a      	ldr	r2, [pc, #104]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba38:	f023 0310 	bic.w	r3, r3, #16
 800ba3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba3e:	4b18      	ldr	r3, [pc, #96]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba46:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	69d2      	ldr	r2, [r2, #28]
 800ba4e:	00d2      	lsls	r2, r2, #3
 800ba50:	4913      	ldr	r1, [pc, #76]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ba56:	4b12      	ldr	r3, [pc, #72]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5a:	4a11      	ldr	r2, [pc, #68]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba5c:	f043 0310 	orr.w	r3, r3, #16
 800ba60:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ba62:	4b0f      	ldr	r3, [pc, #60]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	4a0e      	ldr	r2, [pc, #56]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ba6c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba6e:	f7f7 fc1d 	bl	80032ac <HAL_GetTick>
 800ba72:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba74:	e008      	b.n	800ba88 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba76:	f7f7 fc19 	bl	80032ac <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d901      	bls.n	800ba88 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e006      	b.n	800ba96 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba88:	4b05      	ldr	r3, [pc, #20]	@ (800baa0 <RCCEx_PLL2_Config+0x128>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0f0      	beq.n	800ba76 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ba94:	2300      	movs	r3, #0

}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3710      	adds	r7, #16
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	46020c00 	.word	0x46020c00
 800baa4:	80800000 	.word	0x80800000

0800baa8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b084      	sub	sp, #16
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800bab0:	4b47      	ldr	r3, [pc, #284]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a46      	ldr	r2, [pc, #280]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800baba:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800babc:	f7f7 fbf6 	bl	80032ac <HAL_GetTick>
 800bac0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bac2:	e008      	b.n	800bad6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bac4:	f7f7 fbf2 	bl	80032ac <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d901      	bls.n	800bad6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e077      	b.n	800bbc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bad6:	4b3e      	ldr	r3, [pc, #248]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f0      	bne.n	800bac4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800bae2:	4b3b      	ldr	r3, [pc, #236]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800baea:	f023 0303 	bic.w	r3, r3, #3
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6811      	ldr	r1, [r2, #0]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	6852      	ldr	r2, [r2, #4]
 800baf6:	3a01      	subs	r2, #1
 800baf8:	0212      	lsls	r2, r2, #8
 800bafa:	430a      	orrs	r2, r1
 800bafc:	4934      	ldr	r1, [pc, #208]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bafe:	4313      	orrs	r3, r2
 800bb00:	630b      	str	r3, [r1, #48]	@ 0x30
 800bb02:	4b33      	ldr	r3, [pc, #204]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb06:	4b33      	ldr	r3, [pc, #204]	@ (800bbd4 <RCCEx_PLL3_Config+0x12c>)
 800bb08:	4013      	ands	r3, r2
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	6892      	ldr	r2, [r2, #8]
 800bb0e:	3a01      	subs	r2, #1
 800bb10:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	68d2      	ldr	r2, [r2, #12]
 800bb18:	3a01      	subs	r2, #1
 800bb1a:	0252      	lsls	r2, r2, #9
 800bb1c:	b292      	uxth	r2, r2
 800bb1e:	4311      	orrs	r1, r2
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	6912      	ldr	r2, [r2, #16]
 800bb24:	3a01      	subs	r2, #1
 800bb26:	0412      	lsls	r2, r2, #16
 800bb28:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800bb2c:	4311      	orrs	r1, r2
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	6952      	ldr	r2, [r2, #20]
 800bb32:	3a01      	subs	r2, #1
 800bb34:	0612      	lsls	r2, r2, #24
 800bb36:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	4924      	ldr	r1, [pc, #144]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800bb42:	4b23      	ldr	r3, [pc, #140]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb46:	f023 020c 	bic.w	r2, r3, #12
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	4920      	ldr	r1, [pc, #128]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bb54:	4b1e      	ldr	r3, [pc, #120]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a1b      	ldr	r3, [r3, #32]
 800bb5c:	491c      	ldr	r1, [pc, #112]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800bb62:	4b1b      	ldr	r3, [pc, #108]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb66:	4a1a      	ldr	r2, [pc, #104]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb68:	f023 0310 	bic.w	r3, r3, #16
 800bb6c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb6e:	4b18      	ldr	r3, [pc, #96]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb76:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	69d2      	ldr	r2, [r2, #28]
 800bb7e:	00d2      	lsls	r2, r2, #3
 800bb80:	4913      	ldr	r1, [pc, #76]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800bb86:	4b12      	ldr	r3, [pc, #72]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb8a:	4a11      	ldr	r2, [pc, #68]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb8c:	f043 0310 	orr.w	r3, r3, #16
 800bb90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800bb92:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a0e      	ldr	r2, [pc, #56]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bb98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb9c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb9e:	f7f7 fb85 	bl	80032ac <HAL_GetTick>
 800bba2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bba4:	e008      	b.n	800bbb8 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bba6:	f7f7 fb81 	bl	80032ac <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e006      	b.n	800bbc6 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbb8:	4b05      	ldr	r3, [pc, #20]	@ (800bbd0 <RCCEx_PLL3_Config+0x128>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0f0      	beq.n	800bba6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	46020c00 	.word	0x46020c00
 800bbd4:	80800000 	.word	0x80800000

0800bbd8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d078      	beq.n	800bcdc <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bbf0:	b2db      	uxtb	r3, r3
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d106      	bne.n	800bc04 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7f6 fd80 	bl	8002704 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2202      	movs	r2, #2
 800bc08:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bc0c:	4b36      	ldr	r3, [pc, #216]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	f003 0310 	and.w	r3, r3, #16
 800bc14:	2b10      	cmp	r3, #16
 800bc16:	d058      	beq.n	800bcca <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800bc18:	4b33      	ldr	r3, [pc, #204]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc24:	d053      	beq.n	800bcce <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc26:	4b30      	ldr	r3, [pc, #192]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc28:	22ca      	movs	r2, #202	@ 0xca
 800bc2a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc2c:	4b2e      	ldr	r3, [pc, #184]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc2e:	2253      	movs	r2, #83	@ 0x53
 800bc30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 f9ae 	bl	800bf94 <RTC_EnterInitMode>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800bc3c:	7bfb      	ldrb	r3, [r7, #15]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d13f      	bne.n	800bcc2 <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800bc42:	4b29      	ldr	r3, [pc, #164]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	4a28      	ldr	r2, [pc, #160]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc48:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800bc4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc50:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800bc52:	4b25      	ldr	r3, [pc, #148]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc54:	699a      	ldr	r2, [r3, #24]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6859      	ldr	r1, [r3, #4]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	4319      	orrs	r1, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	430b      	orrs	r3, r1
 800bc66:	4920      	ldr	r1, [pc, #128]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68da      	ldr	r2, [r3, #12]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	041b      	lsls	r3, r3, #16
 800bc76:	491c      	ldr	r1, [pc, #112]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bc7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	4916      	ldr	r1, [pc, #88]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bc90:	4313      	orrs	r3, r2
 800bc92:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f9b9 	bl	800c00c <RTC_ExitInitMode>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10e      	bne.n	800bcc2 <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800bca4:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a19      	ldr	r1, [r3, #32]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	69db      	ldr	r3, [r3, #28]
 800bcb4:	4319      	orrs	r1, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	490a      	ldr	r1, [pc, #40]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bcc2:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <HAL_RTC_Init+0x110>)
 800bcc4:	22ff      	movs	r2, #255	@ 0xff
 800bcc6:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcc8:	e001      	b.n	800bcce <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d103      	bne.n	800bcdc <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	46007800 	.word	0x46007800

0800bcec <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d101      	bne.n	800bd06 <HAL_RTC_SetTime+0x1a>
 800bd02:	2302      	movs	r3, #2
 800bd04:	e088      	b.n	800be18 <HAL_RTC_SetTime+0x12c>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2202      	movs	r2, #2
 800bd12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bd16:	4b42      	ldr	r3, [pc, #264]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bd18:	22ca      	movs	r2, #202	@ 0xca
 800bd1a:	625a      	str	r2, [r3, #36]	@ 0x24
 800bd1c:	4b40      	ldr	r3, [pc, #256]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bd1e:	2253      	movs	r2, #83	@ 0x53
 800bd20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 f936 	bl	800bf94 <RTC_EnterInitMode>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bd2c:	7cfb      	ldrb	r3, [r7, #19]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d163      	bne.n	800bdfa <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bd32:	4b3b      	ldr	r3, [pc, #236]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd3e:	d057      	beq.n	800bdf0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d125      	bne.n	800bd92 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bd46:	4b36      	ldr	r3, [pc, #216]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bd48:	699b      	ldr	r3, [r3, #24]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d102      	bne.n	800bd58 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 f993 	bl	800c088 <RTC_ByteToBcd2>
 800bd62:	4603      	mov	r3, r0
 800bd64:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	785b      	ldrb	r3, [r3, #1]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f98c 	bl	800c088 <RTC_ByteToBcd2>
 800bd70:	4603      	mov	r3, r0
 800bd72:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd74:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	789b      	ldrb	r3, [r3, #2]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 f984 	bl	800c088 <RTC_ByteToBcd2>
 800bd80:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bd82:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	78db      	ldrb	r3, [r3, #3]
 800bd8a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	617b      	str	r3, [r7, #20]
 800bd90:	e017      	b.n	800bdc2 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800bd92:	4b23      	ldr	r3, [pc, #140]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bd94:	699b      	ldr	r3, [r3, #24]
 800bd96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d102      	bne.n	800bda4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	2200      	movs	r2, #0
 800bda2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	785b      	ldrb	r3, [r3, #1]
 800bdae:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdb0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bdb6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	78db      	ldrb	r3, [r3, #3]
 800bdbc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800bdc2:	4a17      	ldr	r2, [pc, #92]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800bdca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800bdce:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800bdd0:	4b13      	ldr	r3, [pc, #76]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	4a12      	ldr	r2, [pc, #72]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdda:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800bddc:	4b10      	ldr	r3, [pc, #64]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdde:	699a      	ldr	r2, [r3, #24]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	68d9      	ldr	r1, [r3, #12]
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	691b      	ldr	r3, [r3, #16]
 800bde8:	430b      	orrs	r3, r1
 800bdea:	490d      	ldr	r1, [pc, #52]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f000 f90b 	bl	800c00c <RTC_ExitInitMode>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdfa:	4b09      	ldr	r3, [pc, #36]	@ (800be20 <HAL_RTC_SetTime+0x134>)
 800bdfc:	22ff      	movs	r2, #255	@ 0xff
 800bdfe:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800be00:	7cfb      	ldrb	r3, [r7, #19]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d103      	bne.n	800be0e <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2200      	movs	r2, #0
 800be12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800be16:	7cfb      	ldrb	r3, [r7, #19]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	371c      	adds	r7, #28
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd90      	pop	{r4, r7, pc}
 800be20:	46007800 	.word	0x46007800

0800be24 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be24:	b590      	push	{r4, r7, lr}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800be36:	2b01      	cmp	r3, #1
 800be38:	d101      	bne.n	800be3e <HAL_RTC_SetDate+0x1a>
 800be3a:	2302      	movs	r3, #2
 800be3c:	e071      	b.n	800bf22 <HAL_RTC_SetDate+0xfe>
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2201      	movs	r2, #1
 800be42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2202      	movs	r2, #2
 800be4a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10e      	bne.n	800be72 <HAL_RTC_SetDate+0x4e>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	785b      	ldrb	r3, [r3, #1]
 800be58:	f003 0310 	and.w	r3, r3, #16
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d008      	beq.n	800be72 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	f023 0310 	bic.w	r3, r3, #16
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	330a      	adds	r3, #10
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d11c      	bne.n	800beb2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	78db      	ldrb	r3, [r3, #3]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f903 	bl	800c088 <RTC_ByteToBcd2>
 800be82:	4603      	mov	r3, r0
 800be84:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f8fc 	bl	800c088 <RTC_ByteToBcd2>
 800be90:	4603      	mov	r3, r0
 800be92:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800be94:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	789b      	ldrb	r3, [r3, #2]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 f8f4 	bl	800c088 <RTC_ByteToBcd2>
 800bea0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bea2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800beac:	4313      	orrs	r3, r2
 800beae:	617b      	str	r3, [r7, #20]
 800beb0:	e00e      	b.n	800bed0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	78db      	ldrb	r3, [r3, #3]
 800beb6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	785b      	ldrb	r3, [r3, #1]
 800bebc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800bebe:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800bec4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800becc:	4313      	orrs	r3, r2
 800bece:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bed0:	4b16      	ldr	r3, [pc, #88]	@ (800bf2c <HAL_RTC_SetDate+0x108>)
 800bed2:	22ca      	movs	r2, #202	@ 0xca
 800bed4:	625a      	str	r2, [r3, #36]	@ 0x24
 800bed6:	4b15      	ldr	r3, [pc, #84]	@ (800bf2c <HAL_RTC_SetDate+0x108>)
 800bed8:	2253      	movs	r2, #83	@ 0x53
 800beda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bedc:	68f8      	ldr	r0, [r7, #12]
 800bede:	f000 f859 	bl	800bf94 <RTC_EnterInitMode>
 800bee2:	4603      	mov	r3, r0
 800bee4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bee6:	7cfb      	ldrb	r3, [r7, #19]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10b      	bne.n	800bf04 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800beec:	4a0f      	ldr	r2, [pc, #60]	@ (800bf2c <HAL_RTC_SetDate+0x108>)
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bef4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bef8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f886 	bl	800c00c <RTC_ExitInitMode>
 800bf00:	4603      	mov	r3, r0
 800bf02:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf04:	4b09      	ldr	r3, [pc, #36]	@ (800bf2c <HAL_RTC_SetDate+0x108>)
 800bf06:	22ff      	movs	r2, #255	@ 0xff
 800bf08:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800bf0a:	7cfb      	ldrb	r3, [r7, #19]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d103      	bne.n	800bf18 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800bf20:	7cfb      	ldrb	r3, [r7, #19]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	371c      	adds	r7, #28
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd90      	pop	{r4, r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	46007800 	.word	0x46007800

0800bf30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800bf38:	4b15      	ldr	r3, [pc, #84]	@ (800bf90 <HAL_RTC_WaitForSynchro+0x60>)
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	4a14      	ldr	r2, [pc, #80]	@ (800bf90 <HAL_RTC_WaitForSynchro+0x60>)
 800bf3e:	f023 0320 	bic.w	r3, r3, #32
 800bf42:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800bf44:	f7f7 f9b2 	bl	80032ac <HAL_GetTick>
 800bf48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bf4a:	e013      	b.n	800bf74 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf4c:	f7f7 f9ae 	bl	80032ac <HAL_GetTick>
 800bf50:	4602      	mov	r2, r0
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	1ad3      	subs	r3, r2, r3
 800bf56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf5a:	d90b      	bls.n	800bf74 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bf90 <HAL_RTC_WaitForSynchro+0x60>)
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	f003 0320 	and.w	r3, r3, #32
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10c      	bne.n	800bf82 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e008      	b.n	800bf86 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800bf74:	4b06      	ldr	r3, [pc, #24]	@ (800bf90 <HAL_RTC_WaitForSynchro+0x60>)
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0e5      	beq.n	800bf4c <HAL_RTC_WaitForSynchro+0x1c>
 800bf80:	e000      	b.n	800bf84 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800bf82:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	46007800 	.word	0x46007800

0800bf94 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bfa0:	4b19      	ldr	r3, [pc, #100]	@ (800c008 <RTC_EnterInitMode+0x74>)
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d128      	bne.n	800bffe <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800bfac:	4b16      	ldr	r3, [pc, #88]	@ (800c008 <RTC_EnterInitMode+0x74>)
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	4a15      	ldr	r2, [pc, #84]	@ (800c008 <RTC_EnterInitMode+0x74>)
 800bfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfb6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800bfb8:	f7f7 f978 	bl	80032ac <HAL_GetTick>
 800bfbc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bfbe:	e013      	b.n	800bfe8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800bfc0:	f7f7 f974 	bl	80032ac <HAL_GetTick>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bfce:	d90b      	bls.n	800bfe8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	@ (800c008 <RTC_EnterInitMode+0x74>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10f      	bne.n	800bffc <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2203      	movs	r2, #3
 800bfe4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800bfe8:	4b07      	ldr	r3, [pc, #28]	@ (800c008 <RTC_EnterInitMode+0x74>)
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d104      	bne.n	800bffe <RTC_EnterInitMode+0x6a>
 800bff4:	7bfb      	ldrb	r3, [r7, #15]
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	d1e2      	bne.n	800bfc0 <RTC_EnterInitMode+0x2c>
 800bffa:	e000      	b.n	800bffe <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800bffc:	bf00      	nop
        }
      }
    }
  }

  return status;
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	46007800 	.word	0x46007800

0800c00c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c014:	2300      	movs	r3, #0
 800c016:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c018:	4b1a      	ldr	r3, [pc, #104]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	4a19      	ldr	r2, [pc, #100]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c01e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c022:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c024:	4b17      	ldr	r3, [pc, #92]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c026:	699b      	ldr	r3, [r3, #24]
 800c028:	f003 0320 	and.w	r3, r3, #32
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10c      	bne.n	800c04a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff ff7d 	bl	800bf30 <HAL_RTC_WaitForSynchro>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01e      	beq.n	800c07a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2203      	movs	r2, #3
 800c040:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	73fb      	strb	r3, [r7, #15]
 800c048:	e017      	b.n	800c07a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c04a:	4b0e      	ldr	r3, [pc, #56]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	4a0d      	ldr	r2, [pc, #52]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c050:	f023 0320 	bic.w	r3, r3, #32
 800c054:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7ff ff6a 	bl	800bf30 <HAL_RTC_WaitForSynchro>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d005      	beq.n	800c06e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2203      	movs	r2, #3
 800c066:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c06e:	4b05      	ldr	r3, [pc, #20]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	4a04      	ldr	r2, [pc, #16]	@ (800c084 <RTC_ExitInitMode+0x78>)
 800c074:	f043 0320 	orr.w	r3, r3, #32
 800c078:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3710      	adds	r7, #16
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}
 800c084:	46007800 	.word	0x46007800

0800c088 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c09a:	e005      	b.n	800c0a8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
 800c0a4:	3b0a      	subs	r3, #10
 800c0a6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c0a8:	7afb      	ldrb	r3, [r7, #11]
 800c0aa:	2b09      	cmp	r3, #9
 800c0ac:	d8f6      	bhi.n	800c09c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	011b      	lsls	r3, r3, #4
 800c0b4:	b2da      	uxtb	r2, r3
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	b2db      	uxtb	r3, r3
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	4910      	ldr	r1, [pc, #64]	@ (800c11c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	689a      	ldr	r2, [r3, #8]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	431a      	orrs	r2, r3
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	490c      	ldr	r1, [pc, #48]	@ (800c120 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	@ (800c120 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c0f6:	6a1b      	ldr	r3, [r3, #32]
 800c0f8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	6919      	ldr	r1, [r3, #16]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	041b      	lsls	r3, r3, #16
 800c106:	430b      	orrs	r3, r1
 800c108:	4905      	ldr	r1, [pc, #20]	@ (800c120 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c10e:	2300      	movs	r3, #0
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	46007800 	.word	0x46007800
 800c120:	46007c00 	.word	0x46007c00

0800c124 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d101      	bne.n	800c136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c132:	2301      	movs	r3, #1
 800c134:	e0fb      	b.n	800c32e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a7f      	ldr	r2, [pc, #508]	@ (800c338 <HAL_SPI_Init+0x214>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d004      	beq.n	800c14a <HAL_SPI_Init+0x26>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a7d      	ldr	r2, [pc, #500]	@ (800c33c <HAL_SPI_Init+0x218>)
 800c146:	4293      	cmp	r3, r2
 800c148:	e000      	b.n	800c14c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c14a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a78      	ldr	r2, [pc, #480]	@ (800c338 <HAL_SPI_Init+0x214>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d004      	beq.n	800c166 <HAL_SPI_Init+0x42>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a76      	ldr	r2, [pc, #472]	@ (800c33c <HAL_SPI_Init+0x218>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d105      	bne.n	800c172 <HAL_SPI_Init+0x4e>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	2b0f      	cmp	r3, #15
 800c16c:	d901      	bls.n	800c172 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e0dd      	b.n	800c32e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f8ec 	bl	800c350 <SPI_GetPacketSize>
 800c178:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a6e      	ldr	r2, [pc, #440]	@ (800c338 <HAL_SPI_Init+0x214>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d004      	beq.n	800c18e <HAL_SPI_Init+0x6a>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a6c      	ldr	r2, [pc, #432]	@ (800c33c <HAL_SPI_Init+0x218>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d102      	bne.n	800c194 <HAL_SPI_Init+0x70>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b08      	cmp	r3, #8
 800c192:	d816      	bhi.n	800c1c2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c198:	4a69      	ldr	r2, [pc, #420]	@ (800c340 <HAL_SPI_Init+0x21c>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d00e      	beq.n	800c1bc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a68      	ldr	r2, [pc, #416]	@ (800c344 <HAL_SPI_Init+0x220>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d009      	beq.n	800c1bc <HAL_SPI_Init+0x98>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a66      	ldr	r2, [pc, #408]	@ (800c348 <HAL_SPI_Init+0x224>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d004      	beq.n	800c1bc <HAL_SPI_Init+0x98>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a65      	ldr	r2, [pc, #404]	@ (800c34c <HAL_SPI_Init+0x228>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d104      	bne.n	800c1c6 <HAL_SPI_Init+0xa2>
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2b10      	cmp	r3, #16
 800c1c0:	d901      	bls.n	800c1c6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e0b3      	b.n	800c32e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d106      	bne.n	800c1e0 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f7f6 fade 	bl	800279c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f022 0201 	bic.w	r2, r2, #1
 800c1f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c202:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c20c:	d119      	bne.n	800c242 <HAL_SPI_Init+0x11e>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c216:	d103      	bne.n	800c220 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d008      	beq.n	800c232 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10c      	bne.n	800c242 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c22c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c230:	d107      	bne.n	800c242 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c240:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00f      	beq.n	800c26e <HAL_SPI_Init+0x14a>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	2b06      	cmp	r3, #6
 800c254:	d90b      	bls.n	800c26e <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	e007      	b.n	800c27e <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c27c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	69da      	ldr	r2, [r3, #28]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c286:	431a      	orrs	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	431a      	orrs	r2, r3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c290:	ea42 0103 	orr.w	r1, r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	691b      	ldr	r3, [r3, #16]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	431a      	orrs	r2, r3
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2ea:	ea42 0103 	orr.w	r1, r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68db      	ldr	r3, [r3, #12]
 800c30c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3710      	adds	r7, #16
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	46002000 	.word	0x46002000
 800c33c:	56002000 	.word	0x56002000
 800c340:	40013000 	.word	0x40013000
 800c344:	50013000 	.word	0x50013000
 800c348:	40003800 	.word	0x40003800
 800c34c:	50003800 	.word	0x50003800

0800c350 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c35c:	095b      	lsrs	r3, r3, #5
 800c35e:	3301      	adds	r3, #1
 800c360:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	3301      	adds	r3, #1
 800c368:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	3307      	adds	r3, #7
 800c36e:	08db      	lsrs	r3, r3, #3
 800c370:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	fb02 f303 	mul.w	r3, r2, r3
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c386:	b480      	push	{r7}
 800c388:	b083      	sub	sp, #12
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c396:	b2db      	uxtb	r3, r3
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d12e      	bne.n	800c3fa <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d101      	bne.n	800c3aa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c3a6:	2302      	movs	r3, #2
 800c3a8:	e028      	b.n	800c3fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f022 0201 	bic.w	r2, r2, #1
 800c3c8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800c3d6:	ea42 0103 	orr.w	r1, r2, r3
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	689a      	ldr	r2, [r3, #8]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	430a      	orrs	r2, r1
 800c3e4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e000      	b.n	800c3fc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
  }
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e049      	b.n	800c4ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7f6 fb5c 	bl	8002aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2202      	movs	r2, #2
 800c438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	3304      	adds	r3, #4
 800c444:	4619      	mov	r1, r3
 800c446:	4610      	mov	r0, r2
 800c448:	f000 feca 	bl	800d1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d001      	beq.n	800c4d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e072      	b.n	800c5b6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f042 0201 	orr.w	r2, r2, #1
 800c4e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a35      	ldr	r2, [pc, #212]	@ (800c5c4 <HAL_TIM_Base_Start_IT+0x10c>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d040      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4a34      	ldr	r2, [pc, #208]	@ (800c5c8 <HAL_TIM_Base_Start_IT+0x110>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d03b      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c504:	d036      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c50e:	d031      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a2d      	ldr	r2, [pc, #180]	@ (800c5cc <HAL_TIM_Base_Start_IT+0x114>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d02c      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a2c      	ldr	r2, [pc, #176]	@ (800c5d0 <HAL_TIM_Base_Start_IT+0x118>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d027      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a2a      	ldr	r2, [pc, #168]	@ (800c5d4 <HAL_TIM_Base_Start_IT+0x11c>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d022      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a29      	ldr	r2, [pc, #164]	@ (800c5d8 <HAL_TIM_Base_Start_IT+0x120>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d01d      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a27      	ldr	r2, [pc, #156]	@ (800c5dc <HAL_TIM_Base_Start_IT+0x124>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d018      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a26      	ldr	r2, [pc, #152]	@ (800c5e0 <HAL_TIM_Base_Start_IT+0x128>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d013      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a24      	ldr	r2, [pc, #144]	@ (800c5e4 <HAL_TIM_Base_Start_IT+0x12c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00e      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a23      	ldr	r2, [pc, #140]	@ (800c5e8 <HAL_TIM_Base_Start_IT+0x130>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d009      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a21      	ldr	r2, [pc, #132]	@ (800c5ec <HAL_TIM_Base_Start_IT+0x134>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d004      	beq.n	800c574 <HAL_TIM_Base_Start_IT+0xbc>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a20      	ldr	r2, [pc, #128]	@ (800c5f0 <HAL_TIM_Base_Start_IT+0x138>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d115      	bne.n	800c5a0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689a      	ldr	r2, [r3, #8]
 800c57a:	4b1e      	ldr	r3, [pc, #120]	@ (800c5f4 <HAL_TIM_Base_Start_IT+0x13c>)
 800c57c:	4013      	ands	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	2b06      	cmp	r3, #6
 800c584:	d015      	beq.n	800c5b2 <HAL_TIM_Base_Start_IT+0xfa>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c58c:	d011      	beq.n	800c5b2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f042 0201 	orr.w	r2, r2, #1
 800c59c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c59e:	e008      	b.n	800c5b2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f042 0201 	orr.w	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]
 800c5b0:	e000      	b.n	800c5b4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	40012c00 	.word	0x40012c00
 800c5c8:	50012c00 	.word	0x50012c00
 800c5cc:	40000400 	.word	0x40000400
 800c5d0:	50000400 	.word	0x50000400
 800c5d4:	40000800 	.word	0x40000800
 800c5d8:	50000800 	.word	0x50000800
 800c5dc:	40000c00 	.word	0x40000c00
 800c5e0:	50000c00 	.word	0x50000c00
 800c5e4:	40013400 	.word	0x40013400
 800c5e8:	50013400 	.word	0x50013400
 800c5ec:	40014000 	.word	0x40014000
 800c5f0:	50014000 	.word	0x50014000
 800c5f4:	00010007 	.word	0x00010007

0800c5f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e049      	b.n	800c69e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d106      	bne.n	800c624 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7f6 f9f8 	bl	8002a14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	3304      	adds	r3, #4
 800c634:	4619      	mov	r1, r3
 800c636:	4610      	mov	r0, r2
 800c638:	f000 fdd2 	bl	800d1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2201      	movs	r2, #1
 800c640:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2201      	movs	r2, #1
 800c678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2201      	movs	r2, #1
 800c680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2201      	movs	r2, #1
 800c690:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2201      	movs	r2, #1
 800c698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3708      	adds	r7, #8
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d101      	bne.n	800c6b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e049      	b.n	800c74c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d106      	bne.n	800c6d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f841 	bl	800c754 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	f000 fd7b 	bl	800d1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2201      	movs	r2, #1
 800c70e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2201      	movs	r2, #1
 800c726:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2201      	movs	r2, #1
 800c736:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3708      	adds	r7, #8
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d101      	bne.n	800c77a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e049      	b.n	800c80e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b00      	cmp	r3, #0
 800c784:	d106      	bne.n	800c794 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7f6 f962 	bl	8002a58 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2202      	movs	r2, #2
 800c798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	4610      	mov	r0, r2
 800c7a8:	f000 fd1a 	bl	800d1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2201      	movs	r2, #1
 800c808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c80c:	2300      	movs	r3, #0
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b084      	sub	sp, #16
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f003 0302 	and.w	r3, r3, #2
 800c834:	2b00      	cmp	r3, #0
 800c836:	d020      	beq.n	800c87a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f003 0302 	and.w	r3, r3, #2
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d01b      	beq.n	800c87a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f06f 0202 	mvn.w	r2, #2
 800c84a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2201      	movs	r2, #1
 800c850:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f000 fc9f 	bl	800d1a4 <HAL_TIM_IC_CaptureCallback>
 800c866:	e005      	b.n	800c874 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fc91 	bl	800d190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 fca2 	bl	800d1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	f003 0304 	and.w	r3, r3, #4
 800c880:	2b00      	cmp	r3, #0
 800c882:	d020      	beq.n	800c8c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f003 0304 	and.w	r3, r3, #4
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d01b      	beq.n	800c8c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f06f 0204 	mvn.w	r2, #4
 800c896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	699b      	ldr	r3, [r3, #24]
 800c8a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d003      	beq.n	800c8b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fc79 	bl	800d1a4 <HAL_TIM_IC_CaptureCallback>
 800c8b2:	e005      	b.n	800c8c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fc6b 	bl	800d190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fc7c 	bl	800d1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f003 0308 	and.w	r3, r3, #8
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d020      	beq.n	800c912 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f003 0308 	and.w	r3, r3, #8
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d01b      	beq.n	800c912 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f06f 0208 	mvn.w	r2, #8
 800c8e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2204      	movs	r2, #4
 800c8e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	69db      	ldr	r3, [r3, #28]
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d003      	beq.n	800c900 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fc53 	bl	800d1a4 <HAL_TIM_IC_CaptureCallback>
 800c8fe:	e005      	b.n	800c90c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 fc45 	bl	800d190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fc56 	bl	800d1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	f003 0310 	and.w	r3, r3, #16
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d020      	beq.n	800c95e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f003 0310 	and.w	r3, r3, #16
 800c922:	2b00      	cmp	r3, #0
 800c924:	d01b      	beq.n	800c95e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f06f 0210 	mvn.w	r2, #16
 800c92e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2208      	movs	r2, #8
 800c934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	69db      	ldr	r3, [r3, #28]
 800c93c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 fc2d 	bl	800d1a4 <HAL_TIM_IC_CaptureCallback>
 800c94a:	e005      	b.n	800c958 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fc1f 	bl	800d190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fc30 	bl	800d1b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00c      	beq.n	800c982 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f003 0301 	and.w	r3, r3, #1
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d007      	beq.n	800c982 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f06f 0201 	mvn.w	r2, #1
 800c97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f7f5 f90f 	bl	8001ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d104      	bne.n	800c996 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c992:	2b00      	cmp	r3, #0
 800c994:	d00c      	beq.n	800c9b0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d007      	beq.n	800c9b0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f001 fd08 	bl	800e3c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00c      	beq.n	800c9d4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d007      	beq.n	800c9d4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f001 fd00 	bl	800e3d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00c      	beq.n	800c9f8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d007      	beq.n	800c9f8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c9f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 fbea 	bl	800d1cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	f003 0320 	and.w	r3, r3, #32
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00c      	beq.n	800ca1c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d007      	beq.n	800ca1c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f06f 0220 	mvn.w	r2, #32
 800ca14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f001 fcc8 	bl	800e3ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00c      	beq.n	800ca40 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d007      	beq.n	800ca40 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ca38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 fcd4 	bl	800e3e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00c      	beq.n	800ca64 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d007      	beq.n	800ca64 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ca5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f001 fccc 	bl	800e3fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00c      	beq.n	800ca88 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d007      	beq.n	800ca88 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ca80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 fcc4 	bl	800e410 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00c      	beq.n	800caac <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d007      	beq.n	800caac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800caa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 fcbc 	bl	800e424 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d101      	bne.n	800cad2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800cace:	2302      	movs	r3, #2
 800cad0:	e066      	b.n	800cba0 <HAL_TIM_OC_ConfigChannel+0xec>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2201      	movs	r2, #1
 800cad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b14      	cmp	r3, #20
 800cade:	d857      	bhi.n	800cb90 <HAL_TIM_OC_ConfigChannel+0xdc>
 800cae0:	a201      	add	r2, pc, #4	@ (adr r2, 800cae8 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae6:	bf00      	nop
 800cae8:	0800cb3d 	.word	0x0800cb3d
 800caec:	0800cb91 	.word	0x0800cb91
 800caf0:	0800cb91 	.word	0x0800cb91
 800caf4:	0800cb91 	.word	0x0800cb91
 800caf8:	0800cb4b 	.word	0x0800cb4b
 800cafc:	0800cb91 	.word	0x0800cb91
 800cb00:	0800cb91 	.word	0x0800cb91
 800cb04:	0800cb91 	.word	0x0800cb91
 800cb08:	0800cb59 	.word	0x0800cb59
 800cb0c:	0800cb91 	.word	0x0800cb91
 800cb10:	0800cb91 	.word	0x0800cb91
 800cb14:	0800cb91 	.word	0x0800cb91
 800cb18:	0800cb67 	.word	0x0800cb67
 800cb1c:	0800cb91 	.word	0x0800cb91
 800cb20:	0800cb91 	.word	0x0800cb91
 800cb24:	0800cb91 	.word	0x0800cb91
 800cb28:	0800cb75 	.word	0x0800cb75
 800cb2c:	0800cb91 	.word	0x0800cb91
 800cb30:	0800cb91 	.word	0x0800cb91
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cb83 	.word	0x0800cb83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f000 fc4c 	bl	800d3e0 <TIM_OC1_SetConfig>
      break;
 800cb48:	e025      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 fd07 	bl	800d564 <TIM_OC2_SetConfig>
      break;
 800cb56:	e01e      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68b9      	ldr	r1, [r7, #8]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fdb0 	bl	800d6c4 <TIM_OC3_SetConfig>
      break;
 800cb64:	e017      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f000 fe57 	bl	800d820 <TIM_OC4_SetConfig>
      break;
 800cb72:	e010      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68b9      	ldr	r1, [r7, #8]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f000 ff00 	bl	800d980 <TIM_OC5_SetConfig>
      break;
 800cb80:	e009      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	68b9      	ldr	r1, [r7, #8]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 ff7b 	bl	800da84 <TIM_OC6_SetConfig>
      break;
 800cb8e:	e002      	b.n	800cb96 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	75fb      	strb	r3, [r7, #23]
      break;
 800cb94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cb9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3718      	adds	r7, #24
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	60f8      	str	r0, [r7, #12]
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d101      	bne.n	800cbc6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	e088      	b.n	800ccd8 <HAL_TIM_IC_ConfigChannel+0x130>
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d11b      	bne.n	800cc0c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800cbe4:	f001 f89e 	bl	800dd24 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 020c 	bic.w	r2, r2, #12
 800cbf6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6999      	ldr	r1, [r3, #24]
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	689a      	ldr	r2, [r3, #8]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	430a      	orrs	r2, r1
 800cc08:	619a      	str	r2, [r3, #24]
 800cc0a:	e060      	b.n	800ccce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d11c      	bne.n	800cc4c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800cc22:	f001 f944 	bl	800deae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	699a      	ldr	r2, [r3, #24]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800cc34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6999      	ldr	r1, [r3, #24]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	021a      	lsls	r2, r3, #8
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	430a      	orrs	r2, r1
 800cc48:	619a      	str	r2, [r3, #24]
 800cc4a:	e040      	b.n	800ccce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b08      	cmp	r3, #8
 800cc50:	d11b      	bne.n	800cc8a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800cc62:	f001 f991 	bl	800df88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	69da      	ldr	r2, [r3, #28]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f022 020c 	bic.w	r2, r2, #12
 800cc74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	69d9      	ldr	r1, [r3, #28]
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	430a      	orrs	r2, r1
 800cc86:	61da      	str	r2, [r3, #28]
 800cc88:	e021      	b.n	800ccce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b0c      	cmp	r3, #12
 800cc8e:	d11c      	bne.n	800ccca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800cca0:	f001 f9ae 	bl	800e000 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	69da      	ldr	r2, [r3, #28]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ccb2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	69d9      	ldr	r1, [r3, #28]
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	021a      	lsls	r2, r3, #8
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	430a      	orrs	r2, r1
 800ccc6:	61da      	str	r2, [r3, #28]
 800ccc8:	e001      	b.n	800ccce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ccca:	2301      	movs	r3, #1
 800cccc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b086      	sub	sp, #24
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d101      	bne.n	800ccfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	e0ff      	b.n	800cefe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b14      	cmp	r3, #20
 800cd0a:	f200 80f0 	bhi.w	800ceee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800cd0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800cd10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd14:	0800cd69 	.word	0x0800cd69
 800cd18:	0800ceef 	.word	0x0800ceef
 800cd1c:	0800ceef 	.word	0x0800ceef
 800cd20:	0800ceef 	.word	0x0800ceef
 800cd24:	0800cda9 	.word	0x0800cda9
 800cd28:	0800ceef 	.word	0x0800ceef
 800cd2c:	0800ceef 	.word	0x0800ceef
 800cd30:	0800ceef 	.word	0x0800ceef
 800cd34:	0800cdeb 	.word	0x0800cdeb
 800cd38:	0800ceef 	.word	0x0800ceef
 800cd3c:	0800ceef 	.word	0x0800ceef
 800cd40:	0800ceef 	.word	0x0800ceef
 800cd44:	0800ce2b 	.word	0x0800ce2b
 800cd48:	0800ceef 	.word	0x0800ceef
 800cd4c:	0800ceef 	.word	0x0800ceef
 800cd50:	0800ceef 	.word	0x0800ceef
 800cd54:	0800ce6d 	.word	0x0800ce6d
 800cd58:	0800ceef 	.word	0x0800ceef
 800cd5c:	0800ceef 	.word	0x0800ceef
 800cd60:	0800ceef 	.word	0x0800ceef
 800cd64:	0800cead 	.word	0x0800cead
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68b9      	ldr	r1, [r7, #8]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f000 fb36 	bl	800d3e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	699a      	ldr	r2, [r3, #24]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0208 	orr.w	r2, r2, #8
 800cd82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699a      	ldr	r2, [r3, #24]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f022 0204 	bic.w	r2, r2, #4
 800cd92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	6999      	ldr	r1, [r3, #24]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	691a      	ldr	r2, [r3, #16]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	430a      	orrs	r2, r1
 800cda4:	619a      	str	r2, [r3, #24]
      break;
 800cda6:	e0a5      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68b9      	ldr	r1, [r7, #8]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 fbd8 	bl	800d564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	699a      	ldr	r2, [r3, #24]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cdc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	699a      	ldr	r2, [r3, #24]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6999      	ldr	r1, [r3, #24]
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	021a      	lsls	r2, r3, #8
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	430a      	orrs	r2, r1
 800cde6:	619a      	str	r2, [r3, #24]
      break;
 800cde8:	e084      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	68b9      	ldr	r1, [r7, #8]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 fc67 	bl	800d6c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	69da      	ldr	r2, [r3, #28]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f042 0208 	orr.w	r2, r2, #8
 800ce04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69da      	ldr	r2, [r3, #28]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f022 0204 	bic.w	r2, r2, #4
 800ce14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	69d9      	ldr	r1, [r3, #28]
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	691a      	ldr	r2, [r3, #16]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	430a      	orrs	r2, r1
 800ce26:	61da      	str	r2, [r3, #28]
      break;
 800ce28:	e064      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	68b9      	ldr	r1, [r7, #8]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f000 fcf5 	bl	800d820 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69da      	ldr	r2, [r3, #28]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	69da      	ldr	r2, [r3, #28]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	69d9      	ldr	r1, [r3, #28]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	691b      	ldr	r3, [r3, #16]
 800ce60:	021a      	lsls	r2, r3, #8
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	61da      	str	r2, [r3, #28]
      break;
 800ce6a:	e043      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68b9      	ldr	r1, [r7, #8]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 fd84 	bl	800d980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f042 0208 	orr.w	r2, r2, #8
 800ce86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f022 0204 	bic.w	r2, r2, #4
 800ce96:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	691a      	ldr	r2, [r3, #16]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	430a      	orrs	r2, r1
 800cea8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ceaa:	e023      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	68b9      	ldr	r1, [r7, #8]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fde6 	bl	800da84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800cec6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ced6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	691b      	ldr	r3, [r3, #16]
 800cee2:	021a      	lsls	r2, r3, #8
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	430a      	orrs	r2, r1
 800ceea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ceec:	e002      	b.n	800cef4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	75fb      	strb	r3, [r7, #23]
      break;
 800cef2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop

0800cf08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d101      	bne.n	800cf24 <HAL_TIM_ConfigClockSource+0x1c>
 800cf20:	2302      	movs	r3, #2
 800cf22:	e0e6      	b.n	800d0f2 <HAL_TIM_ConfigClockSource+0x1ea>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	689b      	ldr	r3, [r3, #8]
 800cf3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800cf42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cf46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cf4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	4a67      	ldr	r2, [pc, #412]	@ (800d0fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	f000 80b1 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cf64:	4a65      	ldr	r2, [pc, #404]	@ (800d0fc <HAL_TIM_ConfigClockSource+0x1f4>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	f200 80b6 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cf6c:	4a64      	ldr	r2, [pc, #400]	@ (800d100 <HAL_TIM_ConfigClockSource+0x1f8>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	f000 80a9 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cf74:	4a62      	ldr	r2, [pc, #392]	@ (800d100 <HAL_TIM_ConfigClockSource+0x1f8>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	f200 80ae 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cf7c:	4a61      	ldr	r2, [pc, #388]	@ (800d104 <HAL_TIM_ConfigClockSource+0x1fc>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	f000 80a1 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cf84:	4a5f      	ldr	r2, [pc, #380]	@ (800d104 <HAL_TIM_ConfigClockSource+0x1fc>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	f200 80a6 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cf8c:	4a5e      	ldr	r2, [pc, #376]	@ (800d108 <HAL_TIM_ConfigClockSource+0x200>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	f000 8099 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cf94:	4a5c      	ldr	r2, [pc, #368]	@ (800d108 <HAL_TIM_ConfigClockSource+0x200>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	f200 809e 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cf9c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cfa0:	f000 8091 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cfa4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cfa8:	f200 8096 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfb0:	f000 8089 	beq.w	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cfb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfb8:	f200 808e 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfc0:	d03e      	beq.n	800d040 <HAL_TIM_ConfigClockSource+0x138>
 800cfc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfc6:	f200 8087 	bhi.w	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfce:	f000 8086 	beq.w	800d0de <HAL_TIM_ConfigClockSource+0x1d6>
 800cfd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfd6:	d87f      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfd8:	2b70      	cmp	r3, #112	@ 0x70
 800cfda:	d01a      	beq.n	800d012 <HAL_TIM_ConfigClockSource+0x10a>
 800cfdc:	2b70      	cmp	r3, #112	@ 0x70
 800cfde:	d87b      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfe0:	2b60      	cmp	r3, #96	@ 0x60
 800cfe2:	d050      	beq.n	800d086 <HAL_TIM_ConfigClockSource+0x17e>
 800cfe4:	2b60      	cmp	r3, #96	@ 0x60
 800cfe6:	d877      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cfe8:	2b50      	cmp	r3, #80	@ 0x50
 800cfea:	d03c      	beq.n	800d066 <HAL_TIM_ConfigClockSource+0x15e>
 800cfec:	2b50      	cmp	r3, #80	@ 0x50
 800cfee:	d873      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cff0:	2b40      	cmp	r3, #64	@ 0x40
 800cff2:	d058      	beq.n	800d0a6 <HAL_TIM_ConfigClockSource+0x19e>
 800cff4:	2b40      	cmp	r3, #64	@ 0x40
 800cff6:	d86f      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800cff8:	2b30      	cmp	r3, #48	@ 0x30
 800cffa:	d064      	beq.n	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800cffc:	2b30      	cmp	r3, #48	@ 0x30
 800cffe:	d86b      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800d000:	2b20      	cmp	r3, #32
 800d002:	d060      	beq.n	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800d004:	2b20      	cmp	r3, #32
 800d006:	d867      	bhi.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d05c      	beq.n	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800d00c:	2b10      	cmp	r3, #16
 800d00e:	d05a      	beq.n	800d0c6 <HAL_TIM_ConfigClockSource+0x1be>
 800d010:	e062      	b.n	800d0d8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d022:	f001 f847 	bl	800e0b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	609a      	str	r2, [r3, #8]
      break;
 800d03e:	e04f      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d050:	f001 f830 	bl	800e0b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	689a      	ldr	r2, [r3, #8]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d062:	609a      	str	r2, [r3, #8]
      break;
 800d064:	e03c      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d072:	461a      	mov	r2, r3
 800d074:	f000 feec 	bl	800de50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2150      	movs	r1, #80	@ 0x50
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fffb 	bl	800e07a <TIM_ITRx_SetConfig>
      break;
 800d084:	e02c      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d092:	461a      	mov	r2, r3
 800d094:	f000 ff48 	bl	800df28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2160      	movs	r1, #96	@ 0x60
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f000 ffeb 	bl	800e07a <TIM_ITRx_SetConfig>
      break;
 800d0a4:	e01c      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f000 fecc 	bl	800de50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2140      	movs	r1, #64	@ 0x40
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 ffdb 	bl	800e07a <TIM_ITRx_SetConfig>
      break;
 800d0c4:	e00c      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f000 ffd2 	bl	800e07a <TIM_ITRx_SetConfig>
      break;
 800d0d6:	e003      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	73fb      	strb	r3, [r7, #15]
      break;
 800d0dc:	e000      	b.n	800d0e0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800d0de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	00100070 	.word	0x00100070
 800d100:	00100040 	.word	0x00100040
 800d104:	00100030 	.word	0x00100030
 800d108:	00100020 	.word	0x00100020

0800d10c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d101      	bne.n	800d124 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d120:	2302      	movs	r3, #2
 800d122:	e031      	b.n	800d188 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2201      	movs	r2, #1
 800d128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2202      	movs	r2, #2
 800d130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 fd28 	bl	800db8c <TIM_SlaveTimer_SetConfig>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d009      	beq.n	800d156 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e018      	b.n	800d188 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68da      	ldr	r2, [r3, #12]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d164:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68da      	ldr	r2, [r3, #12]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d174:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2201      	movs	r2, #1
 800d17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d186:	2300      	movs	r3, #0
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr

0800d1cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1d4:	bf00      	nop
 800d1d6:	370c      	adds	r7, #12
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1de:	4770      	bx	lr

0800d1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a6b      	ldr	r2, [pc, #428]	@ (800d3a0 <TIM_Base_SetConfig+0x1c0>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d02b      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a6a      	ldr	r2, [pc, #424]	@ (800d3a4 <TIM_Base_SetConfig+0x1c4>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d027      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d206:	d023      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d20e:	d01f      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	4a65      	ldr	r2, [pc, #404]	@ (800d3a8 <TIM_Base_SetConfig+0x1c8>)
 800d214:	4293      	cmp	r3, r2
 800d216:	d01b      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	4a64      	ldr	r2, [pc, #400]	@ (800d3ac <TIM_Base_SetConfig+0x1cc>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d017      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4a63      	ldr	r2, [pc, #396]	@ (800d3b0 <TIM_Base_SetConfig+0x1d0>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d013      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	4a62      	ldr	r2, [pc, #392]	@ (800d3b4 <TIM_Base_SetConfig+0x1d4>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d00f      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4a61      	ldr	r2, [pc, #388]	@ (800d3b8 <TIM_Base_SetConfig+0x1d8>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d00b      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4a60      	ldr	r2, [pc, #384]	@ (800d3bc <TIM_Base_SetConfig+0x1dc>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d007      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4a5f      	ldr	r2, [pc, #380]	@ (800d3c0 <TIM_Base_SetConfig+0x1e0>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d003      	beq.n	800d250 <TIM_Base_SetConfig+0x70>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	4a5e      	ldr	r2, [pc, #376]	@ (800d3c4 <TIM_Base_SetConfig+0x1e4>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d108      	bne.n	800d262 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	68fa      	ldr	r2, [r7, #12]
 800d25e:	4313      	orrs	r3, r2
 800d260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a4e      	ldr	r2, [pc, #312]	@ (800d3a0 <TIM_Base_SetConfig+0x1c0>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d043      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a4d      	ldr	r2, [pc, #308]	@ (800d3a4 <TIM_Base_SetConfig+0x1c4>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d03f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d278:	d03b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d280:	d037      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	4a48      	ldr	r2, [pc, #288]	@ (800d3a8 <TIM_Base_SetConfig+0x1c8>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d033      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a47      	ldr	r2, [pc, #284]	@ (800d3ac <TIM_Base_SetConfig+0x1cc>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d02f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a46      	ldr	r2, [pc, #280]	@ (800d3b0 <TIM_Base_SetConfig+0x1d0>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d02b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a45      	ldr	r2, [pc, #276]	@ (800d3b4 <TIM_Base_SetConfig+0x1d4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d027      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a44      	ldr	r2, [pc, #272]	@ (800d3b8 <TIM_Base_SetConfig+0x1d8>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d023      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a43      	ldr	r2, [pc, #268]	@ (800d3bc <TIM_Base_SetConfig+0x1dc>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d01f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a42      	ldr	r2, [pc, #264]	@ (800d3c0 <TIM_Base_SetConfig+0x1e0>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d01b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	4a41      	ldr	r2, [pc, #260]	@ (800d3c4 <TIM_Base_SetConfig+0x1e4>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d017      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	4a40      	ldr	r2, [pc, #256]	@ (800d3c8 <TIM_Base_SetConfig+0x1e8>)
 800d2c6:	4293      	cmp	r3, r2
 800d2c8:	d013      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4a3f      	ldr	r2, [pc, #252]	@ (800d3cc <TIM_Base_SetConfig+0x1ec>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d00f      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4a3e      	ldr	r2, [pc, #248]	@ (800d3d0 <TIM_Base_SetConfig+0x1f0>)
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d00b      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4a3d      	ldr	r2, [pc, #244]	@ (800d3d4 <TIM_Base_SetConfig+0x1f4>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d007      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a3c      	ldr	r2, [pc, #240]	@ (800d3d8 <TIM_Base_SetConfig+0x1f8>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d003      	beq.n	800d2f2 <TIM_Base_SetConfig+0x112>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a3b      	ldr	r2, [pc, #236]	@ (800d3dc <TIM_Base_SetConfig+0x1fc>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d108      	bne.n	800d304 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d2f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	68db      	ldr	r3, [r3, #12]
 800d2fe:	68fa      	ldr	r2, [r7, #12]
 800d300:	4313      	orrs	r3, r2
 800d302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	695b      	ldr	r3, [r3, #20]
 800d30e:	4313      	orrs	r3, r2
 800d310:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	689a      	ldr	r2, [r3, #8]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	681a      	ldr	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4a1e      	ldr	r2, [pc, #120]	@ (800d3a0 <TIM_Base_SetConfig+0x1c0>)
 800d326:	4293      	cmp	r3, r2
 800d328:	d023      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a1d      	ldr	r2, [pc, #116]	@ (800d3a4 <TIM_Base_SetConfig+0x1c4>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d01f      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4a22      	ldr	r2, [pc, #136]	@ (800d3c0 <TIM_Base_SetConfig+0x1e0>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d01b      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a21      	ldr	r2, [pc, #132]	@ (800d3c4 <TIM_Base_SetConfig+0x1e4>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d017      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a20      	ldr	r2, [pc, #128]	@ (800d3c8 <TIM_Base_SetConfig+0x1e8>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d013      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a1f      	ldr	r2, [pc, #124]	@ (800d3cc <TIM_Base_SetConfig+0x1ec>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d00f      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a1e      	ldr	r2, [pc, #120]	@ (800d3d0 <TIM_Base_SetConfig+0x1f0>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d00b      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a1d      	ldr	r2, [pc, #116]	@ (800d3d4 <TIM_Base_SetConfig+0x1f4>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d007      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a1c      	ldr	r2, [pc, #112]	@ (800d3d8 <TIM_Base_SetConfig+0x1f8>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d003      	beq.n	800d372 <TIM_Base_SetConfig+0x192>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a1b      	ldr	r2, [pc, #108]	@ (800d3dc <TIM_Base_SetConfig+0x1fc>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d103      	bne.n	800d37a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	691a      	ldr	r2, [r3, #16]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f043 0204 	orr.w	r2, r3, #4
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	68fa      	ldr	r2, [r7, #12]
 800d390:	601a      	str	r2, [r3, #0]
}
 800d392:	bf00      	nop
 800d394:	3714      	adds	r7, #20
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop
 800d3a0:	40012c00 	.word	0x40012c00
 800d3a4:	50012c00 	.word	0x50012c00
 800d3a8:	40000400 	.word	0x40000400
 800d3ac:	50000400 	.word	0x50000400
 800d3b0:	40000800 	.word	0x40000800
 800d3b4:	50000800 	.word	0x50000800
 800d3b8:	40000c00 	.word	0x40000c00
 800d3bc:	50000c00 	.word	0x50000c00
 800d3c0:	40013400 	.word	0x40013400
 800d3c4:	50013400 	.word	0x50013400
 800d3c8:	40014000 	.word	0x40014000
 800d3cc:	50014000 	.word	0x50014000
 800d3d0:	40014400 	.word	0x40014400
 800d3d4:	50014400 	.word	0x50014400
 800d3d8:	40014800 	.word	0x40014800
 800d3dc:	50014800 	.word	0x50014800

0800d3e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b087      	sub	sp, #28
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6a1b      	ldr	r3, [r3, #32]
 800d3f4:	f023 0201 	bic.w	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d40e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f023 0303 	bic.w	r3, r3, #3
 800d41a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4313      	orrs	r3, r2
 800d424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	f023 0302 	bic.w	r3, r3, #2
 800d42c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	4313      	orrs	r3, r2
 800d436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a40      	ldr	r2, [pc, #256]	@ (800d53c <TIM_OC1_SetConfig+0x15c>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d023      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a3f      	ldr	r2, [pc, #252]	@ (800d540 <TIM_OC1_SetConfig+0x160>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d01f      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a3e      	ldr	r2, [pc, #248]	@ (800d544 <TIM_OC1_SetConfig+0x164>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d01b      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a3d      	ldr	r2, [pc, #244]	@ (800d548 <TIM_OC1_SetConfig+0x168>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d017      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4a3c      	ldr	r2, [pc, #240]	@ (800d54c <TIM_OC1_SetConfig+0x16c>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d013      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	4a3b      	ldr	r2, [pc, #236]	@ (800d550 <TIM_OC1_SetConfig+0x170>)
 800d464:	4293      	cmp	r3, r2
 800d466:	d00f      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a3a      	ldr	r2, [pc, #232]	@ (800d554 <TIM_OC1_SetConfig+0x174>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d00b      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a39      	ldr	r2, [pc, #228]	@ (800d558 <TIM_OC1_SetConfig+0x178>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d007      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a38      	ldr	r2, [pc, #224]	@ (800d55c <TIM_OC1_SetConfig+0x17c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d003      	beq.n	800d488 <TIM_OC1_SetConfig+0xa8>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a37      	ldr	r2, [pc, #220]	@ (800d560 <TIM_OC1_SetConfig+0x180>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d10c      	bne.n	800d4a2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f023 0308 	bic.w	r3, r3, #8
 800d48e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	68db      	ldr	r3, [r3, #12]
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	4313      	orrs	r3, r2
 800d498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f023 0304 	bic.w	r3, r3, #4
 800d4a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4a25      	ldr	r2, [pc, #148]	@ (800d53c <TIM_OC1_SetConfig+0x15c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d023      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	4a24      	ldr	r2, [pc, #144]	@ (800d540 <TIM_OC1_SetConfig+0x160>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d01f      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a23      	ldr	r2, [pc, #140]	@ (800d544 <TIM_OC1_SetConfig+0x164>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d01b      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a22      	ldr	r2, [pc, #136]	@ (800d548 <TIM_OC1_SetConfig+0x168>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d017      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a21      	ldr	r2, [pc, #132]	@ (800d54c <TIM_OC1_SetConfig+0x16c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d013      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	4a20      	ldr	r2, [pc, #128]	@ (800d550 <TIM_OC1_SetConfig+0x170>)
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	d00f      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a1f      	ldr	r2, [pc, #124]	@ (800d554 <TIM_OC1_SetConfig+0x174>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d00b      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a1e      	ldr	r2, [pc, #120]	@ (800d558 <TIM_OC1_SetConfig+0x178>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d007      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a1d      	ldr	r2, [pc, #116]	@ (800d55c <TIM_OC1_SetConfig+0x17c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d003      	beq.n	800d4f2 <TIM_OC1_SetConfig+0x112>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d560 <TIM_OC1_SetConfig+0x180>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d111      	bne.n	800d516 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d4f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	4313      	orrs	r3, r2
 800d50a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	699b      	ldr	r3, [r3, #24]
 800d510:	693a      	ldr	r2, [r7, #16]
 800d512:	4313      	orrs	r3, r2
 800d514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	693a      	ldr	r2, [r7, #16]
 800d51a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	621a      	str	r2, [r3, #32]
}
 800d530:	bf00      	nop
 800d532:	371c      	adds	r7, #28
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	40012c00 	.word	0x40012c00
 800d540:	50012c00 	.word	0x50012c00
 800d544:	40013400 	.word	0x40013400
 800d548:	50013400 	.word	0x50013400
 800d54c:	40014000 	.word	0x40014000
 800d550:	50014000 	.word	0x50014000
 800d554:	40014400 	.word	0x40014400
 800d558:	50014400 	.word	0x50014400
 800d55c:	40014800 	.word	0x40014800
 800d560:	50014800 	.word	0x50014800

0800d564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d564:	b480      	push	{r7}
 800d566:	b087      	sub	sp, #28
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a1b      	ldr	r3, [r3, #32]
 800d578:	f023 0210 	bic.w	r2, r3, #16
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	021b      	lsls	r3, r3, #8
 800d5a6:	68fa      	ldr	r2, [r7, #12]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	f023 0320 	bic.w	r3, r3, #32
 800d5b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	689b      	ldr	r3, [r3, #8]
 800d5b8:	011b      	lsls	r3, r3, #4
 800d5ba:	697a      	ldr	r2, [r7, #20]
 800d5bc:	4313      	orrs	r3, r2
 800d5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4a36      	ldr	r2, [pc, #216]	@ (800d69c <TIM_OC2_SetConfig+0x138>)
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d00b      	beq.n	800d5e0 <TIM_OC2_SetConfig+0x7c>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	4a35      	ldr	r2, [pc, #212]	@ (800d6a0 <TIM_OC2_SetConfig+0x13c>)
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	d007      	beq.n	800d5e0 <TIM_OC2_SetConfig+0x7c>
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	4a34      	ldr	r2, [pc, #208]	@ (800d6a4 <TIM_OC2_SetConfig+0x140>)
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	d003      	beq.n	800d5e0 <TIM_OC2_SetConfig+0x7c>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	4a33      	ldr	r2, [pc, #204]	@ (800d6a8 <TIM_OC2_SetConfig+0x144>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d10d      	bne.n	800d5fc <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	011b      	lsls	r3, r3, #4
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4a27      	ldr	r2, [pc, #156]	@ (800d69c <TIM_OC2_SetConfig+0x138>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d023      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a26      	ldr	r2, [pc, #152]	@ (800d6a0 <TIM_OC2_SetConfig+0x13c>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d01f      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a25      	ldr	r2, [pc, #148]	@ (800d6a4 <TIM_OC2_SetConfig+0x140>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d01b      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a24      	ldr	r2, [pc, #144]	@ (800d6a8 <TIM_OC2_SetConfig+0x144>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d017      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a23      	ldr	r2, [pc, #140]	@ (800d6ac <TIM_OC2_SetConfig+0x148>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d013      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a22      	ldr	r2, [pc, #136]	@ (800d6b0 <TIM_OC2_SetConfig+0x14c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d00f      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a21      	ldr	r2, [pc, #132]	@ (800d6b4 <TIM_OC2_SetConfig+0x150>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d00b      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a20      	ldr	r2, [pc, #128]	@ (800d6b8 <TIM_OC2_SetConfig+0x154>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d007      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a1f      	ldr	r2, [pc, #124]	@ (800d6bc <TIM_OC2_SetConfig+0x158>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d003      	beq.n	800d64c <TIM_OC2_SetConfig+0xe8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a1e      	ldr	r2, [pc, #120]	@ (800d6c0 <TIM_OC2_SetConfig+0x15c>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d113      	bne.n	800d674 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d65a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	695b      	ldr	r3, [r3, #20]
 800d660:	009b      	lsls	r3, r3, #2
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	4313      	orrs	r3, r2
 800d666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	699b      	ldr	r3, [r3, #24]
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	4313      	orrs	r3, r2
 800d672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	697a      	ldr	r2, [r7, #20]
 800d68c:	621a      	str	r2, [r3, #32]
}
 800d68e:	bf00      	nop
 800d690:	371c      	adds	r7, #28
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	40012c00 	.word	0x40012c00
 800d6a0:	50012c00 	.word	0x50012c00
 800d6a4:	40013400 	.word	0x40013400
 800d6a8:	50013400 	.word	0x50013400
 800d6ac:	40014000 	.word	0x40014000
 800d6b0:	50014000 	.word	0x50014000
 800d6b4:	40014400 	.word	0x40014400
 800d6b8:	50014400 	.word	0x50014400
 800d6bc:	40014800 	.word	0x40014800
 800d6c0:	50014800 	.word	0x50014800

0800d6c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b087      	sub	sp, #28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6a1b      	ldr	r3, [r3, #32]
 800d6d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	69db      	ldr	r3, [r3, #28]
 800d6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d6f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f023 0303 	bic.w	r3, r3, #3
 800d6fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	4313      	orrs	r3, r2
 800d708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	689b      	ldr	r3, [r3, #8]
 800d716:	021b      	lsls	r3, r3, #8
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	4313      	orrs	r3, r2
 800d71c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4a35      	ldr	r2, [pc, #212]	@ (800d7f8 <TIM_OC3_SetConfig+0x134>)
 800d722:	4293      	cmp	r3, r2
 800d724:	d00b      	beq.n	800d73e <TIM_OC3_SetConfig+0x7a>
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4a34      	ldr	r2, [pc, #208]	@ (800d7fc <TIM_OC3_SetConfig+0x138>)
 800d72a:	4293      	cmp	r3, r2
 800d72c:	d007      	beq.n	800d73e <TIM_OC3_SetConfig+0x7a>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4a33      	ldr	r2, [pc, #204]	@ (800d800 <TIM_OC3_SetConfig+0x13c>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d003      	beq.n	800d73e <TIM_OC3_SetConfig+0x7a>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	4a32      	ldr	r2, [pc, #200]	@ (800d804 <TIM_OC3_SetConfig+0x140>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d10d      	bne.n	800d75a <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	021b      	lsls	r3, r3, #8
 800d74c:	697a      	ldr	r2, [r7, #20]
 800d74e:	4313      	orrs	r3, r2
 800d750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d752:	697b      	ldr	r3, [r7, #20]
 800d754:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a26      	ldr	r2, [pc, #152]	@ (800d7f8 <TIM_OC3_SetConfig+0x134>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d023      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a25      	ldr	r2, [pc, #148]	@ (800d7fc <TIM_OC3_SetConfig+0x138>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d01f      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a24      	ldr	r2, [pc, #144]	@ (800d800 <TIM_OC3_SetConfig+0x13c>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d01b      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a23      	ldr	r2, [pc, #140]	@ (800d804 <TIM_OC3_SetConfig+0x140>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d017      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a22      	ldr	r2, [pc, #136]	@ (800d808 <TIM_OC3_SetConfig+0x144>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d013      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a21      	ldr	r2, [pc, #132]	@ (800d80c <TIM_OC3_SetConfig+0x148>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d00f      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a20      	ldr	r2, [pc, #128]	@ (800d810 <TIM_OC3_SetConfig+0x14c>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d00b      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4a1f      	ldr	r2, [pc, #124]	@ (800d814 <TIM_OC3_SetConfig+0x150>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d007      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a1e      	ldr	r2, [pc, #120]	@ (800d818 <TIM_OC3_SetConfig+0x154>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d003      	beq.n	800d7aa <TIM_OC3_SetConfig+0xe6>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d81c <TIM_OC3_SetConfig+0x158>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d113      	bne.n	800d7d2 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d7b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	011b      	lsls	r3, r3, #4
 800d7c0:	693a      	ldr	r2, [r7, #16]
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	011b      	lsls	r3, r3, #4
 800d7cc:	693a      	ldr	r2, [r7, #16]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	68fa      	ldr	r2, [r7, #12]
 800d7dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	685a      	ldr	r2, [r3, #4]
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	697a      	ldr	r2, [r7, #20]
 800d7ea:	621a      	str	r2, [r3, #32]
}
 800d7ec:	bf00      	nop
 800d7ee:	371c      	adds	r7, #28
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	40012c00 	.word	0x40012c00
 800d7fc:	50012c00 	.word	0x50012c00
 800d800:	40013400 	.word	0x40013400
 800d804:	50013400 	.word	0x50013400
 800d808:	40014000 	.word	0x40014000
 800d80c:	50014000 	.word	0x50014000
 800d810:	40014400 	.word	0x40014400
 800d814:	50014400 	.word	0x50014400
 800d818:	40014800 	.word	0x40014800
 800d81c:	50014800 	.word	0x50014800

0800d820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d820:	b480      	push	{r7}
 800d822:	b087      	sub	sp, #28
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	685b      	ldr	r3, [r3, #4]
 800d840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	69db      	ldr	r3, [r3, #28]
 800d846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d84e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d85a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	021b      	lsls	r3, r3, #8
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d86e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	031b      	lsls	r3, r3, #12
 800d876:	697a      	ldr	r2, [r7, #20]
 800d878:	4313      	orrs	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a36      	ldr	r2, [pc, #216]	@ (800d958 <TIM_OC4_SetConfig+0x138>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d00b      	beq.n	800d89c <TIM_OC4_SetConfig+0x7c>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a35      	ldr	r2, [pc, #212]	@ (800d95c <TIM_OC4_SetConfig+0x13c>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d007      	beq.n	800d89c <TIM_OC4_SetConfig+0x7c>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	4a34      	ldr	r2, [pc, #208]	@ (800d960 <TIM_OC4_SetConfig+0x140>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d003      	beq.n	800d89c <TIM_OC4_SetConfig+0x7c>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	4a33      	ldr	r2, [pc, #204]	@ (800d964 <TIM_OC4_SetConfig+0x144>)
 800d898:	4293      	cmp	r3, r2
 800d89a:	d10d      	bne.n	800d8b8 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d8a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	031b      	lsls	r3, r3, #12
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a27      	ldr	r2, [pc, #156]	@ (800d958 <TIM_OC4_SetConfig+0x138>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d023      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	4a26      	ldr	r2, [pc, #152]	@ (800d95c <TIM_OC4_SetConfig+0x13c>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d01f      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a25      	ldr	r2, [pc, #148]	@ (800d960 <TIM_OC4_SetConfig+0x140>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d01b      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	4a24      	ldr	r2, [pc, #144]	@ (800d964 <TIM_OC4_SetConfig+0x144>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d017      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a23      	ldr	r2, [pc, #140]	@ (800d968 <TIM_OC4_SetConfig+0x148>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d013      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a22      	ldr	r2, [pc, #136]	@ (800d96c <TIM_OC4_SetConfig+0x14c>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00f      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	4a21      	ldr	r2, [pc, #132]	@ (800d970 <TIM_OC4_SetConfig+0x150>)
 800d8ec:	4293      	cmp	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	4a20      	ldr	r2, [pc, #128]	@ (800d974 <TIM_OC4_SetConfig+0x154>)
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d007      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d978 <TIM_OC4_SetConfig+0x158>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d003      	beq.n	800d908 <TIM_OC4_SetConfig+0xe8>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	4a1e      	ldr	r2, [pc, #120]	@ (800d97c <TIM_OC4_SetConfig+0x15c>)
 800d904:	4293      	cmp	r3, r2
 800d906:	d113      	bne.n	800d930 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d90e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d916:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	019b      	lsls	r3, r3, #6
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	4313      	orrs	r3, r2
 800d922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	699b      	ldr	r3, [r3, #24]
 800d928:	019b      	lsls	r3, r3, #6
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	621a      	str	r2, [r3, #32]
}
 800d94a:	bf00      	nop
 800d94c:	371c      	adds	r7, #28
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop
 800d958:	40012c00 	.word	0x40012c00
 800d95c:	50012c00 	.word	0x50012c00
 800d960:	40013400 	.word	0x40013400
 800d964:	50013400 	.word	0x50013400
 800d968:	40014000 	.word	0x40014000
 800d96c:	50014000 	.word	0x50014000
 800d970:	40014400 	.word	0x40014400
 800d974:	50014400 	.word	0x50014400
 800d978:	40014800 	.word	0x40014800
 800d97c:	50014800 	.word	0x50014800

0800d980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6a1b      	ldr	r3, [r3, #32]
 800d994:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d9c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	041b      	lsls	r3, r3, #16
 800d9cc:	693a      	ldr	r2, [r7, #16]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a21      	ldr	r2, [pc, #132]	@ (800da5c <TIM_OC5_SetConfig+0xdc>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d023      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a20      	ldr	r2, [pc, #128]	@ (800da60 <TIM_OC5_SetConfig+0xe0>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d01f      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a1f      	ldr	r2, [pc, #124]	@ (800da64 <TIM_OC5_SetConfig+0xe4>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d01b      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a1e      	ldr	r2, [pc, #120]	@ (800da68 <TIM_OC5_SetConfig+0xe8>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d017      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a1d      	ldr	r2, [pc, #116]	@ (800da6c <TIM_OC5_SetConfig+0xec>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d013      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a1c      	ldr	r2, [pc, #112]	@ (800da70 <TIM_OC5_SetConfig+0xf0>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d00f      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a1b      	ldr	r2, [pc, #108]	@ (800da74 <TIM_OC5_SetConfig+0xf4>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d00b      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	4a1a      	ldr	r2, [pc, #104]	@ (800da78 <TIM_OC5_SetConfig+0xf8>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d007      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	4a19      	ldr	r2, [pc, #100]	@ (800da7c <TIM_OC5_SetConfig+0xfc>)
 800da16:	4293      	cmp	r3, r2
 800da18:	d003      	beq.n	800da22 <TIM_OC5_SetConfig+0xa2>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a18      	ldr	r2, [pc, #96]	@ (800da80 <TIM_OC5_SetConfig+0x100>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d109      	bne.n	800da36 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	695b      	ldr	r3, [r3, #20]
 800da2e:	021b      	lsls	r3, r3, #8
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	4313      	orrs	r3, r2
 800da34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	693a      	ldr	r2, [r7, #16]
 800da4e:	621a      	str	r2, [r3, #32]
}
 800da50:	bf00      	nop
 800da52:	371c      	adds	r7, #28
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	40012c00 	.word	0x40012c00
 800da60:	50012c00 	.word	0x50012c00
 800da64:	40013400 	.word	0x40013400
 800da68:	50013400 	.word	0x50013400
 800da6c:	40014000 	.word	0x40014000
 800da70:	50014000 	.word	0x50014000
 800da74:	40014400 	.word	0x40014400
 800da78:	50014400 	.word	0x50014400
 800da7c:	40014800 	.word	0x40014800
 800da80:	50014800 	.word	0x50014800

0800da84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800da84:	b480      	push	{r7}
 800da86:	b087      	sub	sp, #28
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a1b      	ldr	r3, [r3, #32]
 800da98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800daaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	68fa      	ldr	r2, [r7, #12]
 800dac0:	4313      	orrs	r3, r2
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800daca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	689b      	ldr	r3, [r3, #8]
 800dad0:	051b      	lsls	r3, r3, #20
 800dad2:	693a      	ldr	r2, [r7, #16]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	4a22      	ldr	r2, [pc, #136]	@ (800db64 <TIM_OC6_SetConfig+0xe0>)
 800dadc:	4293      	cmp	r3, r2
 800dade:	d023      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	4a21      	ldr	r2, [pc, #132]	@ (800db68 <TIM_OC6_SetConfig+0xe4>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d01f      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4a20      	ldr	r2, [pc, #128]	@ (800db6c <TIM_OC6_SetConfig+0xe8>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d01b      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	4a1f      	ldr	r2, [pc, #124]	@ (800db70 <TIM_OC6_SetConfig+0xec>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d017      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	4a1e      	ldr	r2, [pc, #120]	@ (800db74 <TIM_OC6_SetConfig+0xf0>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d013      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	4a1d      	ldr	r2, [pc, #116]	@ (800db78 <TIM_OC6_SetConfig+0xf4>)
 800db04:	4293      	cmp	r3, r2
 800db06:	d00f      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	4a1c      	ldr	r2, [pc, #112]	@ (800db7c <TIM_OC6_SetConfig+0xf8>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d00b      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	4a1b      	ldr	r2, [pc, #108]	@ (800db80 <TIM_OC6_SetConfig+0xfc>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d007      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	4a1a      	ldr	r2, [pc, #104]	@ (800db84 <TIM_OC6_SetConfig+0x100>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d003      	beq.n	800db28 <TIM_OC6_SetConfig+0xa4>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a19      	ldr	r2, [pc, #100]	@ (800db88 <TIM_OC6_SetConfig+0x104>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d109      	bne.n	800db3c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800db2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	695b      	ldr	r3, [r3, #20]
 800db34:	029b      	lsls	r3, r3, #10
 800db36:	697a      	ldr	r2, [r7, #20]
 800db38:	4313      	orrs	r3, r2
 800db3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	697a      	ldr	r2, [r7, #20]
 800db40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	693a      	ldr	r2, [r7, #16]
 800db54:	621a      	str	r2, [r3, #32]
}
 800db56:	bf00      	nop
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40012c00 	.word	0x40012c00
 800db68:	50012c00 	.word	0x50012c00
 800db6c:	40013400 	.word	0x40013400
 800db70:	50013400 	.word	0x50013400
 800db74:	40014000 	.word	0x40014000
 800db78:	50014000 	.word	0x50014000
 800db7c:	40014400 	.word	0x40014400
 800db80:	50014400 	.word	0x50014400
 800db84:	40014800 	.word	0x40014800
 800db88:	50014800 	.word	0x50014800

0800db8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800dba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbbe:	f023 0307 	bic.w	r3, r3, #7
 800dbc2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	693a      	ldr	r2, [r7, #16]
 800dbd4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	4a4e      	ldr	r2, [pc, #312]	@ (800dd14 <TIM_SlaveTimer_SetConfig+0x188>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	f000 8092 	beq.w	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dbe2:	4a4c      	ldr	r2, [pc, #304]	@ (800dd14 <TIM_SlaveTimer_SetConfig+0x188>)
 800dbe4:	4293      	cmp	r3, r2
 800dbe6:	f200 808b 	bhi.w	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dbea:	4a4b      	ldr	r2, [pc, #300]	@ (800dd18 <TIM_SlaveTimer_SetConfig+0x18c>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	f000 808a 	beq.w	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dbf2:	4a49      	ldr	r2, [pc, #292]	@ (800dd18 <TIM_SlaveTimer_SetConfig+0x18c>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	f200 8083 	bhi.w	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dbfa:	4a48      	ldr	r2, [pc, #288]	@ (800dd1c <TIM_SlaveTimer_SetConfig+0x190>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	f000 8082 	beq.w	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc02:	4a46      	ldr	r2, [pc, #280]	@ (800dd1c <TIM_SlaveTimer_SetConfig+0x190>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d87b      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc08:	4a45      	ldr	r2, [pc, #276]	@ (800dd20 <TIM_SlaveTimer_SetConfig+0x194>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d07b      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc0e:	4a44      	ldr	r2, [pc, #272]	@ (800dd20 <TIM_SlaveTimer_SetConfig+0x194>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d875      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc18:	d075      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc1a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800dc1e:	d86f      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc24:	d06f      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc2a:	d869      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc2c:	2b70      	cmp	r3, #112	@ 0x70
 800dc2e:	d01a      	beq.n	800dc66 <TIM_SlaveTimer_SetConfig+0xda>
 800dc30:	2b70      	cmp	r3, #112	@ 0x70
 800dc32:	d865      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc34:	2b60      	cmp	r3, #96	@ 0x60
 800dc36:	d059      	beq.n	800dcec <TIM_SlaveTimer_SetConfig+0x160>
 800dc38:	2b60      	cmp	r3, #96	@ 0x60
 800dc3a:	d861      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc3c:	2b50      	cmp	r3, #80	@ 0x50
 800dc3e:	d04b      	beq.n	800dcd8 <TIM_SlaveTimer_SetConfig+0x14c>
 800dc40:	2b50      	cmp	r3, #80	@ 0x50
 800dc42:	d85d      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc44:	2b40      	cmp	r3, #64	@ 0x40
 800dc46:	d019      	beq.n	800dc7c <TIM_SlaveTimer_SetConfig+0xf0>
 800dc48:	2b40      	cmp	r3, #64	@ 0x40
 800dc4a:	d859      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc4c:	2b30      	cmp	r3, #48	@ 0x30
 800dc4e:	d05a      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc50:	2b30      	cmp	r3, #48	@ 0x30
 800dc52:	d855      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc54:	2b20      	cmp	r3, #32
 800dc56:	d056      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc58:	2b20      	cmp	r3, #32
 800dc5a:	d851      	bhi.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d052      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc60:	2b10      	cmp	r3, #16
 800dc62:	d050      	beq.n	800dd06 <TIM_SlaveTimer_SetConfig+0x17a>
 800dc64:	e04c      	b.n	800dd00 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800dc76:	f000 fa1d 	bl	800e0b4 <TIM_ETR_SetConfig>
      break;
 800dc7a:	e045      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b05      	cmp	r3, #5
 800dc82:	d004      	beq.n	800dc8e <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800dc88:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800dc8c:	d101      	bne.n	800dc92 <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e03b      	b.n	800dd0a <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6a1a      	ldr	r2, [r3, #32]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f022 0201 	bic.w	r2, r2, #1
 800dca8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	699b      	ldr	r3, [r3, #24]
 800dcb0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dcb8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	691b      	ldr	r3, [r3, #16]
 800dcbe:	011b      	lsls	r3, r3, #4
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	4313      	orrs	r3, r2
 800dcc4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	68fa      	ldr	r2, [r7, #12]
 800dcd4:	621a      	str	r2, [r3, #32]
      break;
 800dcd6:	e017      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dce4:	461a      	mov	r2, r3
 800dce6:	f000 f8b3 	bl	800de50 <TIM_TI1_ConfigInputStage>
      break;
 800dcea:	e00d      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	f000 f915 	bl	800df28 <TIM_TI2_ConfigInputStage>
      break;
 800dcfe:	e003      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	75fb      	strb	r3, [r7, #23]
      break;
 800dd04:	e000      	b.n	800dd08 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800dd06:	bf00      	nop
  }

  return status;
 800dd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3718      	adds	r7, #24
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop
 800dd14:	00100070 	.word	0x00100070
 800dd18:	00100040 	.word	0x00100040
 800dd1c:	00100030 	.word	0x00100030
 800dd20:	00100020 	.word	0x00100020

0800dd24 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b087      	sub	sp, #28
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	60f8      	str	r0, [r7, #12]
 800dd2c:	60b9      	str	r1, [r7, #8]
 800dd2e:	607a      	str	r2, [r7, #4]
 800dd30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	6a1b      	ldr	r3, [r3, #32]
 800dd3c:	f023 0201 	bic.w	r2, r3, #1
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	699b      	ldr	r3, [r3, #24]
 800dd48:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	4a34      	ldr	r2, [pc, #208]	@ (800de20 <TIM_TI1_SetConfig+0xfc>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d033      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	4a33      	ldr	r2, [pc, #204]	@ (800de24 <TIM_TI1_SetConfig+0x100>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d02f      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd60:	d02b      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd68:	d027      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	4a2e      	ldr	r2, [pc, #184]	@ (800de28 <TIM_TI1_SetConfig+0x104>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d023      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4a2d      	ldr	r2, [pc, #180]	@ (800de2c <TIM_TI1_SetConfig+0x108>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d01f      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	4a2c      	ldr	r2, [pc, #176]	@ (800de30 <TIM_TI1_SetConfig+0x10c>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d01b      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	4a2b      	ldr	r2, [pc, #172]	@ (800de34 <TIM_TI1_SetConfig+0x110>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d017      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	4a2a      	ldr	r2, [pc, #168]	@ (800de38 <TIM_TI1_SetConfig+0x114>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d013      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	4a29      	ldr	r2, [pc, #164]	@ (800de3c <TIM_TI1_SetConfig+0x118>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d00f      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	4a28      	ldr	r2, [pc, #160]	@ (800de40 <TIM_TI1_SetConfig+0x11c>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d00b      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	4a27      	ldr	r2, [pc, #156]	@ (800de44 <TIM_TI1_SetConfig+0x120>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d007      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	4a26      	ldr	r2, [pc, #152]	@ (800de48 <TIM_TI1_SetConfig+0x124>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d003      	beq.n	800ddba <TIM_TI1_SetConfig+0x96>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	4a25      	ldr	r2, [pc, #148]	@ (800de4c <TIM_TI1_SetConfig+0x128>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d101      	bne.n	800ddbe <TIM_TI1_SetConfig+0x9a>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e000      	b.n	800ddc0 <TIM_TI1_SetConfig+0x9c>
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d008      	beq.n	800ddd6 <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f023 0303 	bic.w	r3, r3, #3
 800ddca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ddcc:	697a      	ldr	r2, [r7, #20]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	4313      	orrs	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	e003      	b.n	800ddde <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	f043 0301 	orr.w	r3, r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dde4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	011b      	lsls	r3, r3, #4
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	697a      	ldr	r2, [r7, #20]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	f023 030a 	bic.w	r3, r3, #10
 800ddf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	f003 030a 	and.w	r3, r3, #10
 800de00:	693a      	ldr	r2, [r7, #16]
 800de02:	4313      	orrs	r3, r2
 800de04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	621a      	str	r2, [r3, #32]
}
 800de12:	bf00      	nop
 800de14:	371c      	adds	r7, #28
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	40012c00 	.word	0x40012c00
 800de24:	50012c00 	.word	0x50012c00
 800de28:	40000400 	.word	0x40000400
 800de2c:	50000400 	.word	0x50000400
 800de30:	40000800 	.word	0x40000800
 800de34:	50000800 	.word	0x50000800
 800de38:	40000c00 	.word	0x40000c00
 800de3c:	50000c00 	.word	0x50000c00
 800de40:	40013400 	.word	0x40013400
 800de44:	50013400 	.word	0x50013400
 800de48:	40014000 	.word	0x40014000
 800de4c:	50014000 	.word	0x50014000

0800de50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de50:	b480      	push	{r7}
 800de52:	b087      	sub	sp, #28
 800de54:	af00      	add	r7, sp, #0
 800de56:	60f8      	str	r0, [r7, #12]
 800de58:	60b9      	str	r1, [r7, #8]
 800de5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6a1b      	ldr	r3, [r3, #32]
 800de66:	f023 0201 	bic.w	r2, r3, #1
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	011b      	lsls	r3, r3, #4
 800de80:	693a      	ldr	r2, [r7, #16]
 800de82:	4313      	orrs	r3, r2
 800de84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f023 030a 	bic.w	r3, r3, #10
 800de8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de8e:	697a      	ldr	r2, [r7, #20]
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4313      	orrs	r3, r2
 800de94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	621a      	str	r2, [r3, #32]
}
 800dea2:	bf00      	nop
 800dea4:	371c      	adds	r7, #28
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800deae:	b480      	push	{r7}
 800deb0:	b087      	sub	sp, #28
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	607a      	str	r2, [r7, #4]
 800deba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	6a1b      	ldr	r3, [r3, #32]
 800dec6:	f023 0210 	bic.w	r2, r3, #16
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800deda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	021b      	lsls	r3, r3, #8
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800deec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	031b      	lsls	r3, r3, #12
 800def2:	b29b      	uxth	r3, r3
 800def4:	693a      	ldr	r2, [r7, #16]
 800def6:	4313      	orrs	r3, r2
 800def8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800df00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	011b      	lsls	r3, r3, #4
 800df06:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800df0a:	697a      	ldr	r2, [r7, #20]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	697a      	ldr	r2, [r7, #20]
 800df1a:	621a      	str	r2, [r3, #32]
}
 800df1c:	bf00      	nop
 800df1e:	371c      	adds	r7, #28
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df28:	b480      	push	{r7}
 800df2a:	b087      	sub	sp, #28
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6a1b      	ldr	r3, [r3, #32]
 800df38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	f023 0210 	bic.w	r2, r3, #16
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800df52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	031b      	lsls	r3, r3, #12
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800df64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	011b      	lsls	r3, r3, #4
 800df6a:	697a      	ldr	r2, [r7, #20]
 800df6c:	4313      	orrs	r3, r2
 800df6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	693a      	ldr	r2, [r7, #16]
 800df74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	697a      	ldr	r2, [r7, #20]
 800df7a:	621a      	str	r2, [r3, #32]
}
 800df7c:	bf00      	nop
 800df7e:	371c      	adds	r7, #28
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800df88:	b480      	push	{r7}
 800df8a:	b087      	sub	sp, #28
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	60f8      	str	r0, [r7, #12]
 800df90:	60b9      	str	r1, [r7, #8]
 800df92:	607a      	str	r2, [r7, #4]
 800df94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6a1b      	ldr	r3, [r3, #32]
 800dfa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	69db      	ldr	r3, [r3, #28]
 800dfac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f023 0303 	bic.w	r3, r3, #3
 800dfb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dfc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	011b      	lsls	r3, r3, #4
 800dfca:	b2db      	uxtb	r3, r3
 800dfcc:	693a      	ldr	r2, [r7, #16]
 800dfce:	4313      	orrs	r3, r2
 800dfd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800dfd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	697a      	ldr	r2, [r7, #20]
 800dff2:	621a      	str	r2, [r3, #32]
}
 800dff4:	bf00      	nop
 800dff6:	371c      	adds	r7, #28
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e000:	b480      	push	{r7}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
 800e00c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6a1b      	ldr	r3, [r3, #32]
 800e018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e02c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	021b      	lsls	r3, r3, #8
 800e032:	693a      	ldr	r2, [r7, #16]
 800e034:	4313      	orrs	r3, r2
 800e036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e03e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	031b      	lsls	r3, r3, #12
 800e044:	b29b      	uxth	r3, r3
 800e046:	693a      	ldr	r2, [r7, #16]
 800e048:	4313      	orrs	r3, r2
 800e04a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800e052:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	031b      	lsls	r3, r3, #12
 800e058:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	4313      	orrs	r3, r2
 800e060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	693a      	ldr	r2, [r7, #16]
 800e066:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	621a      	str	r2, [r3, #32]
}
 800e06e:	bf00      	nop
 800e070:	371c      	adds	r7, #28
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b085      	sub	sp, #20
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f043 0307 	orr.w	r3, r3, #7
 800e0a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	609a      	str	r2, [r3, #8]
}
 800e0a8:	bf00      	nop
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b087      	sub	sp, #28
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
 800e0c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	689b      	ldr	r3, [r3, #8]
 800e0c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	021a      	lsls	r2, r3, #8
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	697a      	ldr	r2, [r7, #20]
 800e0e6:	609a      	str	r2, [r3, #8]
}
 800e0e8:	bf00      	nop
 800e0ea:	371c      	adds	r7, #28
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e104:	2b01      	cmp	r3, #1
 800e106:	d101      	bne.n	800e10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e108:	2302      	movs	r3, #2
 800e10a:	e097      	b.n	800e23c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2201      	movs	r2, #1
 800e110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2202      	movs	r2, #2
 800e118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a45      	ldr	r2, [pc, #276]	@ (800e248 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00e      	beq.n	800e154 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a44      	ldr	r2, [pc, #272]	@ (800e24c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d009      	beq.n	800e154 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a42      	ldr	r2, [pc, #264]	@ (800e250 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d004      	beq.n	800e154 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a41      	ldr	r2, [pc, #260]	@ (800e254 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d108      	bne.n	800e166 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e15a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	4313      	orrs	r3, r2
 800e164:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e16c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	4313      	orrs	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a2f      	ldr	r2, [pc, #188]	@ (800e248 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d040      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4a2e      	ldr	r2, [pc, #184]	@ (800e24c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d03b      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1a0:	d036      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1aa:	d031      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a29      	ldr	r2, [pc, #164]	@ (800e258 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d02c      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a28      	ldr	r2, [pc, #160]	@ (800e25c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d027      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a26      	ldr	r2, [pc, #152]	@ (800e260 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d022      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a25      	ldr	r2, [pc, #148]	@ (800e264 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d01d      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a23      	ldr	r2, [pc, #140]	@ (800e268 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d018      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a22      	ldr	r2, [pc, #136]	@ (800e26c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d013      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a18      	ldr	r2, [pc, #96]	@ (800e250 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d00e      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	4a17      	ldr	r2, [pc, #92]	@ (800e254 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d009      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a1b      	ldr	r2, [pc, #108]	@ (800e270 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d004      	beq.n	800e210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a1a      	ldr	r2, [pc, #104]	@ (800e274 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d10c      	bne.n	800e22a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e216:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	4313      	orrs	r3, r2
 800e220:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	68ba      	ldr	r2, [r7, #8]
 800e228:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3714      	adds	r7, #20
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	40012c00 	.word	0x40012c00
 800e24c:	50012c00 	.word	0x50012c00
 800e250:	40013400 	.word	0x40013400
 800e254:	50013400 	.word	0x50013400
 800e258:	40000400 	.word	0x40000400
 800e25c:	50000400 	.word	0x50000400
 800e260:	40000800 	.word	0x40000800
 800e264:	50000800 	.word	0x50000800
 800e268:	40000c00 	.word	0x40000c00
 800e26c:	50000c00 	.word	0x50000c00
 800e270:	40014000 	.word	0x40014000
 800e274:	50014000 	.word	0x50014000

0800e278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d101      	bne.n	800e294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e290:	2302      	movs	r3, #2
 800e292:	e07d      	b.n	800e390 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	68db      	ldr	r3, [r3, #12]
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	689b      	ldr	r3, [r3, #8]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	685b      	ldr	r3, [r3, #4]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	041b      	lsls	r3, r3, #16
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	69db      	ldr	r3, [r3, #28]
 800e318:	4313      	orrs	r3, r2
 800e31a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a1e      	ldr	r2, [pc, #120]	@ (800e39c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d00e      	beq.n	800e344 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a1d      	ldr	r2, [pc, #116]	@ (800e3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d009      	beq.n	800e344 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a1b      	ldr	r2, [pc, #108]	@ (800e3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d004      	beq.n	800e344 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a1a      	ldr	r2, [pc, #104]	@ (800e3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d11c      	bne.n	800e37e <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e34e:	051b      	lsls	r3, r3, #20
 800e350:	4313      	orrs	r3, r2
 800e352:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	4313      	orrs	r3, r2
 800e360:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e36c:	4313      	orrs	r3, r2
 800e36e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e38e:	2300      	movs	r3, #0
}
 800e390:	4618      	mov	r0, r3
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr
 800e39c:	40012c00 	.word	0x40012c00
 800e3a0:	50012c00 	.word	0x50012c00
 800e3a4:	40013400 	.word	0x40013400
 800e3a8:	50013400 	.word	0x50013400

0800e3ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b083      	sub	sp, #12
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3b4:	bf00      	nop
 800e3b6:	370c      	adds	r7, #12
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3c8:	bf00      	nop
 800e3ca:	370c      	adds	r7, #12
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d2:	4770      	bx	lr

0800e3d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3dc:	bf00      	nop
 800e3de:	370c      	adds	r7, #12
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e6:	4770      	bx	lr

0800e3e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800e3e8:	b480      	push	{r7}
 800e3ea:	b083      	sub	sp, #12
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800e3f0:	bf00      	nop
 800e3f2:	370c      	adds	r7, #12
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr

0800e3fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b083      	sub	sp, #12
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800e404:	bf00      	nop
 800e406:	370c      	adds	r7, #12
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e042      	b.n	800e4d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e450:	2b00      	cmp	r3, #0
 800e452:	d106      	bne.n	800e462 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7f4 fbe5 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2224      	movs	r2, #36	@ 0x24
 800e466:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f022 0201 	bic.w	r2, r2, #1
 800e478:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d002      	beq.n	800e488 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f9d6 	bl	800e834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 f825 	bl	800e4d8 <UART_SetConfig>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b01      	cmp	r3, #1
 800e492:	d101      	bne.n	800e498 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	e01b      	b.n	800e4d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	685a      	ldr	r2, [r3, #4]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e4a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	689a      	ldr	r2, [r3, #8]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e4b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f042 0201 	orr.w	r2, r2, #1
 800e4c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 fa55 	bl	800e978 <UART_CheckIdleState>
 800e4ce:	4603      	mov	r3, r0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e4dc:	b094      	sub	sp, #80	@ 0x50
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800e4e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	4b83      	ldr	r3, [pc, #524]	@ (800e6fc <UART_SetConfig+0x224>)
 800e4ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f2:	689a      	ldr	r2, [r3, #8]
 800e4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	431a      	orrs	r2, r3
 800e500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e502:	69db      	ldr	r3, [r3, #28]
 800e504:	4313      	orrs	r3, r2
 800e506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	497c      	ldr	r1, [pc, #496]	@ (800e700 <UART_SetConfig+0x228>)
 800e510:	4019      	ands	r1, r3
 800e512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e518:	430b      	orrs	r3, r1
 800e51a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e51c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e528:	68d9      	ldr	r1, [r3, #12]
 800e52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	ea40 0301 	orr.w	r3, r0, r1
 800e532:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4b6f      	ldr	r3, [pc, #444]	@ (800e6fc <UART_SetConfig+0x224>)
 800e540:	429a      	cmp	r2, r3
 800e542:	d009      	beq.n	800e558 <UART_SetConfig+0x80>
 800e544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	4b6e      	ldr	r3, [pc, #440]	@ (800e704 <UART_SetConfig+0x22c>)
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d004      	beq.n	800e558 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e550:	6a1a      	ldr	r2, [r3, #32]
 800e552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e554:	4313      	orrs	r3, r2
 800e556:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800e562:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800e566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e56c:	430b      	orrs	r3, r1
 800e56e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e576:	f023 000f 	bic.w	r0, r3, #15
 800e57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	ea40 0301 	orr.w	r3, r0, r1
 800e586:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	4b5e      	ldr	r3, [pc, #376]	@ (800e708 <UART_SetConfig+0x230>)
 800e58e:	429a      	cmp	r2, r3
 800e590:	d102      	bne.n	800e598 <UART_SetConfig+0xc0>
 800e592:	2301      	movs	r3, #1
 800e594:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e596:	e032      	b.n	800e5fe <UART_SetConfig+0x126>
 800e598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	4b5b      	ldr	r3, [pc, #364]	@ (800e70c <UART_SetConfig+0x234>)
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d102      	bne.n	800e5a8 <UART_SetConfig+0xd0>
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5a6:	e02a      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5aa:	681a      	ldr	r2, [r3, #0]
 800e5ac:	4b58      	ldr	r3, [pc, #352]	@ (800e710 <UART_SetConfig+0x238>)
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d102      	bne.n	800e5b8 <UART_SetConfig+0xe0>
 800e5b2:	2304      	movs	r3, #4
 800e5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5b6:	e022      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	4b55      	ldr	r3, [pc, #340]	@ (800e714 <UART_SetConfig+0x23c>)
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d102      	bne.n	800e5c8 <UART_SetConfig+0xf0>
 800e5c2:	2308      	movs	r3, #8
 800e5c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5c6:	e01a      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	4b52      	ldr	r3, [pc, #328]	@ (800e718 <UART_SetConfig+0x240>)
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	d102      	bne.n	800e5d8 <UART_SetConfig+0x100>
 800e5d2:	2310      	movs	r3, #16
 800e5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5d6:	e012      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	4b4f      	ldr	r3, [pc, #316]	@ (800e71c <UART_SetConfig+0x244>)
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d103      	bne.n	800e5ea <UART_SetConfig+0x112>
 800e5e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800e5e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5e8:	e009      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	4b43      	ldr	r3, [pc, #268]	@ (800e6fc <UART_SetConfig+0x224>)
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d102      	bne.n	800e5fa <UART_SetConfig+0x122>
 800e5f4:	2320      	movs	r3, #32
 800e5f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5f8:	e001      	b.n	800e5fe <UART_SetConfig+0x126>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e5fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	4b3e      	ldr	r3, [pc, #248]	@ (800e6fc <UART_SetConfig+0x224>)
 800e604:	429a      	cmp	r2, r3
 800e606:	d005      	beq.n	800e614 <UART_SetConfig+0x13c>
 800e608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	4b3d      	ldr	r3, [pc, #244]	@ (800e704 <UART_SetConfig+0x22c>)
 800e60e:	429a      	cmp	r2, r3
 800e610:	f040 8088 	bne.w	800e724 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e616:	2200      	movs	r2, #0
 800e618:	623b      	str	r3, [r7, #32]
 800e61a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e61c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e620:	f7fb fe12 	bl	800a248 <HAL_RCCEx_GetPeriphCLKFreq>
 800e624:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800e626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 80eb 	beq.w	800e804 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e632:	4a3b      	ldr	r2, [pc, #236]	@ (800e720 <UART_SetConfig+0x248>)
 800e634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e638:	461a      	mov	r2, r3
 800e63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e63c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e640:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	4613      	mov	r3, r2
 800e648:	005b      	lsls	r3, r3, #1
 800e64a:	4413      	add	r3, r2
 800e64c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e64e:	429a      	cmp	r2, r3
 800e650:	d305      	bcc.n	800e65e <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d903      	bls.n	800e666 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e664:	e048      	b.n	800e6f8 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e668:	2200      	movs	r2, #0
 800e66a:	61bb      	str	r3, [r7, #24]
 800e66c:	61fa      	str	r2, [r7, #28]
 800e66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e672:	4a2b      	ldr	r2, [pc, #172]	@ (800e720 <UART_SetConfig+0x248>)
 800e674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e678:	b29b      	uxth	r3, r3
 800e67a:	2200      	movs	r2, #0
 800e67c:	613b      	str	r3, [r7, #16]
 800e67e:	617a      	str	r2, [r7, #20]
 800e680:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e684:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e688:	f7f1 fe10 	bl	80002ac <__aeabi_uldivmod>
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4610      	mov	r0, r2
 800e692:	4619      	mov	r1, r3
 800e694:	f04f 0200 	mov.w	r2, #0
 800e698:	f04f 0300 	mov.w	r3, #0
 800e69c:	020b      	lsls	r3, r1, #8
 800e69e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e6a2:	0202      	lsls	r2, r0, #8
 800e6a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e6a6:	6849      	ldr	r1, [r1, #4]
 800e6a8:	0849      	lsrs	r1, r1, #1
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	4605      	mov	r5, r0
 800e6b0:	eb12 0804 	adds.w	r8, r2, r4
 800e6b4:	eb43 0905 	adc.w	r9, r3, r5
 800e6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ba:	685b      	ldr	r3, [r3, #4]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	60bb      	str	r3, [r7, #8]
 800e6c0:	60fa      	str	r2, [r7, #12]
 800e6c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6c6:	4640      	mov	r0, r8
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	f7f1 fdef 	bl	80002ac <__aeabi_uldivmod>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e6dc:	d308      	bcc.n	800e6f0 <UART_SetConfig+0x218>
 800e6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e6e4:	d204      	bcs.n	800e6f0 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800e6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e6ec:	60da      	str	r2, [r3, #12]
 800e6ee:	e003      	b.n	800e6f8 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800e6f6:	e085      	b.n	800e804 <UART_SetConfig+0x32c>
 800e6f8:	e084      	b.n	800e804 <UART_SetConfig+0x32c>
 800e6fa:	bf00      	nop
 800e6fc:	46002400 	.word	0x46002400
 800e700:	cfff69f3 	.word	0xcfff69f3
 800e704:	56002400 	.word	0x56002400
 800e708:	40013800 	.word	0x40013800
 800e70c:	40004400 	.word	0x40004400
 800e710:	40004800 	.word	0x40004800
 800e714:	40004c00 	.word	0x40004c00
 800e718:	40005000 	.word	0x40005000
 800e71c:	40006400 	.word	0x40006400
 800e720:	0800f000 	.word	0x0800f000
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e726:	69db      	ldr	r3, [r3, #28]
 800e728:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e72c:	d13c      	bne.n	800e7a8 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e72e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e730:	2200      	movs	r2, #0
 800e732:	603b      	str	r3, [r7, #0]
 800e734:	607a      	str	r2, [r7, #4]
 800e736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e73a:	f7fb fd85 	bl	800a248 <HAL_RCCEx_GetPeriphCLKFreq>
 800e73e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e742:	2b00      	cmp	r3, #0
 800e744:	d05e      	beq.n	800e804 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e74a:	4a39      	ldr	r2, [pc, #228]	@ (800e830 <UART_SetConfig+0x358>)
 800e74c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e750:	461a      	mov	r2, r3
 800e752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e754:	fbb3 f3f2 	udiv	r3, r3, r2
 800e758:	005a      	lsls	r2, r3, #1
 800e75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	085b      	lsrs	r3, r3, #1
 800e760:	441a      	add	r2, r3
 800e762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	fbb2 f3f3 	udiv	r3, r2, r3
 800e76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e76e:	2b0f      	cmp	r3, #15
 800e770:	d916      	bls.n	800e7a0 <UART_SetConfig+0x2c8>
 800e772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e778:	d212      	bcs.n	800e7a0 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e77a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	f023 030f 	bic.w	r3, r3, #15
 800e782:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e786:	085b      	lsrs	r3, r3, #1
 800e788:	b29b      	uxth	r3, r3
 800e78a:	f003 0307 	and.w	r3, r3, #7
 800e78e:	b29a      	uxth	r2, r3
 800e790:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e792:	4313      	orrs	r3, r2
 800e794:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800e796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e79c:	60da      	str	r2, [r3, #12]
 800e79e:	e031      	b.n	800e804 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e7a6:	e02d      	b.n	800e804 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e7a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	469a      	mov	sl, r3
 800e7ae:	4693      	mov	fp, r2
 800e7b0:	4650      	mov	r0, sl
 800e7b2:	4659      	mov	r1, fp
 800e7b4:	f7fb fd48 	bl	800a248 <HAL_RCCEx_GetPeriphCLKFreq>
 800e7b8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800e7ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d021      	beq.n	800e804 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e7c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7c4:	4a1a      	ldr	r2, [pc, #104]	@ (800e830 <UART_SetConfig+0x358>)
 800e7c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800e7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	085b      	lsrs	r3, r3, #1
 800e7d8:	441a      	add	r2, r3
 800e7da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7e6:	2b0f      	cmp	r3, #15
 800e7e8:	d909      	bls.n	800e7fe <UART_SetConfig+0x326>
 800e7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7f0:	d205      	bcs.n	800e7fe <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	60da      	str	r2, [r3, #12]
 800e7fc:	e002      	b.n	800e804 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e806:	2201      	movs	r2, #1
 800e808:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800e80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e80e:	2201      	movs	r2, #1
 800e810:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e816:	2200      	movs	r2, #0
 800e818:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800e81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e81c:	2200      	movs	r2, #0
 800e81e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800e820:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800e824:	4618      	mov	r0, r3
 800e826:	3750      	adds	r7, #80	@ 0x50
 800e828:	46bd      	mov	sp, r7
 800e82a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e82e:	bf00      	nop
 800e830:	0800f000 	.word	0x0800f000

0800e834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e840:	f003 0308 	and.w	r3, r3, #8
 800e844:	2b00      	cmp	r3, #0
 800e846:	d00a      	beq.n	800e85e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	430a      	orrs	r2, r1
 800e85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e862:	f003 0301 	and.w	r3, r3, #1
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00a      	beq.n	800e880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	430a      	orrs	r2, r1
 800e87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e884:	f003 0302 	and.w	r3, r3, #2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00a      	beq.n	800e8a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8a6:	f003 0304 	and.w	r3, r3, #4
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00a      	beq.n	800e8c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	430a      	orrs	r2, r1
 800e8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8c8:	f003 0310 	and.w	r3, r3, #16
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	430a      	orrs	r2, r1
 800e8e4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8ea:	f003 0320 	and.w	r3, r3, #32
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00a      	beq.n	800e908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	430a      	orrs	r2, r1
 800e906:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e90c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e910:	2b00      	cmp	r3, #0
 800e912:	d01a      	beq.n	800e94a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	430a      	orrs	r2, r1
 800e928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e92e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e932:	d10a      	bne.n	800e94a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00a      	beq.n	800e96c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	430a      	orrs	r2, r1
 800e96a:	605a      	str	r2, [r3, #4]
  }
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b098      	sub	sp, #96	@ 0x60
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e988:	f7f4 fc90 	bl	80032ac <HAL_GetTick>
 800e98c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f003 0308 	and.w	r3, r3, #8
 800e998:	2b08      	cmp	r3, #8
 800e99a:	d12f      	bne.n	800e9fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e99c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f88e 	bl	800eacc <UART_WaitOnFlagUntilTimeout>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d022      	beq.n	800e9fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9be:	e853 3f00 	ldrex	r3, [r3]
 800e9c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ca:	653b      	str	r3, [r7, #80]	@ 0x50
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9dc:	e841 2300 	strex	r3, r2, [r1]
 800e9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1e6      	bne.n	800e9b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9f8:	2303      	movs	r3, #3
 800e9fa:	e063      	b.n	800eac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f003 0304 	and.w	r3, r3, #4
 800ea06:	2b04      	cmp	r3, #4
 800ea08:	d149      	bne.n	800ea9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea12:	2200      	movs	r2, #0
 800ea14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f000 f857 	bl	800eacc <UART_WaitOnFlagUntilTimeout>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d03c      	beq.n	800ea9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2c:	e853 3f00 	ldrex	r3, [r3]
 800ea30:	623b      	str	r3, [r7, #32]
   return(result);
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea42:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea4a:	e841 2300 	strex	r3, r2, [r1]
 800ea4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ea50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d1e6      	bne.n	800ea24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	e853 3f00 	ldrex	r3, [r3]
 800ea64:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f023 0301 	bic.w	r3, r3, #1
 800ea6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ea76:	61fa      	str	r2, [r7, #28]
 800ea78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7a:	69b9      	ldr	r1, [r7, #24]
 800ea7c:	69fa      	ldr	r2, [r7, #28]
 800ea7e:	e841 2300 	strex	r3, r2, [r1]
 800ea82:	617b      	str	r3, [r7, #20]
   return(result);
 800ea84:	697b      	ldr	r3, [r7, #20]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1e5      	bne.n	800ea56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2220      	movs	r2, #32
 800ea8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea9a:	2303      	movs	r3, #3
 800ea9c:	e012      	b.n	800eac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2220      	movs	r2, #32
 800eaa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2220      	movs	r2, #32
 800eaaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eac2:	2300      	movs	r3, #0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3758      	adds	r7, #88	@ 0x58
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	60f8      	str	r0, [r7, #12]
 800ead4:	60b9      	str	r1, [r7, #8]
 800ead6:	603b      	str	r3, [r7, #0]
 800ead8:	4613      	mov	r3, r2
 800eada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eadc:	e04f      	b.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eade:	69bb      	ldr	r3, [r7, #24]
 800eae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae4:	d04b      	beq.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eae6:	f7f4 fbe1 	bl	80032ac <HAL_GetTick>
 800eaea:	4602      	mov	r2, r0
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	69ba      	ldr	r2, [r7, #24]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d302      	bcc.n	800eafc <UART_WaitOnFlagUntilTimeout+0x30>
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d101      	bne.n	800eb00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800eafc:	2303      	movs	r3, #3
 800eafe:	e04e      	b.n	800eb9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f003 0304 	and.w	r3, r3, #4
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d037      	beq.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	2b80      	cmp	r3, #128	@ 0x80
 800eb12:	d034      	beq.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	2b40      	cmp	r3, #64	@ 0x40
 800eb18:	d031      	beq.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	69db      	ldr	r3, [r3, #28]
 800eb20:	f003 0308 	and.w	r3, r3, #8
 800eb24:	2b08      	cmp	r3, #8
 800eb26:	d110      	bne.n	800eb4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2208      	movs	r2, #8
 800eb2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 f838 	bl	800eba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2208      	movs	r2, #8
 800eb3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800eb46:	2301      	movs	r3, #1
 800eb48:	e029      	b.n	800eb9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	69db      	ldr	r3, [r3, #28]
 800eb50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eb54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb58:	d111      	bne.n	800eb7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800eb62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eb64:	68f8      	ldr	r0, [r7, #12]
 800eb66:	f000 f81e 	bl	800eba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2220      	movs	r2, #32
 800eb6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2200      	movs	r2, #0
 800eb76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	e00f      	b.n	800eb9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	69da      	ldr	r2, [r3, #28]
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	4013      	ands	r3, r2
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	bf0c      	ite	eq
 800eb8e:	2301      	moveq	r3, #1
 800eb90:	2300      	movne	r3, #0
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	461a      	mov	r2, r3
 800eb96:	79fb      	ldrb	r3, [r7, #7]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d0a0      	beq.n	800eade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b095      	sub	sp, #84	@ 0x54
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebb6:	e853 3f00 	ldrex	r3, [r3]
 800ebba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ebbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ebc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	461a      	mov	r2, r3
 800ebca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebcc:	643b      	str	r3, [r7, #64]	@ 0x40
 800ebce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ebd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ebd4:	e841 2300 	strex	r3, r2, [r1]
 800ebd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ebda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d1e6      	bne.n	800ebae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe8:	6a3b      	ldr	r3, [r7, #32]
 800ebea:	e853 3f00 	ldrex	r3, [r3]
 800ebee:	61fb      	str	r3, [r7, #28]
   return(result);
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ebf6:	f023 0301 	bic.w	r3, r3, #1
 800ebfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3308      	adds	r3, #8
 800ec02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ec04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ec06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ec0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ec0c:	e841 2300 	strex	r3, r2, [r1]
 800ec10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ec12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1e3      	bne.n	800ebe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d118      	bne.n	800ec52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	e853 3f00 	ldrex	r3, [r3]
 800ec2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec2e:	68bb      	ldr	r3, [r7, #8]
 800ec30:	f023 0310 	bic.w	r3, r3, #16
 800ec34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	461a      	mov	r2, r3
 800ec3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec42:	6979      	ldr	r1, [r7, #20]
 800ec44:	69ba      	ldr	r2, [r7, #24]
 800ec46:	e841 2300 	strex	r3, r2, [r1]
 800ec4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1e6      	bne.n	800ec20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2220      	movs	r2, #32
 800ec56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ec66:	bf00      	nop
 800ec68:	3754      	adds	r7, #84	@ 0x54
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b085      	sub	sp, #20
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d101      	bne.n	800ec88 <HAL_UARTEx_DisableFifoMode+0x16>
 800ec84:	2302      	movs	r3, #2
 800ec86:	e027      	b.n	800ecd8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2224      	movs	r2, #36	@ 0x24
 800ec94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f022 0201 	bic.w	r2, r2, #1
 800ecae:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ecb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2220      	movs	r2, #32
 800ecca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d101      	bne.n	800ecfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	e02d      	b.n	800ed58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2224      	movs	r2, #36	@ 0x24
 800ed08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 0201 	bic.w	r2, r2, #1
 800ed22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	683a      	ldr	r2, [r7, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 f84f 	bl	800eddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	68fa      	ldr	r2, [r7, #12]
 800ed44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2220      	movs	r2, #32
 800ed4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3710      	adds	r7, #16
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}

0800ed60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	d101      	bne.n	800ed78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed74:	2302      	movs	r3, #2
 800ed76:	e02d      	b.n	800edd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2224      	movs	r2, #36	@ 0x24
 800ed84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f022 0201 	bic.w	r2, r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	689b      	ldr	r3, [r3, #8]
 800eda6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	683a      	ldr	r2, [r7, #0]
 800edb0:	430a      	orrs	r2, r1
 800edb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f811 	bl	800eddc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2220      	movs	r2, #32
 800edc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2200      	movs	r2, #0
 800edce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800edd2:	2300      	movs	r3, #0
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d108      	bne.n	800edfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800edfc:	e031      	b.n	800ee62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800edfe:	2308      	movs	r3, #8
 800ee00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee02:	2308      	movs	r3, #8
 800ee04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	0e5b      	lsrs	r3, r3, #25
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	f003 0307 	and.w	r3, r3, #7
 800ee14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	0f5b      	lsrs	r3, r3, #29
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	f003 0307 	and.w	r3, r3, #7
 800ee24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee26:	7bbb      	ldrb	r3, [r7, #14]
 800ee28:	7b3a      	ldrb	r2, [r7, #12]
 800ee2a:	4911      	ldr	r1, [pc, #68]	@ (800ee70 <UARTEx_SetNbDataToProcess+0x94>)
 800ee2c:	5c8a      	ldrb	r2, [r1, r2]
 800ee2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee32:	7b3a      	ldrb	r2, [r7, #12]
 800ee34:	490f      	ldr	r1, [pc, #60]	@ (800ee74 <UARTEx_SetNbDataToProcess+0x98>)
 800ee36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee38:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee44:	7bfb      	ldrb	r3, [r7, #15]
 800ee46:	7b7a      	ldrb	r2, [r7, #13]
 800ee48:	4909      	ldr	r1, [pc, #36]	@ (800ee70 <UARTEx_SetNbDataToProcess+0x94>)
 800ee4a:	5c8a      	ldrb	r2, [r1, r2]
 800ee4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee50:	7b7a      	ldrb	r2, [r7, #13]
 800ee52:	4908      	ldr	r1, [pc, #32]	@ (800ee74 <UARTEx_SetNbDataToProcess+0x98>)
 800ee54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee56:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ee62:	bf00      	nop
 800ee64:	3714      	adds	r7, #20
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	0800f018 	.word	0x0800f018
 800ee74:	0800f020 	.word	0x0800f020

0800ee78 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b083      	sub	sp, #12
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f043 0202 	orr.w	r2, r3, #2
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	021b      	lsls	r3, r3, #8
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f023 0202 	bic.w	r2, r3, #2
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	601a      	str	r2, [r3, #0]
}
 800eeaa:	bf00      	nop
 800eeac:	370c      	adds	r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <memset>:
 800eeb6:	4402      	add	r2, r0
 800eeb8:	4603      	mov	r3, r0
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d100      	bne.n	800eec0 <memset+0xa>
 800eebe:	4770      	bx	lr
 800eec0:	f803 1b01 	strb.w	r1, [r3], #1
 800eec4:	e7f9      	b.n	800eeba <memset+0x4>
	...

0800eec8 <__libc_init_array>:
 800eec8:	b570      	push	{r4, r5, r6, lr}
 800eeca:	4d0d      	ldr	r5, [pc, #52]	@ (800ef00 <__libc_init_array+0x38>)
 800eecc:	2600      	movs	r6, #0
 800eece:	4c0d      	ldr	r4, [pc, #52]	@ (800ef04 <__libc_init_array+0x3c>)
 800eed0:	1b64      	subs	r4, r4, r5
 800eed2:	10a4      	asrs	r4, r4, #2
 800eed4:	42a6      	cmp	r6, r4
 800eed6:	d109      	bne.n	800eeec <__libc_init_array+0x24>
 800eed8:	4d0b      	ldr	r5, [pc, #44]	@ (800ef08 <__libc_init_array+0x40>)
 800eeda:	2600      	movs	r6, #0
 800eedc:	4c0b      	ldr	r4, [pc, #44]	@ (800ef0c <__libc_init_array+0x44>)
 800eede:	f000 f817 	bl	800ef10 <_init>
 800eee2:	1b64      	subs	r4, r4, r5
 800eee4:	10a4      	asrs	r4, r4, #2
 800eee6:	42a6      	cmp	r6, r4
 800eee8:	d105      	bne.n	800eef6 <__libc_init_array+0x2e>
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef0:	3601      	adds	r6, #1
 800eef2:	4798      	blx	r3
 800eef4:	e7ee      	b.n	800eed4 <__libc_init_array+0xc>
 800eef6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eefa:	3601      	adds	r6, #1
 800eefc:	4798      	blx	r3
 800eefe:	e7f2      	b.n	800eee6 <__libc_init_array+0x1e>
 800ef00:	0800f030 	.word	0x0800f030
 800ef04:	0800f030 	.word	0x0800f030
 800ef08:	0800f030 	.word	0x0800f030
 800ef0c:	0800f034 	.word	0x0800f034

0800ef10 <_init>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	bf00      	nop
 800ef14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef16:	bc08      	pop	{r3}
 800ef18:	469e      	mov	lr, r3
 800ef1a:	4770      	bx	lr

0800ef1c <_fini>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	bf00      	nop
 800ef20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef22:	bc08      	pop	{r3}
 800ef24:	469e      	mov	lr, r3
 800ef26:	4770      	bx	lr
