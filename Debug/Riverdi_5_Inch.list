
Riverdi_5_Inch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .sram_fb      00177000  20000000  20000000  00012000  2**2
                  ALLOC
  1 .isr_vector   0000026c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000f474  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000100  0800f6e0  0800f6e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  0800f7e0  0800f7e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  0800f7e8  0800f7e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .fini_array   00000004  0800f7ec  0800f7ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000030  20177000  0800f7f0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000093c  20177030  0800f820  00011030  2**2
                  ALLOC
  9 ._user_heap_stack 0001c004  2017796c  0800f820  0001196c  2**0
                  ALLOC
 10 .ARM.attributes 00000036  00000000  00000000  00011030  2**0
                  CONTENTS, READONLY
 11 .debug_info   00031cb4  00000000  00000000  00011066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000057e4  00000000  00000000  00042d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002a88  00000000  00000000  00048500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000211a  00000000  00000000  0004af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004971a  00000000  00000000  0004d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00038666  00000000  00000000  000967bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c0dc0  00000000  00000000  000cee22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0028fbe2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000ba30  00000000  00000000  0028fc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005e  00000000  00000000  0029b658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800026c <__do_global_dtors_aux>:
 800026c:	b510      	push	{r4, lr}
 800026e:	4c05      	ldr	r4, [pc, #20]	@ (8000284 <__do_global_dtors_aux+0x18>)
 8000270:	7823      	ldrb	r3, [r4, #0]
 8000272:	b933      	cbnz	r3, 8000282 <__do_global_dtors_aux+0x16>
 8000274:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <__do_global_dtors_aux+0x1c>)
 8000276:	b113      	cbz	r3, 800027e <__do_global_dtors_aux+0x12>
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <__do_global_dtors_aux+0x20>)
 800027a:	f3af 8000 	nop.w
 800027e:	2301      	movs	r3, #1
 8000280:	7023      	strb	r3, [r4, #0]
 8000282:	bd10      	pop	{r4, pc}
 8000284:	20177030 	.word	0x20177030
 8000288:	00000000 	.word	0x00000000
 800028c:	0800f6c8 	.word	0x0800f6c8

08000290 <frame_dummy>:
 8000290:	b508      	push	{r3, lr}
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <frame_dummy+0x10>)
 8000294:	b11b      	cbz	r3, 800029e <frame_dummy+0xe>
 8000296:	4903      	ldr	r1, [pc, #12]	@ (80002a4 <frame_dummy+0x14>)
 8000298:	4803      	ldr	r0, [pc, #12]	@ (80002a8 <frame_dummy+0x18>)
 800029a:	f3af 8000 	nop.w
 800029e:	bd08      	pop	{r3, pc}
 80002a0:	00000000 	.word	0x00000000
 80002a4:	20177034 	.word	0x20177034
 80002a8:	0800f6c8 	.word	0x0800f6c8

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295
 80002c0:	f000 b97e 	b.w	80005c0 <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002e2:	460c      	mov	r4, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14d      	bne.n	8000384 <__udivmoddi4+0xa8>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	460f      	mov	r7, r1
 80002ec:	4684      	mov	ip, r0
 80002ee:	4696      	mov	lr, r2
 80002f0:	fab2 f382 	clz	r3, r2
 80002f4:	d960      	bls.n	80003b8 <__udivmoddi4+0xdc>
 80002f6:	b14b      	cbz	r3, 800030c <__udivmoddi4+0x30>
 80002f8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002fc:	f1c3 0220 	rsb	r2, r3, #32
 8000300:	409f      	lsls	r7, r3
 8000302:	fa00 fc03 	lsl.w	ip, r0, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000310:	fa1f f48e 	uxth.w	r4, lr
 8000314:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000318:	fbb7 f1f6 	udiv	r1, r7, r6
 800031c:	fb06 7711 	mls	r7, r6, r1, r7
 8000320:	fb01 f004 	mul.w	r0, r1, r4
 8000324:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000328:	4290      	cmp	r0, r2
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x62>
 800032c:	eb1e 0202 	adds.w	r2, lr, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x60>
 8000336:	4290      	cmp	r0, r2
 8000338:	f200 812d 	bhi.w	8000596 <__udivmoddi4+0x2ba>
 800033c:	4639      	mov	r1, r7
 800033e:	1a12      	subs	r2, r2, r0
 8000340:	fa1f fc8c 	uxth.w	ip, ip
 8000344:	fbb2 f0f6 	udiv	r0, r2, r6
 8000348:	fb06 2210 	mls	r2, r6, r0, r2
 800034c:	fb00 f404 	mul.w	r4, r0, r4
 8000350:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000354:	4564      	cmp	r4, ip
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x8e>
 8000358:	eb1e 0c0c 	adds.w	ip, lr, ip
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x8c>
 8000362:	4564      	cmp	r4, ip
 8000364:	f200 811a 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000368:	4610      	mov	r0, r2
 800036a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036e:	ebac 0c04 	sub.w	ip, ip, r4
 8000372:	2100      	movs	r1, #0
 8000374:	b125      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000376:	fa2c f303 	lsr.w	r3, ip, r3
 800037a:	2200      	movs	r2, #0
 800037c:	e9c5 3200 	strd	r3, r2, [r5]
 8000380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d905      	bls.n	8000394 <__udivmoddi4+0xb8>
 8000388:	b10d      	cbz	r5, 800038e <__udivmoddi4+0xb2>
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	2100      	movs	r1, #0
 8000390:	4608      	mov	r0, r1
 8000392:	e7f5      	b.n	8000380 <__udivmoddi4+0xa4>
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d14d      	bne.n	8000438 <__udivmoddi4+0x15c>
 800039c:	42a3      	cmp	r3, r4
 800039e:	f0c0 80f2 	bcc.w	8000586 <__udivmoddi4+0x2aa>
 80003a2:	4290      	cmp	r0, r2
 80003a4:	f080 80ef 	bcs.w	8000586 <__udivmoddi4+0x2aa>
 80003a8:	4606      	mov	r6, r0
 80003aa:	4623      	mov	r3, r4
 80003ac:	4608      	mov	r0, r1
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e6      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003b2:	e9c5 6300 	strd	r6, r3, [r5]
 80003b6:	e7e3      	b.n	8000380 <__udivmoddi4+0xa4>
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	f040 80a2 	bne.w	8000502 <__udivmoddi4+0x226>
 80003be:	1a8a      	subs	r2, r1, r2
 80003c0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003c4:	fa1f f68e 	uxth.w	r6, lr
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ce:	fb07 2014 	mls	r0, r7, r4, r2
 80003d2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb06 f004 	mul.w	r0, r6, r4
 80003de:	4290      	cmp	r0, r2
 80003e0:	d90f      	bls.n	8000402 <__udivmoddi4+0x126>
 80003e2:	eb1e 0202 	adds.w	r2, lr, r2
 80003e6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ea:	bf2c      	ite	cs
 80003ec:	f04f 0901 	movcs.w	r9, #1
 80003f0:	f04f 0900 	movcc.w	r9, #0
 80003f4:	4290      	cmp	r0, r2
 80003f6:	d903      	bls.n	8000400 <__udivmoddi4+0x124>
 80003f8:	f1b9 0f00 	cmp.w	r9, #0
 80003fc:	f000 80c8 	beq.w	8000590 <__udivmoddi4+0x2b4>
 8000400:	4644      	mov	r4, r8
 8000402:	1a12      	subs	r2, r2, r0
 8000404:	fa1f fc8c 	uxth.w	ip, ip
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	fb00 f606 	mul.w	r6, r0, r6
 8000414:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000418:	4566      	cmp	r6, ip
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x152>
 800041c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x150>
 8000426:	4566      	cmp	r6, ip
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 800042c:	4610      	mov	r0, r2
 800042e:	ebac 0c06 	sub.w	ip, ip, r6
 8000432:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000436:	e79d      	b.n	8000374 <__udivmoddi4+0x98>
 8000438:	f1c1 0620 	rsb	r6, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	fa20 fc06 	lsr.w	ip, r0, r6
 800044a:	40f4      	lsrs	r4, r6
 800044c:	408a      	lsls	r2, r1
 800044e:	431f      	orrs	r7, r3
 8000450:	ea4e 030c 	orr.w	r3, lr, ip
 8000454:	fa00 fe01 	lsl.w	lr, r0, r1
 8000458:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800045c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000460:	fa1f fc87 	uxth.w	ip, r7
 8000464:	fbb4 f0f8 	udiv	r0, r4, r8
 8000468:	fb08 4410 	mls	r4, r8, r0, r4
 800046c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000470:	fb00 f90c 	mul.w	r9, r0, ip
 8000474:	45a1      	cmp	r9, r4
 8000476:	d90e      	bls.n	8000496 <__udivmoddi4+0x1ba>
 8000478:	193c      	adds	r4, r7, r4
 800047a:	f100 3aff 	add.w	sl, r0, #4294967295
 800047e:	bf2c      	ite	cs
 8000480:	f04f 0b01 	movcs.w	fp, #1
 8000484:	f04f 0b00 	movcc.w	fp, #0
 8000488:	45a1      	cmp	r9, r4
 800048a:	d903      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800048c:	f1bb 0f00 	cmp.w	fp, #0
 8000490:	f000 8093 	beq.w	80005ba <__udivmoddi4+0x2de>
 8000494:	4650      	mov	r0, sl
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f8 	udiv	r3, r4, r8
 80004a2:	fb08 4413 	mls	r4, r8, r3, r4
 80004a6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004aa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d906      	bls.n	80004c0 <__udivmoddi4+0x1e4>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x1e2>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d87a      	bhi.n	80005b4 <__udivmoddi4+0x2d8>
 80004be:	4643      	mov	r3, r8
 80004c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c4:	eba4 040c 	sub.w	r4, r4, ip
 80004c8:	fba0 9802 	umull	r9, r8, r0, r2
 80004cc:	4544      	cmp	r4, r8
 80004ce:	46cc      	mov	ip, r9
 80004d0:	4643      	mov	r3, r8
 80004d2:	d302      	bcc.n	80004da <__udivmoddi4+0x1fe>
 80004d4:	d106      	bne.n	80004e4 <__udivmoddi4+0x208>
 80004d6:	45ce      	cmp	lr, r9
 80004d8:	d204      	bcs.n	80004e4 <__udivmoddi4+0x208>
 80004da:	3801      	subs	r0, #1
 80004dc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004e0:	eb68 0307 	sbc.w	r3, r8, r7
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x222>
 80004e6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ea:	eb64 0403 	sbc.w	r4, r4, r3
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	40cc      	lsrs	r4, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e73e      	b.n	8000380 <__udivmoddi4+0xa4>
 8000502:	fa02 fe03 	lsl.w	lr, r2, r3
 8000506:	f1c3 0120 	rsb	r1, r3, #32
 800050a:	fa04 f203 	lsl.w	r2, r4, r3
 800050e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000512:	40cc      	lsrs	r4, r1
 8000514:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000518:	fa20 f101 	lsr.w	r1, r0, r1
 800051c:	fa1f f68e 	uxth.w	r6, lr
 8000520:	fbb4 f0f7 	udiv	r0, r4, r7
 8000524:	430a      	orrs	r2, r1
 8000526:	fb07 4410 	mls	r4, r7, r0, r4
 800052a:	0c11      	lsrs	r1, r2, #16
 800052c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000530:	fb00 f406 	mul.w	r4, r0, r6
 8000534:	428c      	cmp	r4, r1
 8000536:	d90e      	bls.n	8000556 <__udivmoddi4+0x27a>
 8000538:	eb1e 0101 	adds.w	r1, lr, r1
 800053c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0901 	movcs.w	r9, #1
 8000546:	f04f 0900 	movcc.w	r9, #0
 800054a:	428c      	cmp	r4, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x278>
 800054e:	f1b9 0f00 	cmp.w	r9, #0
 8000552:	d02c      	beq.n	80005ae <__udivmoddi4+0x2d2>
 8000554:	4640      	mov	r0, r8
 8000556:	1b09      	subs	r1, r1, r4
 8000558:	b292      	uxth	r2, r2
 800055a:	fbb1 f4f7 	udiv	r4, r1, r7
 800055e:	fb07 1114 	mls	r1, r7, r4, r1
 8000562:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000566:	fb04 f106 	mul.w	r1, r4, r6
 800056a:	4291      	cmp	r1, r2
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x2a2>
 800056e:	eb1e 0202 	adds.w	r2, lr, r2
 8000572:	f104 38ff 	add.w	r8, r4, #4294967295
 8000576:	d201      	bcs.n	800057c <__udivmoddi4+0x2a0>
 8000578:	4291      	cmp	r1, r2
 800057a:	d815      	bhi.n	80005a8 <__udivmoddi4+0x2cc>
 800057c:	4644      	mov	r4, r8
 800057e:	1a52      	subs	r2, r2, r1
 8000580:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000584:	e721      	b.n	80003ca <__udivmoddi4+0xee>
 8000586:	1a86      	subs	r6, r0, r2
 8000588:	eb64 0303 	sbc.w	r3, r4, r3
 800058c:	2001      	movs	r0, #1
 800058e:	e70e      	b.n	80003ae <__udivmoddi4+0xd2>
 8000590:	3c02      	subs	r4, #2
 8000592:	4472      	add	r2, lr
 8000594:	e735      	b.n	8000402 <__udivmoddi4+0x126>
 8000596:	3902      	subs	r1, #2
 8000598:	4472      	add	r2, lr
 800059a:	e6d0      	b.n	800033e <__udivmoddi4+0x62>
 800059c:	44f4      	add	ip, lr
 800059e:	3802      	subs	r0, #2
 80005a0:	e6e3      	b.n	800036a <__udivmoddi4+0x8e>
 80005a2:	44f4      	add	ip, lr
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x152>
 80005a8:	3c02      	subs	r4, #2
 80005aa:	4472      	add	r2, lr
 80005ac:	e7e7      	b.n	800057e <__udivmoddi4+0x2a2>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4471      	add	r1, lr
 80005b2:	e7d0      	b.n	8000556 <__udivmoddi4+0x27a>
 80005b4:	3b02      	subs	r3, #2
 80005b6:	443c      	add	r4, r7
 80005b8:	e782      	b.n	80004c0 <__udivmoddi4+0x1e4>
 80005ba:	3802      	subs	r0, #2
 80005bc:	443c      	add	r4, r7
 80005be:	e76a      	b.n	8000496 <__udivmoddi4+0x1ba>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <InitHana>:

DMA2D_HandleTypeDef * hdma2d;
LTDC_HandleTypeDef  * hltdc;

void InitHana(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	hdma2d = Get_HDMA2D_StructPtr(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f000 f9e5 	bl	8000998 <Get_HDMA2D_StructPtr>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <InitHana+0x20>)
 80005d2:	6013      	str	r3, [r2, #0]
	hltdc  = Get_HLTDC_StructPtr(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 f9f1 	bl	80009bc <Get_HLTDC_StructPtr>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a02      	ldr	r2, [pc, #8]	@ (80005e8 <InitHana+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2017704c 	.word	0x2017704c
 80005e8:	20177050 	.word	0x20177050

080005ec <SetPixel>:


// CHAT GPT - BASIC SHAPE DRAWING
void SetPixel(int x, int y, uint32_t color)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  back_buffer[y * SCREEN_WIDTH + x] = color;
 80005f8:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <SetPixel+0x34>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000602:	fb03 f101 	mul.w	r1, r3, r1
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	440b      	add	r3, r1
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	b292      	uxth	r2, r2
 8000612:	801a      	strh	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	20177004 	.word	0x20177004

08000624 <DrawHline>:
      if (e2 < dx) { err += dx; y0 += sy; }
  }
}

void DrawHline(int x, int y, int width, uint32_t color) 
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b086      	sub	sp, #24
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < width; i++) 
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	e00a      	b.n	800064e <DrawHline+0x2a>
  {
    SetPixel(x + i, y, color);
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	4413      	add	r3, r2
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	68b9      	ldr	r1, [r7, #8]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffd2 	bl	80005ec <SetPixel>
  for (int i = 0; i < width; i++) 
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	dbf0      	blt.n	8000638 <DrawHline+0x14>
  }
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <DrawVLine>:


void DrawVLine(int x, int y, int height, uint32_t color) 
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
  for (int i = 0; i < height; i++) 
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e00a      	b.n	800068a <DrawVLine+0x2a>
  {
    SetPixel(x, y + i, color);
 8000674:	68ba      	ldr	r2, [r7, #8]
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f7ff ffb4 	bl	80005ec <SetPixel>
  for (int i = 0; i < height; i++) 
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	429a      	cmp	r2, r3
 8000690:	dbf0      	blt.n	8000674 <DrawVLine+0x14>
  }
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <DrawCircle>:

void DrawCircle(int xc, int yc, int r, uint32_t color)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
  int x = 0, y = r;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	61bb      	str	r3, [r7, #24]
  int d = 3 - 2 * r;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	f1c3 0303 	rsb	r3, r3, #3
 80006ba:	617b      	str	r3, [r7, #20]

  while (y >= x) 
 80006bc:	e067      	b.n	800078e <DrawCircle+0xf2>
  {
    SetPixel(xc + x, yc + y, color);
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	18d0      	adds	r0, r2, r3
 80006c4:	68ba      	ldr	r2, [r7, #8]
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	683a      	ldr	r2, [r7, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f7ff ff8d 	bl	80005ec <SetPixel>
    SetPixel(xc - x, yc + y, color);
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	1ad0      	subs	r0, r2, r3
 80006d8:	68ba      	ldr	r2, [r7, #8]
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	4413      	add	r3, r2
 80006de:	683a      	ldr	r2, [r7, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f7ff ff83 	bl	80005ec <SetPixel>
    SetPixel(xc + x, yc - y, color);
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	18d0      	adds	r0, r2, r3
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	4619      	mov	r1, r3
 80006f6:	f7ff ff79 	bl	80005ec <SetPixel>
    SetPixel(xc - x, yc - y, color);
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	1ad0      	subs	r0, r2, r3
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	683a      	ldr	r2, [r7, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	f7ff ff6f 	bl	80005ec <SetPixel>
    SetPixel(xc + y, yc + x, color);
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	18d0      	adds	r0, r2, r3
 8000714:	68ba      	ldr	r2, [r7, #8]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	4413      	add	r3, r2
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f7ff ff65 	bl	80005ec <SetPixel>
    SetPixel(xc - y, yc + x, color);
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	1ad0      	subs	r0, r2, r3
 8000728:	68ba      	ldr	r2, [r7, #8]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	4619      	mov	r1, r3
 8000732:	f7ff ff5b 	bl	80005ec <SetPixel>
    SetPixel(xc + y, yc - x, color);
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	18d0      	adds	r0, r2, r3
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f7ff ff51 	bl	80005ec <SetPixel>
    SetPixel(xc - y, yc - x, color);
 800074a:	68fa      	ldr	r2, [r7, #12]
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	1ad0      	subs	r0, r2, r3
 8000750:	68ba      	ldr	r2, [r7, #8]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f7ff ff47 	bl	80005ec <SetPixel>

    x++;
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3301      	adds	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
    if (d < 0) 
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b00      	cmp	r3, #0
 8000768:	da06      	bge.n	8000778 <DrawCircle+0xdc>
    {
        d += 4 * x + 6;
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	3306      	adds	r3, #6
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	4413      	add	r3, r2
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	e00a      	b.n	800078e <DrawCircle+0xf2>
    }
    else 
    {
        y--;
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	3b01      	subs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
        d += 4 * (x - y) + 10;
 800077e:	69fa      	ldr	r2, [r7, #28]
 8000780:	69bb      	ldr	r3, [r7, #24]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	330a      	adds	r3, #10
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	4413      	add	r3, r2
 800078c:	617b      	str	r3, [r7, #20]
  while (y >= x) 
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	429a      	cmp	r2, r3
 8000794:	da93      	bge.n	80006be <DrawCircle+0x22>
    }
  }
}
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <DrawRectangle>:

void DrawRectangle(int x, int y, int width, int height, uint32_t color)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]
 
  DrawHline(x, y, width, color);           // Top edge
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	68f8      	ldr	r0, [r7, #12]
 80007b6:	f7ff ff35 	bl	8000624 <DrawHline>
  DrawHline(x, y + height - 1, width, color);  // Bottom edge
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	1e59      	subs	r1, r3, #1
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	68f8      	ldr	r0, [r7, #12]
 80007c8:	f7ff ff2c 	bl	8000624 <DrawHline>
  DrawVLine(x, y, height, color);          // Left edge
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff ff44 	bl	8000660 <DrawVLine>
  DrawVLine(x + width - 1, y, height, color);  // Right edge
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	1e58      	subs	r0, r3, #1
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	f7ff ff3b 	bl	8000660 <DrawVLine>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <DrawRoundedRectangle>:

void DrawRoundedRectangle(int x, int y, int w, int h, int r, uint32_t color) 
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af02      	add	r7, sp, #8
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	603b      	str	r3, [r7, #0]
  // Draw center rectangle
  DrawRectangle(x + r, y, w - 2 * r, h, color);
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	69bb      	ldr	r3, [r7, #24]
 8000804:	18d0      	adds	r0, r2, r3
 8000806:	69bb      	ldr	r3, [r7, #24]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	1ad2      	subs	r2, r2, r3
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	f7ff ffc3 	bl	80007a0 <DrawRectangle>

  // Draw side rectangles
  DrawRectangle(x, y + r, r, h - 2 * r, color);
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	18d1      	adds	r1, r2, r3
 8000820:	69bb      	ldr	r3, [r7, #24]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	4613      	mov	r3, r2
 800082e:	69ba      	ldr	r2, [r7, #24]
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f7ff ffb5 	bl	80007a0 <DrawRectangle>
  DrawRectangle(x + w - r, y + r, r, h - 2 * r, color);
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	441a      	add	r2, r3
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	1ad0      	subs	r0, r2, r3
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	18d1      	adds	r1, r2, r3
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	683a      	ldr	r2, [r7, #0]
 800084c:	1ad2      	subs	r2, r2, r3
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4613      	mov	r3, r2
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	f7ff ffa3 	bl	80007a0 <DrawRectangle>

  // Draw rounded corners
  DrawCircle(x + r, y + r, r, color); // Top-left
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	18d0      	adds	r0, r2, r3
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	69bb      	ldr	r3, [r7, #24]
 8000864:	18d1      	adds	r1, r2, r3
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	f7ff ff17 	bl	800069c <DrawCircle>
  DrawCircle(x + w - r, y + r, r, color); // Top-right
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	441a      	add	r2, r3
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	1ad0      	subs	r0, r2, r3
 8000878:	68ba      	ldr	r2, [r7, #8]
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	18d1      	adds	r1, r2, r3
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	f7ff ff0b 	bl	800069c <DrawCircle>
  DrawCircle(x + r, y + h - r, r, color); // Bottom-left
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	18d0      	adds	r0, r2, r3
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	441a      	add	r2, r3
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	1ad1      	subs	r1, r2, r3
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	f7ff feff 	bl	800069c <DrawCircle>
  DrawCircle(x + w - r, y + h - r, r, color); // Bottom-right
 800089e:	68fa      	ldr	r2, [r7, #12]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	441a      	add	r2, r3
 80008a4:	69bb      	ldr	r3, [r7, #24]
 80008a6:	1ad0      	subs	r0, r2, r3
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	441a      	add	r2, r3
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	1ad1      	subs	r1, r2, r3
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	f7ff fef1 	bl	800069c <DrawCircle>
}
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <SwapBuffers>:

//

void SwapBuffers(void) 
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
    uint16_t *temp = front_buffer;
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <SwapBuffers+0x48>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <SwapBuffers+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a0d      	ldr	r2, [pc, #52]	@ (800090c <SwapBuffers+0x48>)
 80008d6:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 80008d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000910 <SwapBuffers+0x4c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]

    __HAL_LTDC_LAYER(hltdc, 0)->CFBAR = (uint32_t)front_buffer;
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <SwapBuffers+0x48>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <SwapBuffers+0x50>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3384      	adds	r3, #132	@ 0x84
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_LTDC_RELOAD_CONFIG(hltdc);
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <SwapBuffers+0x50>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008f4:	4b07      	ldr	r3, [pc, #28]	@ (8000914 <SwapBuffers+0x50>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f042 0201 	orr.w	r2, r2, #1
 80008fe:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	20177000 	.word	0x20177000
 8000910:	20177004 	.word	0x20177004
 8000914:	20177050 	.word	0x20177050

08000918 <DrawBackground>:

void DrawBackground(uint32_t color)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af02      	add	r7, sp, #8
 800091e:	6078      	str	r0, [r7, #4]
  hdma2d->Init.Mode = DMA2D_R2M; // Register to Memory mode
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <DrawBackground+0x78>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000928:	605a      	str	r2, [r3, #4]
  hdma2d->Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <DrawBackground+0x78>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2202      	movs	r2, #2
 8000930:	609a      	str	r2, [r3, #8]
  hdma2d->Init.OutputOffset = 0;
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <DrawBackground+0x78>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]

  if (HAL_DMA2D_Init(hdma2d) != HAL_OK)
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <DrawBackground+0x78>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f004 ff65 	bl	800580e <HAL_DMA2D_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <DrawBackground+0x36>
  {
    Error_Handler();
 800094a:	f001 facf 	bl	8001eec <Error_Handler>
  }

  if (HAL_DMA2D_Start(hdma2d, (uint32_t)color, (uint32_t)back_buffer, SCREEN_WIDTH, SCREEN_HEIGHT) != HAL_OK)
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <DrawBackground+0x78>)
 8000950:	6818      	ldr	r0, [r3, #0]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <DrawBackground+0x7c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f004 ffb4 	bl	80058d0 <HAL_DMA2D_Start>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <DrawBackground+0x5a>
  {
      Error_Handler();
 800096e:	f001 fabd 	bl	8001eec <Error_Handler>
  }

  // Wait for the transfer to complete
  if (HAL_DMA2D_PollForTransfer(hdma2d, 100) != HAL_OK)
 8000972:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <DrawBackground+0x78>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2164      	movs	r1, #100	@ 0x64
 8000978:	4618      	mov	r0, r3
 800097a:	f004 ffd4 	bl	8005926 <HAL_DMA2D_PollForTransfer>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <DrawBackground+0x70>
  {
      Error_Handler();
 8000984:	f001 fab2 	bl	8001eec <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2017704c 	.word	0x2017704c
 8000994:	20177004 	.word	0x20177004

08000998 <Get_HDMA2D_StructPtr>:
	   return hdcache2;
	}
}

DMA2D_HandleTypeDef * Get_HDMA2D_StructPtr(uint8_t nr)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	switch(nr)
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d101      	bne.n	80009ac <Get_HDMA2D_StructPtr+0x14>
	{
	  case 1:
		return &hdma2d;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <Get_HDMA2D_StructPtr+0x20>)
 80009aa:	e7ff      	b.n	80009ac <Get_HDMA2D_StructPtr+0x14>
	}
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	201771d8 	.word	0x201771d8

080009bc <Get_HLTDC_StructPtr>:
	   return hi2c4;
	}
}

LTDC_HandleTypeDef * Get_HLTDC_StructPtr(uint8_t nr)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
	switch(nr)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <Get_HLTDC_StructPtr+0x14>
	{
	  case 1:
		return &hltdc;
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <Get_HLTDC_StructPtr+0x20>)
 80009ce:	e7ff      	b.n	80009d0 <Get_HLTDC_StructPtr+0x14>

	}
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	20177340 	.word	0x20177340

080009e0 <InitPeripherals>:
	   return huart6;
	}
}

void InitPeripherals(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f001 f928 	bl	8001c38 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009e8:	f000 f8d2 	bl	8000b90 <MX_ADC1_Init>
  MX_ADC2_Init();
 80009ec:	f000 f940 	bl	8000c70 <MX_ADC2_Init>
  MX_DAC1_Init();
 80009f0:	f000 f9ae 	bl	8000d50 <MX_DAC1_Init>
  MX_DCACHE1_Init();
 80009f4:	f000 fa00 	bl	8000df8 <MX_DCACHE1_Init>
  MX_DCACHE2_Init();
 80009f8:	f000 fa14 	bl	8000e24 <MX_DCACHE2_Init>
  MX_DMA2D_Init();
 80009fc:	f000 fa3e 	bl	8000e7c <MX_DMA2D_Init>
  MX_FLASH_Init();
 8000a00:	f000 fa7a 	bl	8000ef8 <MX_FLASH_Init>
  MX_I2C1_Init();
 8000a04:	f000 fac0 	bl	8000f88 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a08:	f000 fafe 	bl	8001008 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000a0c:	f000 fb3c 	bl	8001088 <MX_I2C4_Init>
  MX_ICACHE_Init();
 8000a10:	f000 fb7a 	bl	8001108 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 8000a14:	f000 fc10 	bl	8001238 <MX_OCTOSPI1_Init>
  MX_RTC_Init();
 8000a18:	f000 fc88 	bl	800132c <MX_RTC_Init>
  //MX_SDMMC2_SD_Init();
  MX_SPI1_Init();
 8000a1c:	f000 fd08 	bl	8001430 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a20:	f000 fd74 	bl	800150c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a24:	f000 fde0 	bl	80015e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a28:	f000 fe72 	bl	8001710 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000a2c:	f000 fef2 	bl	8001814 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000a30:	f000 ff26 	bl	8001880 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000a34:	f000 ffc8 	bl	80019c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a38:	f001 f812 	bl	8001a60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a3c:	f001 f85c 	bl	8001af8 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000a40:	f001 f8a6 	bl	8001b90 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a44:	f001 f8f0 	bl	8001c28 <MX_USB_OTG_HS_USB_Init>
  MX_GPU2D_Init();
 8000a48:	f000 fa8a 	bl	8000f60 <MX_GPU2D_Init>
  MX_LTDC_Init();
 8000a4c:	f000 fb70 	bl	8001130 <MX_LTDC_Init>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <InitClocks>:

void InitClocks(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure the system clock */
  SystemClock_Config();
 8000a58:	f000 f806 	bl	8000a68 <SystemClock_Config>
  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a5c:	f000 f882 	bl	8000b64 <PeriphCommonClock_Config>

  SystemPower_Config();
 8000a60:	f000 f887 	bl	8000b72 <SystemPower_Config>
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b09e      	sub	sp, #120	@ 0x78
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2260      	movs	r2, #96	@ 0x60
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00e fdf9 	bl	800f66e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000a90:	f007 f848 	bl	8007b24 <HAL_PWREx_ControlVoltageScaling>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000a9a:	f001 fa27 	bl	8001eec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a9e:	f007 f831 	bl	8007b04 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b60 <SystemClock_Config+0xf8>)
 8000aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <SystemClock_Config+0xf8>)
 8000aaa:	f023 0318 	bic.w	r3, r3, #24
 8000aae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000ab2:	231f      	movs	r3, #31
 8000ab4:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000abc:	2381      	movs	r3, #129	@ 0x81
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000aca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000af0:	230a      	movs	r3, #10
 8000af2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 8;
 8000af4:	2308      	movs	r3, #8
 8000af6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b00:	230c      	movs	r3, #12
 8000b02:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 f915 	bl	8007d3c <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b18:	f001 f9e8 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	231f      	movs	r3, #31
 8000b1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2303      	movs	r3, #3
 8000b22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2104      	movs	r1, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f007 ffdb 	bl	8008af4 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000b44:	f001 f9d2 	bl	8001eec <Error_Handler>
  }

  /** MCO configuration
  */
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f008 f9c2 	bl	8008ed8 <HAL_RCC_MCOConfig>

  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000b54:	f00b fada 	bl	800c10c <HAL_RCCEx_EnableLSECSS>
}
 8000b58:	bf00      	nop
 8000b5a:	3778      	adds	r7, #120	@ 0x78
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	46020c00 	.word	0x46020c00

08000b64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000b76:	f007 f8c1 	bl	8007cfc <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f007 f85e 	bl	8007c3c <HAL_PWREx_ConfigSupply>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000b86:	f001 f9b1 	bl	8001eec <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00e fd66 	bl	800f66e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000ba4:	4a30      	ldr	r2, [pc, #192]	@ (8000c68 <MX_ADC1_Init+0xd8>)
 8000ba6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 8000bae:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bba:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc0:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc6:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bc8:	2204      	movs	r2, #4
 8000bca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bcc:	4b25      	ldr	r3, [pc, #148]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c08:	4b16      	ldr	r3, [pc, #88]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c0e:	4b15      	ldr	r3, [pc, #84]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c1c:	4811      	ldr	r0, [pc, #68]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c1e:	f003 f897 	bl	8003d50 <HAL_ADC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000c28:	f001 f960 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <MX_ADC1_Init+0xdc>)
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c30:	2306      	movs	r3, #6
 8000c32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	@ (8000c64 <MX_ADC1_Init+0xd4>)
 8000c4c:	f003 fb68 	bl	8004320 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000c56:	f001 f949 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20177054 	.word	0x20177054
 8000c68:	42028000 	.word	0x42028000
 8000c6c:	ca040000 	.word	0xca040000

08000c70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2220      	movs	r2, #32
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f00e fcf6 	bl	800f66e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c82:	4b30      	ldr	r3, [pc, #192]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000c84:	4a30      	ldr	r2, [pc, #192]	@ (8000d48 <MX_ADC2_Init+0xd8>)
 8000c86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c88:	4b2e      	ldr	r3, [pc, #184]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_14B;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc2.Init.GainCompensation = 0;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.NbrOfConversion = 1;
 8000cba:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cee:	4b15      	ldr	r3, [pc, #84]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000cfe:	f003 f827 	bl	8003d50 <HAL_ADC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_ADC2_Init+0x9c>
  {
    Error_Handler();
 8000d08:	f001 f8f0 	bl	8001eec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_ADC2_Init+0xdc>)
 8000d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d10:	2306      	movs	r3, #6
 8000d12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	@ (8000d44 <MX_ADC2_Init+0xd4>)
 8000d2c:	f003 faf8 	bl	8004320 <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC2_Init+0xca>
  {
    Error_Handler();
 8000d36:	f001 f8d9 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3720      	adds	r7, #32
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	201770e0 	.word	0x201770e0
 8000d48:	42028100 	.word	0x42028100
 8000d4c:	80000001 	.word	0x80000001

08000d50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2230      	movs	r2, #48	@ 0x30
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00e fc85 	bl	800f66e <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d68:	4b21      	ldr	r3, [pc, #132]	@ (8000df0 <MX_DAC1_Init+0xa0>)
 8000d6a:	4a22      	ldr	r2, [pc, #136]	@ (8000df4 <MX_DAC1_Init+0xa4>)
 8000d6c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d6e:	4820      	ldr	r0, [pc, #128]	@ (8000df0 <MX_DAC1_Init+0xa0>)
 8000d70:	f004 fa2c 	bl	80051cc <HAL_DAC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8000d7a:	f001 f8b7 	bl	8001eec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4812      	ldr	r0, [pc, #72]	@ (8000df0 <MX_DAC1_Init+0xa0>)
 8000da8:	f004 fa32 	bl	8005210 <HAL_DAC_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 8000db2:	f001 f89b 	bl	8001eec <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <MX_DAC1_Init+0xa0>)
 8000dc0:	f004 fbc6 	bl	8005550 <HAL_DACEx_SetConfigAutonomousMode>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 8000dca:	f001 f88f 	bl	8001eec <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4806      	ldr	r0, [pc, #24]	@ (8000df0 <MX_DAC1_Init+0xa0>)
 8000dd8:	f004 fa1a 	bl	8005210 <HAL_DAC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 8000de2:	f001 f883 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	3738      	adds	r7, #56	@ 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2017716c 	.word	0x2017716c
 8000df4:	46021800 	.word	0x46021800

08000df8 <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <MX_DCACHE1_Init+0x24>)
 8000dfe:	4a08      	ldr	r2, [pc, #32]	@ (8000e20 <MX_DCACHE1_Init+0x28>)
 8000e00:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000e02:	4b06      	ldr	r3, [pc, #24]	@ (8000e1c <MX_DCACHE1_Init+0x24>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_DCACHE1_Init+0x24>)
 8000e0a:	f004 fbd9 	bl	80055c0 <HAL_DCACHE_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 8000e14:	f001 f86a 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20177180 	.word	0x20177180
 8000e20:	40031400 	.word	0x40031400

08000e24 <MX_DCACHE2_Init>:
  * @brief DCACHE2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE2_Init 0 */

  /* USER CODE BEGIN DCACHE2_Init 1 */

  /* USER CODE END DCACHE2_Init 1 */
  hdcache2.Instance = DCACHE2;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <MX_DCACHE2_Init+0x4c>)
 8000e2c:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <MX_DCACHE2_Init+0x50>)
 8000e2e:	601a      	str	r2, [r3, #0]
  hdcache2.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_DCACHE2_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache2) != HAL_OK)
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <MX_DCACHE2_Init+0x4c>)
 8000e38:	f004 fbc2 	bl	80055c0 <HAL_DCACHE_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_DCACHE2_Init+0x22>
  {
    Error_Handler();
 8000e42:	f001 f853 	bl	8001eec <Error_Handler>
  }
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_DCACHE2_Init+0x54>)
 8000e48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <MX_DCACHE2_Init+0x54>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_DCACHE2_Init+0x54>)
 8000e58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
   HAL_SYSCFG_DisableSRAMCached();
 8000e64:	f002 fc74 	bl	8003750 <HAL_SYSCFG_DisableSRAMCached>
  /* USER CODE BEGIN DCACHE2_Init 2 */

  /* USER CODE END DCACHE2_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	201771ac 	.word	0x201771ac
 8000e74:	40031800 	.word	0x40031800
 8000e78:	46020c00 	.word	0x46020c00

08000e7c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000e82:	4a1c      	ldr	r2, [pc, #112]	@ (8000ef4 <MX_DMA2D_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000e8e:	2202      	movs	r2, #2
 8000e90:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hdma2d.Init.BytesSwap = DMA2D_BYTES_REGULAR;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hdma2d.Init.LineOffsetMode = DMA2D_LOM_PIXELS;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000eac:	2202      	movs	r2, #2
 8000eae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma2d.LayerCfg[0].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[0].RedBlueSwap = DMA2D_RB_REGULAR;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ec8:	4809      	ldr	r0, [pc, #36]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000eca:	f004 fca0 	bl	800580e <HAL_DMA2D_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_DMA2D_Init+0x5c>
  {
    Error_Handler();
 8000ed4:	f001 f80a 	bl	8001eec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4805      	ldr	r0, [pc, #20]	@ (8000ef0 <MX_DMA2D_Init+0x74>)
 8000edc:	f004 fe0c 	bl	8005af8 <HAL_DMA2D_ConfigLayer>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_DMA2D_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f001 f801 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	201771d8 	.word	0x201771d8
 8000ef4:	4002b000 	.word	0x4002b000

08000ef8 <MX_FLASH_Init>:
  * @brief FLASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_FLASH_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FLASH_Init 0 */

  /* USER CODE END FLASH_Init 0 */

  FLASH_BBAttributesTypeDef FLASH_BBSecInitStruct = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2228      	movs	r2, #40	@ 0x28
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f00e fbb2 	bl	800f66e <memset>

  /* USER CODE BEGIN FLASH_Init 1 */

  /* USER CODE END FLASH_Init 1 */
  if (HAL_FLASH_Unlock() != HAL_OK)
 8000f0a:	f004 ff39 	bl	8005d80 <HAL_FLASH_Unlock>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_FLASH_Init+0x20>
  {
    Error_Handler();
 8000f14:	f000 ffea 	bl	8001eec <Error_Handler>
  }

  /* Block-based page protection */

  FLASH_BBSecInitStruct.Bank = FLASH_BANK_1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	603b      	str	r3, [r7, #0]
  FLASH_BBSecInitStruct.BBAttributesType = FLASH_BB_PRIV;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_FLASHEx_ConfigBBAttributes(&FLASH_BBSecInitStruct) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 ffae 	bl	8005e84 <HAL_FLASHEx_ConfigBBAttributes>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_FLASH_Init+0x3a>
  {
    Error_Handler();
 8000f2e:	f000 ffdd 	bl	8001eec <Error_Handler>
  }
  FLASH_BBSecInitStruct.Bank = FLASH_BANK_2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	603b      	str	r3, [r7, #0]
  if (HAL_FLASHEx_ConfigBBAttributes(&FLASH_BBSecInitStruct) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ffa3 	bl	8005e84 <HAL_FLASHEx_ConfigBBAttributes>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_FLASH_Init+0x50>
  {
    Error_Handler();
 8000f44:	f000 ffd2 	bl	8001eec <Error_Handler>
  }
  if (HAL_FLASH_Lock() != HAL_OK)
 8000f48:	f004 ff3c 	bl	8005dc4 <HAL_FLASH_Lock>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_FLASH_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 ffcb 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN FLASH_Init 2 */

  /* USER CODE END FLASH_Init 2 */

}
 8000f56:	bf00      	nop
 8000f58:	3728      	adds	r7, #40	@ 0x28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <MX_GPU2D_Init>:
  * @brief GPU2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPU2D_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END GPU2D_Init 0 */

  /* USER CODE BEGIN GPU2D_Init 1 */

  /* USER CODE END GPU2D_Init 1 */
  hgpu2d.Instance = GPU2D;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_GPU2D_Init+0x20>)
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <MX_GPU2D_Init+0x24>)
 8000f68:	601a      	str	r2, [r3, #0]
  if (HAL_GPU2D_Init(&hgpu2d) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_GPU2D_Init+0x20>)
 8000f6c:	f005 f9f1 	bl	8006352 <HAL_GPU2D_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_GPU2D_Init+0x1a>
  {
    Error_Handler();
 8000f76:	f000 ffb9 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN GPU2D_Init 2 */

  /* USER CODE END GPU2D_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20177238 	.word	0x20177238
 8000f84:	4002f000 	.word	0x4002f000

08000f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <MX_I2C1_Init+0x78>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000f94:	4a1b      	ldr	r2, [pc, #108]	@ (8001004 <MX_I2C1_Init+0x7c>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc2:	480e      	ldr	r0, [pc, #56]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fc4:	f005 fa31 	bl	800642a <HAL_I2C_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f000 ff8d 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fd6:	f005 fac3 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fe0:	f000 ff84 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_I2C1_Init+0x74>)
 8000fe8:	f005 fb05 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 ff7b 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20177244 	.word	0x20177244
 8001000:	40005400 	.word	0x40005400
 8001004:	30909dec 	.word	0x30909dec

08001008 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_I2C2_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <MX_I2C2_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_I2C2_Init+0x74>)
 8001014:	4a1b      	ldr	r2, [pc, #108]	@ (8001084 <MX_I2C2_Init+0x7c>)
 8001016:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001018:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <MX_I2C2_Init+0x74>)
 8001020:	2201      	movs	r2, #1
 8001022:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_I2C2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_I2C2_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_I2C2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_I2C2_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001042:	480e      	ldr	r0, [pc, #56]	@ (800107c <MX_I2C2_Init+0x74>)
 8001044:	f005 f9f1 	bl	800642a <HAL_I2C_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800104e:	f000 ff4d 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4809      	ldr	r0, [pc, #36]	@ (800107c <MX_I2C2_Init+0x74>)
 8001056:	f005 fa83 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001060:	f000 ff44 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001064:	2100      	movs	r1, #0
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_I2C2_Init+0x74>)
 8001068:	f005 fac5 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001072:	f000 ff3b 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20177298 	.word	0x20177298
 8001080:	40005800 	.word	0x40005800
 8001084:	30909dec 	.word	0x30909dec

08001088 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_I2C4_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <MX_I2C4_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x30909DEC;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_I2C4_Init+0x74>)
 8001094:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <MX_I2C4_Init+0x7c>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_I2C4_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010c4:	f005 f9b1 	bl	800642a <HAL_I2C_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80010ce:	f000 ff0d 	bl	8001eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010d6:	f005 fa43 	bl	8006560 <HAL_I2CEx_ConfigAnalogFilter>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80010e0:	f000 ff04 	bl	8001eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_I2C4_Init+0x74>)
 80010e8:	f005 fa85 	bl	80065f6 <HAL_I2CEx_ConfigDigitalFilter>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 fefb 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	201772ec 	.word	0x201772ec
 8001100:	40008400 	.word	0x40008400
 8001104:	30909dec 	.word	0x30909dec

08001108 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800110c:	2000      	movs	r0, #0
 800110e:	f005 fabf 	bl	8006690 <HAL_ICACHE_ConfigAssociativityMode>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001118:	f000 fee8 	bl	8001eec <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800111c:	f005 fad8 	bl	80066d0 <HAL_ICACHE_Enable>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001126:	f000 fee1 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08e      	sub	sp, #56	@ 0x38
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2234      	movs	r2, #52	@ 0x34
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f00e fa96 	bl	800f66e <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001142:	4b3a      	ldr	r3, [pc, #232]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001144:	4a3a      	ldr	r2, [pc, #232]	@ (8001230 <MX_LTDC_Init+0x100>)
 8001146:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001148:	4b38      	ldr	r3, [pc, #224]	@ (800122c <MX_LTDC_Init+0xfc>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800114e:	4b37      	ldr	r3, [pc, #220]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001154:	4b35      	ldr	r3, [pc, #212]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800115a:	4b34      	ldr	r3, [pc, #208]	@ (800122c <MX_LTDC_Init+0xfc>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001162:	2203      	movs	r2, #3
 8001164:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001166:	4b31      	ldr	r3, [pc, #196]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001168:	2203      	movs	r2, #3
 800116a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 800116c:	4b2f      	ldr	r3, [pc, #188]	@ (800122c <MX_LTDC_Init+0xfc>)
 800116e:	220b      	movs	r2, #11
 8001170:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001172:	4b2e      	ldr	r3, [pc, #184]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001174:	220b      	movs	r2, #11
 8001176:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001178:	4b2c      	ldr	r3, [pc, #176]	@ (800122c <MX_LTDC_Init+0xfc>)
 800117a:	f240 322b 	movw	r2, #811	@ 0x32b
 800117e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 491;
 8001180:	4b2a      	ldr	r3, [pc, #168]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001182:	f240 12eb 	movw	r2, #491	@ 0x1eb
 8001186:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 819;
 8001188:	4b28      	ldr	r3, [pc, #160]	@ (800122c <MX_LTDC_Init+0xfc>)
 800118a:	f240 3233 	movw	r2, #819	@ 0x333
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 499;
 8001190:	4b26      	ldr	r3, [pc, #152]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001192:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001196:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001198:	4b24      	ldr	r3, [pc, #144]	@ (800122c <MX_LTDC_Init+0xfc>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <MX_LTDC_Init+0xfc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <MX_LTDC_Init+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011b0:	481e      	ldr	r0, [pc, #120]	@ (800122c <MX_LTDC_Init+0xfc>)
 80011b2:	f005 fa9d 	bl	80066f0 <HAL_LTDC_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80011bc:	f000 fe96 	bl	8001eec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 80011c4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80011c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80011ce:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011d2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80011d4:	2302      	movs	r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80011d8:	23ff      	movs	r3, #255	@ 0xff
 80011da:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80011e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80011e6:	2305      	movs	r3, #5
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = (uint32_t)_fb_start;
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_LTDC_Init+0x104>)
 80011ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 800;
 80011ee:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 80011f4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80011f8:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	@ (800122c <MX_LTDC_Init+0xfc>)
 8001214:	f005 fb3c 	bl	8006890 <HAL_LTDC_ConfigLayer>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 800121e:	f000 fe65 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	3738      	adds	r7, #56	@ 0x38
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20177340 	.word	0x20177340
 8001230:	40016800 	.word	0x40016800
 8001234:	20000000 	.word	0x20000000

08001238 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001258:	4b31      	ldr	r3, [pc, #196]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800125a:	4a32      	ldr	r2, [pc, #200]	@ (8001324 <MX_OCTOSPI1_Init+0xec>)
 800125c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 4;
 800125e:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001260:	2204      	movs	r2, #4
 8001262:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001264:	4b2e      	ldr	r3, [pc, #184]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800126a:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800126c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001270:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001272:	4b2b      	ldr	r3, [pc, #172]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001274:	2220      	movs	r2, #32
 8001276:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8001278:	4b29      	ldr	r3, [pc, #164]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800127a:	2202      	movs	r2, #2
 800127c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800127e:	4b28      	ldr	r3, [pc, #160]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001284:	4b26      	ldr	r3, [pc, #152]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800128a:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001290:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001292:	2202      	movs	r2, #2
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001296:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800129c:	4b20      	ldr	r3, [pc, #128]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800129e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80012bc:	4818      	ldr	r0, [pc, #96]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012be:	f005 fca9 	bl	8006c14 <HAL_OSPI_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 80012c8:	f000 fe10 	bl	8001eec <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80012d8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80012dc:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <MX_OCTOSPI1_Init+0xf0>)
 80012e0:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ea:	4619      	mov	r1, r3
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 80012ee:	f005 fdd1 	bl	8006e94 <HAL_OSPIM_Config>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 80012f8:	f000 fdf8 	bl	8001eec <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001304:	463b      	mov	r3, r7
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_OCTOSPI1_Init+0xe8>)
 800130a:	f006 fbb3 	bl	8007a74 <HAL_OSPI_DLYB_SetConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8001314:	f000 fdea 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	201773e8 	.word	0x201773e8
 8001324:	420d1400 	.word	0x420d1400
 8001328:	01000001 	.word	0x01000001

0800132c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08e      	sub	sp, #56	@ 0x38
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800135a:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <MX_RTC_Init+0xfc>)
 800135c:	4a33      	ldr	r2, [pc, #204]	@ (800142c <MX_RTC_Init+0x100>)
 800135e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001360:	4b31      	ldr	r3, [pc, #196]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001366:	4b30      	ldr	r3, [pc, #192]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001368:	227f      	movs	r2, #127	@ 0x7f
 800136a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800136c:	4b2e      	ldr	r3, [pc, #184]	@ (8001428 <MX_RTC_Init+0xfc>)
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001378:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <MX_RTC_Init+0xfc>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800137e:	4b2a      	ldr	r3, [pc, #168]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001384:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001386:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <MX_RTC_Init+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001398:	4823      	ldr	r0, [pc, #140]	@ (8001428 <MX_RTC_Init+0xfc>)
 800139a:	f00a fff9 	bl	800c390 <HAL_RTC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013a4:	f000 fda2 	bl	8001eec <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <MX_RTC_Init+0xfc>)
 80013c0:	f00b fa5e 	bl	800c880 <HAL_RTCEx_PrivilegeModeSet>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013ca:	f000 fd8f 	bl	8001eec <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2201      	movs	r2, #1
 80013e8:	4619      	mov	r1, r3
 80013ea:	480f      	ldr	r0, [pc, #60]	@ (8001428 <MX_RTC_Init+0xfc>)
 80013ec:	f00b f85a 	bl	800c4a4 <HAL_RTC_SetTime>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80013f6:	f000 fd79 	bl	8001eec <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013fa:	2301      	movs	r3, #1
 80013fc:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80013fe:	2301      	movs	r3, #1
 8001400:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8001402:	2301      	movs	r3, #1
 8001404:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2201      	movs	r2, #1
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <MX_RTC_Init+0xfc>)
 8001412:	f00b f8e3 	bl	800c5dc <HAL_RTC_SetDate>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800141c:	f000 fd66 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001420:	bf00      	nop
 8001422:	3738      	adds	r7, #56	@ 0x38
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20177444 	.word	0x20177444
 800142c:	46007800 	.word	0x46007800

08001430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001442:	4a31      	ldr	r2, [pc, #196]	@ (8001508 <MX_SPI1_Init+0xd8>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b2f      	ldr	r3, [pc, #188]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001448:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001454:	4b2b      	ldr	r3, [pc, #172]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001456:	2203      	movs	r2, #3
 8001458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145a:	4b2a      	ldr	r3, [pc, #168]	@ (8001504 <MX_SPI1_Init+0xd4>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001460:	4b28      	ldr	r3, [pc, #160]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001468:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800146c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800146e:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001474:	4b23      	ldr	r3, [pc, #140]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147a:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <MX_SPI1_Init+0xd4>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001480:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001488:	2207      	movs	r2, #7
 800148a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800148c:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <MX_SPI1_Init+0xd4>)
 800148e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001492:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_SPI1_Init+0xd4>)
 8001496:	2200      	movs	r2, #0
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800149a:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <MX_SPI1_Init+0xd4>)
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014b2:	4b14      	ldr	r3, [pc, #80]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ca:	480e      	ldr	r0, [pc, #56]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014cc:	f00b fa06 	bl	800c8dc <HAL_SPI_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 80014d6:	f000 fd09 	bl	8001eec <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80014de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_SPI1_Init+0xd4>)
 80014ee:	f00b fb26 	bl	800cb3e <HAL_SPIEx_SetConfigAutonomousMode>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 80014f8:	f000 fcf8 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20177474 	.word	0x20177474
 8001508:	40013000 	.word	0x40013000

0800150c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800151e:	4a31      	ldr	r2, [pc, #196]	@ (80015e4 <MX_SPI2_Init+0xd8>)
 8001520:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001522:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001524:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001528:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800152a:	4b2d      	ldr	r3, [pc, #180]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001530:	4b2b      	ldr	r3, [pc, #172]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001532:	2203      	movs	r2, #3
 8001534:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001536:	4b2a      	ldr	r3, [pc, #168]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001544:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001548:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800154c:	2200      	movs	r2, #0
 800154e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001550:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001552:	2200      	movs	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001556:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001558:	2200      	movs	r2, #0
 800155a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155c:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001564:	2207      	movs	r2, #7
 8001566:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800156a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800156e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001572:	2200      	movs	r2, #0
 8001574:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001576:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001578:	2200      	movs	r2, #0
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800157e:	2200      	movs	r2, #0
 8001580:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001582:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001584:	2200      	movs	r2, #0
 8001586:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001588:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800158a:	2200      	movs	r2, #0
 800158c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 800159c:	2200      	movs	r2, #0
 800159e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015a6:	480e      	ldr	r0, [pc, #56]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 80015a8:	f00b f998 	bl	800c8dc <HAL_SPI_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 80015b2:	f000 fc9b 	bl	8001eec <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80015ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_SPI2_Init+0xd4>)
 80015ca:	f00b fab8 	bl	800cb3e <HAL_SPIEx_SetConfigAutonomousMode>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80015d4:	f000 fc8a 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20177504 	.word	0x20177504
 80015e4:	40003800 	.word	0x40003800

080015e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b098      	sub	sp, #96	@ 0x60
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2234      	movs	r2, #52	@ 0x34
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f00e f82a 	bl	800f66e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800161a:	4b3b      	ldr	r3, [pc, #236]	@ (8001708 <MX_TIM1_Init+0x120>)
 800161c:	4a3b      	ldr	r2, [pc, #236]	@ (800170c <MX_TIM1_Init+0x124>)
 800161e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001620:	4b39      	ldr	r3, [pc, #228]	@ (8001708 <MX_TIM1_Init+0x120>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b38      	ldr	r3, [pc, #224]	@ (8001708 <MX_TIM1_Init+0x120>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800162c:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_TIM1_Init+0x120>)
 800162e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001632:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_TIM1_Init+0x120>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800163a:	4b33      	ldr	r3, [pc, #204]	@ (8001708 <MX_TIM1_Init+0x120>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001640:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_TIM1_Init+0x120>)
 8001642:	2200      	movs	r2, #0
 8001644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001646:	4830      	ldr	r0, [pc, #192]	@ (8001708 <MX_TIM1_Init+0x120>)
 8001648:	f00b fbb2 	bl	800cdb0 <HAL_TIM_OC_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fc4b 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001656:	2300      	movs	r3, #0
 8001658:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165e:	2300      	movs	r3, #0
 8001660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001666:	4619      	mov	r1, r3
 8001668:	4827      	ldr	r0, [pc, #156]	@ (8001708 <MX_TIM1_Init+0x120>)
 800166a:	f00d f91f 	bl	800e8ac <HAL_TIMEx_MasterConfigSynchronization>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001674:	f000 fc3a 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001678:	2300      	movs	r3, #0
 800167a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001680:	2300      	movs	r3, #0
 8001682:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001684:	2300      	movs	r3, #0
 8001686:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001694:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001698:	2204      	movs	r2, #4
 800169a:	4619      	mov	r1, r3
 800169c:	481a      	ldr	r0, [pc, #104]	@ (8001708 <MX_TIM1_Init+0x120>)
 800169e:	f00b fde5 	bl	800d26c <HAL_TIM_OC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016a8:	f000 fc20 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4619      	mov	r1, r3
 80016e8:	4807      	ldr	r0, [pc, #28]	@ (8001708 <MX_TIM1_Init+0x120>)
 80016ea:	f00d f9a1 	bl	800ea30 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80016f4:	f000 fbfa 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016f8:	4803      	ldr	r0, [pc, #12]	@ (8001708 <MX_TIM1_Init+0x120>)
 80016fa:	f001 fc53 	bl	8002fa4 <HAL_TIM_MspPostInit>

}
 80016fe:	bf00      	nop
 8001700:	3760      	adds	r7, #96	@ 0x60
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20177594 	.word	0x20177594
 800170c:	40012c00 	.word	0x40012c00

08001710 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001726:	f107 030c 	add.w	r3, r7, #12
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	463b      	mov	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800173e:	4b33      	ldr	r3, [pc, #204]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001740:	4a33      	ldr	r2, [pc, #204]	@ (8001810 <MX_TIM3_Init+0x100>)
 8001742:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001744:	4b31      	ldr	r3, [pc, #196]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001746:	2200      	movs	r2, #0
 8001748:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174a:	4b30      	ldr	r3, [pc, #192]	@ (800180c <MX_TIM3_Init+0xfc>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4294967295;
 8001750:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001752:	f04f 32ff 	mov.w	r2, #4294967295
 8001756:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001758:	4b2c      	ldr	r3, [pc, #176]	@ (800180c <MX_TIM3_Init+0xfc>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175e:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001764:	4829      	ldr	r0, [pc, #164]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001766:	f00b fbdb 	bl	800cf20 <HAL_TIM_IC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001770:	f000 fbbc 	bl	8001eec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001774:	2304      	movs	r3, #4
 8001776:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001778:	2360      	movs	r3, #96	@ 0x60
 800177a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800177c:	2302      	movs	r3, #2
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	481f      	ldr	r0, [pc, #124]	@ (800180c <MX_TIM3_Init+0xfc>)
 8001790:	f00c f898 	bl	800d8c4 <HAL_TIM_SlaveConfigSynchro>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800179a:	f000 fba7 	bl	8001eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80017a2:	2302      	movs	r3, #2
 80017a4:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2200      	movs	r2, #0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4815      	ldr	r0, [pc, #84]	@ (800180c <MX_TIM3_Init+0xfc>)
 80017b8:	f00b fdd2 	bl	800d360 <HAL_TIM_IC_ConfigChannel>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80017c2:	f000 fb93 	bl	8001eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017c6:	2302      	movs	r3, #2
 80017c8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017ca:	2301      	movs	r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2204      	movs	r2, #4
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	@ (800180c <MX_TIM3_Init+0xfc>)
 80017d8:	f00b fdc2 	bl	800d360 <HAL_TIM_IC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80017e2:	f000 fb83 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <MX_TIM3_Init+0xfc>)
 80017f4:	f00d f85a 	bl	800e8ac <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 80017fe:	f000 fb75 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	3730      	adds	r7, #48	@ 0x30
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	201775e0 	.word	0x201775e0
 8001810:	40000400 	.word	0x40000400

08001814 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001826:	4a15      	ldr	r2, [pc, #84]	@ (800187c <MX_TIM6_Init+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_TIM6_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001836:	4b10      	ldr	r3, [pc, #64]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800183c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001846:	f00b f9bb 	bl	800cbc0 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001850:	f000 fb4c 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_TIM6_Init+0x64>)
 8001862:	f00d f823 	bl	800e8ac <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800186c:	f000 fb3e 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2017762c 	.word	0x2017762c
 800187c:	40001000 	.word	0x40001000

08001880 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b09c      	sub	sp, #112	@ 0x70
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]
 80018b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2234      	movs	r2, #52	@ 0x34
 80018b8:	2100      	movs	r1, #0
 80018ba:	4618      	mov	r0, r3
 80018bc:	f00d fed7 	bl	800f66e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018c0:	4b3f      	ldr	r3, [pc, #252]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018c2:	4a40      	ldr	r2, [pc, #256]	@ (80019c4 <MX_TIM15_Init+0x144>)
 80018c4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80018c6:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b3c      	ldr	r3, [pc, #240]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80018d2:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018da:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018e0:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e6:	4b36      	ldr	r3, [pc, #216]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80018ec:	4834      	ldr	r0, [pc, #208]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80018ee:	f00b f967 	bl	800cbc0 <HAL_TIM_Base_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80018f8:	f000 faf8 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001900:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001902:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001906:	4619      	mov	r1, r3
 8001908:	482d      	ldr	r0, [pc, #180]	@ (80019c0 <MX_TIM15_Init+0x140>)
 800190a:	f00b fed9 	bl	800d6c0 <HAL_TIM_ConfigClockSource>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001914:	f000 faea 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001918:	4829      	ldr	r0, [pc, #164]	@ (80019c0 <MX_TIM15_Init+0x140>)
 800191a:	f00b faa0 	bl	800ce5e <HAL_TIM_PWM_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001924:	f000 fae2 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001934:	4619      	mov	r1, r3
 8001936:	4822      	ldr	r0, [pc, #136]	@ (80019c0 <MX_TIM15_Init+0x140>)
 8001938:	f00c ffb8 	bl	800e8ac <HAL_TIMEx_MasterConfigSynchronization>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001942:	f000 fad3 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001946:	2360      	movs	r3, #96	@ 0x60
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4815      	ldr	r0, [pc, #84]	@ (80019c0 <MX_TIM15_Init+0x140>)
 800196c:	f00b fd94 	bl	800d498 <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001976:	f000 fab9 	bl	8001eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001992:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4807      	ldr	r0, [pc, #28]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80019a2:	f00d f845 	bl	800ea30 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80019ac:	f000 fa9e 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019b0:	4803      	ldr	r0, [pc, #12]	@ (80019c0 <MX_TIM15_Init+0x140>)
 80019b2:	f001 faf7 	bl	8002fa4 <HAL_TIM_MspPostInit>

}
 80019b6:	bf00      	nop
 80019b8:	3770      	adds	r7, #112	@ 0x70
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20177678 	.word	0x20177678
 80019c4:	40014000 	.word	0x40014000

080019c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019ce:	4a23      	ldr	r2, [pc, #140]	@ (8001a5c <MX_USART1_UART_Init+0x94>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019d2:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fe:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a10:	4811      	ldr	r0, [pc, #68]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a12:	f00d f8ed 	bl	800ebf0 <HAL_UART_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a1c:	f000 fa66 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a20:	2100      	movs	r1, #0
 8001a22:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a24:	f00d fd3a 	bl	800f49c <HAL_UARTEx_SetTxFifoThreshold>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a2e:	f000 fa5d 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4808      	ldr	r0, [pc, #32]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a36:	f00d fd6f 	bl	800f518 <HAL_UARTEx_SetRxFifoThreshold>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a40:	f000 fa54 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <MX_USART1_UART_Init+0x90>)
 8001a46:	f00d fcf0 	bl	800f42a <HAL_UARTEx_DisableFifoMode>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a50:	f000 fa4c 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	201776c4 	.word	0x201776c4
 8001a5c:	40013800 	.word	0x40013800

08001a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a64:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a66:	4a23      	ldr	r2, [pc, #140]	@ (8001af4 <MX_USART2_UART_Init+0x94>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b17      	ldr	r3, [pc, #92]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a96:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa8:	4811      	ldr	r0, [pc, #68]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001aaa:	f00d f8a1 	bl	800ebf0 <HAL_UART_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ab4:	f000 fa1a 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001abc:	f00d fcee 	bl	800f49c <HAL_UARTEx_SetTxFifoThreshold>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ac6:	f000 fa11 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aca:	2100      	movs	r1, #0
 8001acc:	4808      	ldr	r0, [pc, #32]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001ace:	f00d fd23 	bl	800f518 <HAL_UARTEx_SetRxFifoThreshold>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad8:	f000 fa08 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001adc:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <MX_USART2_UART_Init+0x90>)
 8001ade:	f00d fca4 	bl	800f42a <HAL_UARTEx_DisableFifoMode>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f000 fa00 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20177758 	.word	0x20177758
 8001af4:	40004400 	.word	0x40004400

08001af8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001afe:	4a23      	ldr	r2, [pc, #140]	@ (8001b8c <MX_USART3_UART_Init+0x94>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b1c      	ldr	r3, [pc, #112]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b34:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3a:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b40:	4811      	ldr	r0, [pc, #68]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b42:	f00d f855 	bl	800ebf0 <HAL_UART_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b4c:	f000 f9ce 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b50:	2100      	movs	r1, #0
 8001b52:	480d      	ldr	r0, [pc, #52]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b54:	f00d fca2 	bl	800f49c <HAL_UARTEx_SetTxFifoThreshold>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5e:	f000 f9c5 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b62:	2100      	movs	r1, #0
 8001b64:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b66:	f00d fcd7 	bl	800f518 <HAL_UARTEx_SetRxFifoThreshold>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b70:	f000 f9bc 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b74:	4804      	ldr	r0, [pc, #16]	@ (8001b88 <MX_USART3_UART_Init+0x90>)
 8001b76:	f00d fc58 	bl	800f42a <HAL_UARTEx_DisableFifoMode>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b80:	f000 f9b4 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	201777ec 	.word	0x201777ec
 8001b8c:	40004800 	.word	0x40004800

08001b90 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b94:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001b96:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <MX_USART6_UART_Init+0x94>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bd8:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bda:	f00d f809 	bl	800ebf0 <HAL_UART_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001be4:	f000 f982 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bec:	f00d fc56 	bl	800f49c <HAL_UARTEx_SetTxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f000 f979 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001bfe:	f00d fc8b 	bl	800f518 <HAL_UARTEx_SetRxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f000 f970 	bl	8001eec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	@ (8001c20 <MX_USART6_UART_Init+0x90>)
 8001c0e:	f00d fc0c 	bl	800f42a <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f000 f968 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20177880 	.word	0x20177880
 8001c24:	40006400 	.word	0x40006400

08001c28 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b090      	sub	sp, #64	@ 0x40
 8001c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]
 8001c48:	609a      	str	r2, [r3, #8]
 8001c4a:	60da      	str	r2, [r3, #12]
 8001c4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c54:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c5e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6c:	4b96      	ldr	r3, [pc, #600]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c72:	4a95      	ldr	r2, [pc, #596]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c7c:	4b92      	ldr	r3, [pc, #584]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c90:	4a8d      	ldr	r2, [pc, #564]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c92:	f043 0308 	orr.w	r3, r3, #8
 8001c96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	f003 0308 	and.w	r3, r3, #8
 8001ca4:	623b      	str	r3, [r7, #32]
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca8:	4b87      	ldr	r3, [pc, #540]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cae:	4a86      	ldr	r2, [pc, #536]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cb0:	f043 0304 	orr.w	r3, r3, #4
 8001cb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cb8:	4b83      	ldr	r3, [pc, #524]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc6:	4b80      	ldr	r3, [pc, #512]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ccc:	4a7e      	ldr	r2, [pc, #504]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ce4:	4b78      	ldr	r3, [pc, #480]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cea:	4a77      	ldr	r2, [pc, #476]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cf4:	4b74      	ldr	r3, [pc, #464]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d02:	4b71      	ldr	r3, [pc, #452]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d08:	4a6f      	ldr	r2, [pc, #444]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d12:	4b6d      	ldr	r3, [pc, #436]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001d20:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d26:	4a68      	ldr	r2, [pc, #416]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d2c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d30:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d3e:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d44:	4a60      	ldr	r2, [pc, #384]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d62:	4a59      	ldr	r2, [pc, #356]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d6c:	4b56      	ldr	r3, [pc, #344]	@ (8001ec8 <MX_GPIO_Init+0x290>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_RESET_GPIO_Port, LCD_DISP_RESET_Pin, GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2180      	movs	r1, #128	@ 0x80
 8001d7e:	4853      	ldr	r0, [pc, #332]	@ (8001ecc <MX_GPIO_Init+0x294>)
 8001d80:	f004 fa9e 	bl	80062c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2108      	movs	r1, #8
 8001d88:	4851      	ldr	r0, [pc, #324]	@ (8001ed0 <MX_GPIO_Init+0x298>)
 8001d8a:	f004 fa99 	bl	80062c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_8|R_CS_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001d94:	484f      	ldr	r0, [pc, #316]	@ (8001ed4 <MX_GPIO_Init+0x29c>)
 8001d96:	f004 fa93 	bl	80062c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_RST_GPIO_Port, R_RST_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2110      	movs	r1, #16
 8001d9e:	484e      	ldr	r0, [pc, #312]	@ (8001ed8 <MX_GPIO_Init+0x2a0>)
 8001da0:	f004 fa8e 	bl	80062c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db2:	2302      	movs	r3, #2
 8001db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001db6:	2300      	movs	r3, #0
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4846      	ldr	r0, [pc, #280]	@ (8001edc <MX_GPIO_Init+0x2a4>)
 8001dc2:	f004 f8a5 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_RESET_Pin;
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_RESET_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dda:	4619      	mov	r1, r3
 8001ddc:	483b      	ldr	r0, [pc, #236]	@ (8001ecc <MX_GPIO_Init+0x294>)
 8001dde:	f004 f897 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001de2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4838      	ldr	r0, [pc, #224]	@ (8001edc <MX_GPIO_Init+0x2a4>)
 8001dfc:	f004 f888 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_RST_Pin */
  GPIO_InitStruct.Pin = CTP_RST_Pin;
 8001e00:	2308      	movs	r3, #8
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(CTP_RST_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e14:	4619      	mov	r1, r3
 8001e16:	482e      	ldr	r0, [pc, #184]	@ (8001ed0 <MX_GPIO_Init+0x298>)
 8001e18:	f004 f87a 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_USB_HS;
 8001e2e:	230a      	movs	r3, #10
 8001e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e36:	4619      	mov	r1, r3
 8001e38:	4828      	ldr	r0, [pc, #160]	@ (8001edc <MX_GPIO_Init+0x2a4>)
 8001e3a:	f004 f869 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001e3e:	2340      	movs	r3, #64	@ 0x40
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e42:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <MX_GPIO_Init+0x2a8>)
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4e:	4619      	mov	r1, r3
 8001e50:	481f      	ldr	r0, [pc, #124]	@ (8001ed0 <MX_GPIO_Init+0x298>)
 8001e52:	f004 f85d 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG8 R_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|R_CS_Pin;
 8001e56:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4819      	ldr	r0, [pc, #100]	@ (8001ed4 <MX_GPIO_Init+0x29c>)
 8001e70:	f004 f84e 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001e80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e84:	4619      	mov	r1, r3
 8001e86:	4817      	ldr	r0, [pc, #92]	@ (8001ee4 <MX_GPIO_Init+0x2ac>)
 8001e88:	f004 f842 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_RST_Pin */
  GPIO_InitStruct.Pin = R_RST_Pin;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(R_RST_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_GPIO_Init+0x2a0>)
 8001ea4:	f004 f834 	bl	8005f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_INT_Pin */
  GPIO_InitStruct.Pin = R_INT_Pin;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(R_INT_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <MX_GPIO_Init+0x2b0>)
 8001ebc:	f004 f828 	bl	8005f10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ec0:	bf00      	nop
 8001ec2:	3740      	adds	r7, #64	@ 0x40
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	46020c00 	.word	0x46020c00
 8001ecc:	42021c00 	.word	0x42021c00
 8001ed0:	42021000 	.word	0x42021000
 8001ed4:	42021800 	.word	0x42021800
 8001ed8:	42021400 	.word	0x42021400
 8001edc:	42020000 	.word	0x42020000
 8001ee0:	10210000 	.word	0x10210000
 8001ee4:	42022400 	.word	0x42022400
 8001ee8:	42020800 	.word	0x42020800

08001eec <Error_Handler>:

void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <Error_Handler+0x8>

08001ef8 <main>:
  0xF81F, // Magenta
  0x07FF  // Cyan
};

int main(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af02      	add	r7, sp, #8
  HAL_Init();
 8001efe:	f001 fbb3 	bl	8003668 <HAL_Init>
  InitClocks();
 8001f02:	f7fe fda7 	bl	8000a54 <InitClocks>
  InitPeripherals();
 8001f06:	f7fe fd6b 	bl	80009e0 <InitPeripherals>
  InitHana();
 8001f0a:	f7fe fb5b 	bl	80005c4 <InitHana>

  HAL_GPIO_WritePin(LCD_DISP_RESET_GPIO_Port, LCD_DISP_RESET_Pin, GPIO_PIN_SET);
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2180      	movs	r1, #128	@ 0x80
 8001f12:	482b      	ldr	r0, [pc, #172]	@ (8001fc0 <main+0xc8>)
 8001f14:	f004 f9d4 	bl	80062c0 <HAL_GPIO_WritePin>
  HAL_NVIC_SetPriority(EXTI6_IRQn, 7, 0);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2107      	movs	r1, #7
 8001f1c:	2011      	movs	r0, #17
 8001f1e:	f003 f8d5 	bl	80050cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI6_IRQn);
 8001f22:	2011      	movs	r0, #17
 8001f24:	f003 f8ec 	bl	8005100 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2108      	movs	r1, #8
 8001f2c:	4825      	ldr	r0, [pc, #148]	@ (8001fc4 <main+0xcc>)
 8001f2e:	f004 f9c7 	bl	80062c0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001f32:	200a      	movs	r0, #10
 8001f34:	f001 fbe8 	bl	8003708 <HAL_Delay>
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2108      	movs	r1, #8
 8001f3c:	4821      	ldr	r0, [pc, #132]	@ (8001fc4 <main+0xcc>)
 8001f3e:	f004 f9bf 	bl	80062c0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001f42:	200a      	movs	r0, #10
 8001f44:	f001 fbe0 	bl	8003708 <HAL_Delay>
  HAL_GPIO_WritePin(CTP_RST_GPIO_Port, CTP_RST_Pin, GPIO_PIN_SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	481d      	ldr	r0, [pc, #116]	@ (8001fc4 <main+0xcc>)
 8001f4e:	f004 f9b7 	bl	80062c0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001f52:	200a      	movs	r0, #10
 8001f54:	f001 fbd8 	bl	8003708 <HAL_Delay>

  DrawBackground(COLOR_WHITE);
 8001f58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f5c:	f7fe fcdc 	bl	8000918 <DrawBackground>
  DrawHline(100, 10, 100, 0xF800);
 8001f60:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001f64:	2264      	movs	r2, #100	@ 0x64
 8001f66:	210a      	movs	r1, #10
 8001f68:	2064      	movs	r0, #100	@ 0x64
 8001f6a:	f7fe fb5b 	bl	8000624 <DrawHline>
  DrawVLine(300, 100, 100, 0xF900);
 8001f6e:	f44f 4379 	mov.w	r3, #63744	@ 0xf900
 8001f72:	2264      	movs	r2, #100	@ 0x64
 8001f74:	2164      	movs	r1, #100	@ 0x64
 8001f76:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f7a:	f7fe fb71 	bl	8000660 <DrawVLine>
  DrawCircle(120, 300, 100, 0x3333);
 8001f7e:	f243 3333 	movw	r3, #13107	@ 0x3333
 8001f82:	2264      	movs	r2, #100	@ 0x64
 8001f84:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8001f88:	2078      	movs	r0, #120	@ 0x78
 8001f8a:	f7fe fb87 	bl	800069c <DrawCircle>
  DrawRectangle(150, 150, 200, 200, 0x5555);
 8001f8e:	f245 5355 	movw	r3, #21845	@ 0x5555
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	23c8      	movs	r3, #200	@ 0xc8
 8001f96:	22c8      	movs	r2, #200	@ 0xc8
 8001f98:	2196      	movs	r1, #150	@ 0x96
 8001f9a:	2096      	movs	r0, #150	@ 0x96
 8001f9c:	f7fe fc00 	bl	80007a0 <DrawRectangle>
  DrawRoundedRectangle(500, 100, 100, 100, 10, 0x4444);
 8001fa0:	f244 4344 	movw	r3, #17476	@ 0x4444
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2364      	movs	r3, #100	@ 0x64
 8001fac:	2264      	movs	r2, #100	@ 0x64
 8001fae:	2164      	movs	r1, #100	@ 0x64
 8001fb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fb4:	f7fe fc1d 	bl	80007f2 <DrawRoundedRectangle>
  SwapBuffers();
 8001fb8:	f7fe fc84 	bl	80008c4 <SwapBuffers>

  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <main+0xc4>
 8001fc0:	42021c00 	.word	0x42021c00
 8001fc4:	42021000 	.word	0x42021000

08001fc8 <HAL_GPIO_EXTI_Falling_Callback>:
  {
  }
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == CTP_INT_Pin)
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	2b40      	cmp	r3, #64	@ 0x40
 8001fd6:	d102      	bne.n	8001fde <HAL_GPIO_EXTI_Falling_Callback+0x16>
	{
		TouchINT_irq = 1;
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <HAL_GPIO_EXTI_Falling_Callback+0x24>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
	}
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20177914 	.word	0x20177914

08001ff0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d101      	bne.n	8002006 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002002:	f001 fb61 	bl	80036c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <HAL_MspInit+0x38>)
 8002018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <HAL_MspInit+0x38>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_MspInit+0x38>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8002034:	f005 fe52 	bl	8007cdc <HAL_PWREx_EnableVddUSB>
  HAL_PWREx_EnableVddIO2();
 8002038:	f005 fe60 	bl	8007cfc <HAL_PWREx_EnableVddIO2>
  HAL_PWREx_EnableVddA();
 800203c:	f005 fe6e 	bl	8007d1c <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	46020c00 	.word	0x46020c00

0800204c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b0bc      	sub	sp, #240	@ 0xf0
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	22e0      	movs	r2, #224	@ 0xe0
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f00d fb06 	bl	800f66e <memset>
  if(hadc->Instance==ADC1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a32      	ldr	r2, [pc, #200]	@ (8002130 <HAL_ADC_MspInit+0xe4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d12c      	bne.n	80020c6 <HAL_ADC_MspInit+0x7a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800206c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8002078:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800207c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4618      	mov	r0, r3
 8002086:	f007 f975 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8002090:	f7ff ff2c 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002094:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	4a26      	ldr	r2, [pc, #152]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 800209c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800209e:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d140      	bne.n	8002128 <HAL_ADC_MspInit+0xdc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020a6:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ac:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 80020ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020b6:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 80020b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020c4:	e030      	b.n	8002128 <HAL_ADC_MspInit+0xdc>
  else if(hadc->Instance==ADC2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <HAL_ADC_MspInit+0xf0>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d12b      	bne.n	8002128 <HAL_ADC_MspInit+0xdc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 80020d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80020dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e4:	f107 0310 	add.w	r3, r7, #16
 80020e8:	4618      	mov	r0, r3
 80020ea:	f007 f943 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <HAL_ADC_MspInit+0xac>
      Error_Handler();
 80020f4:	f7ff fefa 	bl	8001eec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 8002100:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <HAL_ADC_MspInit+0xe8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10e      	bne.n	8002128 <HAL_ADC_MspInit+0xdc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800210a:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 800210c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002110:	4a09      	ldr	r2, [pc, #36]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002116:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_ADC_MspInit+0xec>)
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
}
 8002128:	bf00      	nop
 800212a:	37f0      	adds	r7, #240	@ 0xf0
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	42028000 	.word	0x42028000
 8002134:	20177918 	.word	0x20177918
 8002138:	46020c00 	.word	0x46020c00
 800213c:	42028100 	.word	0x42028100

08002140 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0c2      	sub	sp, #264	@ 0x108
 8002144:	af00      	add	r7, sp, #0
 8002146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800214a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800214e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	22e0      	movs	r2, #224	@ 0xe0
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f00d fa80 	bl	800f66e <memset>
  if(hdac->Instance==DAC1)
 800216e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002172:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_DAC_MspInit+0xe4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d14b      	bne.n	8002218 <HAL_DAC_MspInit+0xd8>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8002180:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <HAL_DAC_MspInit+0xe8>)
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800218a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800218e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8002192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219a:	f107 0310 	add.w	r3, r7, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f007 f8e8 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_DAC_MspInit+0x6e>
    {
      Error_Handler();
 80021aa:	f7ff fe9f 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021b4:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80021be:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021cc:	4b17      	ldr	r3, [pc, #92]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021dc:	4b13      	ldr	r3, [pc, #76]	@ (800222c <HAL_DAC_MspInit+0xec>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021e2:	f003 0201 	and.w	r2, r3, #1
 80021e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80021f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80021f8:	681b      	ldr	r3, [r3, #0]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021fa:	2330      	movs	r3, #48	@ 0x30
 80021fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002200:	2303      	movs	r3, #3
 8002202:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002210:	4619      	mov	r1, r3
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <HAL_DAC_MspInit+0xf0>)
 8002214:	f003 fe7c 	bl	8005f10 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8002218:	bf00      	nop
 800221a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	46021800 	.word	0x46021800
 8002228:	10008000 	.word	0x10008000
 800222c:	46020c00 	.word	0x46020c00
 8002230:	42020000 	.word	0x42020000

08002234 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	@ (800229c <HAL_DCACHE_MspInit+0x68>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d10f      	bne.n	8002266 <HAL_DCACHE_MspInit+0x32>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 800224e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002252:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 8002258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE2_MspInit 1 */

  /* USER CODE END DCACHE2_MspInit 1 */
  }

}
 8002264:	e013      	b.n	800228e <HAL_DCACHE_MspInit+0x5a>
  else if(hdcache->Instance==DCACHE2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0e      	ldr	r2, [pc, #56]	@ (80022a4 <HAL_DCACHE_MspInit+0x70>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d10e      	bne.n	800228e <HAL_DCACHE_MspInit+0x5a>
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 8002278:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_DCACHE_MspInit+0x6c>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	68bb      	ldr	r3, [r7, #8]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40031400 	.word	0x40031400
 80022a0:	46020c00 	.word	0x46020c00
 80022a4:	40031800 	.word	0x40031800

080022a8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0b      	ldr	r2, [pc, #44]	@ (80022e4 <HAL_DMA2D_MspInit+0x3c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10e      	bne.n	80022d8 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022ba:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <HAL_DMA2D_MspInit+0x40>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022c0:	4a09      	ldr	r2, [pc, #36]	@ (80022e8 <HAL_DMA2D_MspInit+0x40>)
 80022c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80022ca:	4b07      	ldr	r3, [pc, #28]	@ (80022e8 <HAL_DMA2D_MspInit+0x40>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	4002b000 	.word	0x4002b000
 80022e8:	46020c00 	.word	0x46020c00

080022ec <HAL_GPU2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hgpu2d: GPU2D handle pointer
* @retval None
*/
void HAL_GPU2D_MspInit(GPU2D_HandleTypeDef* hgpu2d)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  if(hgpu2d->Instance==GPU2D)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002364 <HAL_GPU2D_MspInit+0x78>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d12d      	bne.n	800235a <HAL_GPU2D_MspInit+0x6e>
  {
  /* USER CODE BEGIN GPU2D_MspInit 0 */

  /* USER CODE END GPU2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_GPU2D_CLK_ENABLE();
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800230a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800230e:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DCACHE2_CLK_ENABLE();
 800231c:	4b12      	ldr	r3, [pc, #72]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 8002324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800232c:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_GPU2D_MspInit+0x7c>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002332:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
    /* GPU2D interrupt Init */
    HAL_NVIC_SetPriority(GPU2D_IRQn, 0, 0);
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	2084      	movs	r0, #132	@ 0x84
 8002340:	f002 fec4 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_IRQn);
 8002344:	2084      	movs	r0, #132	@ 0x84
 8002346:	f002 fedb 	bl	8005100 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPU2D_ER_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2085      	movs	r0, #133	@ 0x85
 8002350:	f002 febc 	bl	80050cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPU2D_ER_IRQn);
 8002354:	2085      	movs	r0, #133	@ 0x85
 8002356:	f002 fed3 	bl	8005100 <HAL_NVIC_EnableIRQ>

  /* USER CODE END GPU2D_MspInit 1 */

  }

}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	4002f000 	.word	0x4002f000
 8002368:	46020c00 	.word	0x46020c00

0800236c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0c8      	sub	sp, #288	@ 0x120
 8002370:	af00      	add	r7, sp, #0
 8002372:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002376:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800237a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800238c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002390:	22e0      	movs	r2, #224	@ 0xe0
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f00d f96a 	bl	800f66e <memset>
  if(hi2c->Instance==I2C1)
 800239a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800239e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4aa2      	ldr	r2, [pc, #648]	@ (8002630 <HAL_I2C_MspInit+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d17c      	bne.n	80024a6 <HAL_I2C_MspInit+0x13a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023ac:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023c2:	4618      	mov	r0, r3
 80023c4:	f006 ffd6 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 80023ce:	f7ff fd8d 	bl	8001eec <Error_Handler>
    }

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023d2:	4b98      	ldr	r3, [pc, #608]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80023d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023d8:	4a96      	ldr	r2, [pc, #600]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80023da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023e2:	4b94      	ldr	r3, [pc, #592]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80023e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f0:	4b90      	ldr	r3, [pc, #576]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f6:	4a8f      	ldr	r2, [pc, #572]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002400:	4b8c      	ldr	r3, [pc, #560]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002406:	f003 0202 	and.w	r2, r3, #2
 800240a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800240e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002418:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800241c:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PG13     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800241e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002422:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002426:	2312      	movs	r3, #18
 8002428:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002438:	2304      	movs	r3, #4
 800243a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800243e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002442:	4619      	mov	r1, r3
 8002444:	487c      	ldr	r0, [pc, #496]	@ (8002638 <HAL_I2C_MspInit+0x2cc>)
 8002446:	f003 fd63 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800244a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800244e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002452:	2312      	movs	r3, #18
 8002454:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002464:	2304      	movs	r3, #4
 8002466:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800246e:	4619      	mov	r1, r3
 8002470:	4872      	ldr	r0, [pc, #456]	@ (800263c <HAL_I2C_MspInit+0x2d0>)
 8002472:	f003 fd4d 	bl	8005f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002476:	4b6f      	ldr	r3, [pc, #444]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002478:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800247c:	4a6d      	ldr	r2, [pc, #436]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 800247e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002482:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002486:	4b6b      	ldr	r3, [pc, #428]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002488:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800248c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002490:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800249e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024a2:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80024a4:	e0bf      	b.n	8002626 <HAL_I2C_MspInit+0x2ba>
  else if(hi2c->Instance==I2C2)
 80024a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a63      	ldr	r2, [pc, #396]	@ (8002640 <HAL_I2C_MspInit+0x2d4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d156      	bne.n	8002566 <HAL_I2C_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024b8:	f04f 0280 	mov.w	r2, #128	@ 0x80
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 ff50 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_MspInit+0x172>
      Error_Handler();
 80024da:	f7ff fd07 	bl	8001eec <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80024de:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80024e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e4:	4a53      	ldr	r2, [pc, #332]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80024e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ee:	4b51      	ldr	r3, [pc, #324]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80024f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024f4:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 80024f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80024fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800250a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 800250c:	2330      	movs	r3, #48	@ 0x30
 800250e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002512:	2312      	movs	r3, #18
 8002514:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002524:	2304      	movs	r3, #4
 8002526:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800252a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800252e:	4619      	mov	r1, r3
 8002530:	4844      	ldr	r0, [pc, #272]	@ (8002644 <HAL_I2C_MspInit+0x2d8>)
 8002532:	f003 fced 	bl	8005f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002536:	4b3f      	ldr	r3, [pc, #252]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002538:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800253c:	4a3d      	ldr	r2, [pc, #244]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 800253e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002542:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002546:	4b3b      	ldr	r3, [pc, #236]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002548:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800254c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002550:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002554:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800255e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	e05f      	b.n	8002626 <HAL_I2C_MspInit+0x2ba>
  else if(hi2c->Instance==I2C4)
 8002566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800256a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a35      	ldr	r2, [pc, #212]	@ (8002648 <HAL_I2C_MspInit+0x2dc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d156      	bne.n	8002626 <HAL_I2C_MspInit+0x2ba>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002578:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800258a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258e:	4618      	mov	r0, r3
 8002590:	f006 fef0 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_MspInit+0x232>
      Error_Handler();
 800259a:	f7ff fca7 	bl	8001eec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b25      	ldr	r3, [pc, #148]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025a4:	4a23      	ldr	r2, [pc, #140]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025ae:	4b21      	ldr	r3, [pc, #132]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025b4:	f003 0202 	and.w	r2, r3, #2
 80025b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025bc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80025c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80025ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80025cc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025d0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d4:	2312      	movs	r3, #18
 80025d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 80025e6:	2303      	movs	r3, #3
 80025e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80025f0:	4619      	mov	r1, r3
 80025f2:	4812      	ldr	r0, [pc, #72]	@ (800263c <HAL_I2C_MspInit+0x2d0>)
 80025f4:	f003 fc8c 	bl	8005f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 80025fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80025fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <HAL_I2C_MspInit+0x2c8>)
 800260a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800260e:	f003 0202 	and.w	r2, r3, #2
 8002612:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002616:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002620:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002624:	681b      	ldr	r3, [r3, #0]
}
 8002626:	bf00      	nop
 8002628:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40005400 	.word	0x40005400
 8002634:	46020c00 	.word	0x46020c00
 8002638:	42021800 	.word	0x42021800
 800263c:	42020400 	.word	0x42020400
 8002640:	40005800 	.word	0x40005800
 8002644:	42021c00 	.word	0x42021c00
 8002648:	40008400 	.word	0x40008400

0800264c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b0c4      	sub	sp, #272	@ 0x110
 8002650:	af00      	add	r7, sp, #0
 8002652:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800265a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	22e0      	movs	r2, #224	@ 0xe0
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f00c fffa 	bl	800f66e <memset>
  if(hltdc->Instance==LTDC)
 800267a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800267e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a63      	ldr	r2, [pc, #396]	@ (8002814 <HAL_LTDC_MspInit+0x1c8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	f040 80bd 	bne.w	8002808 <HAL_LTDC_MspInit+0x1bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	f04f 0302 	mov.w	r3, #2
 8002696:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLL2;
 800269a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800269e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    PeriphClkInit.PLL2.PLL2Source = RCC_PLLSOURCE_HSE;
 80026a2:	2303      	movs	r3, #3
 80026a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLL2.PLL2M = 4;
 80026a6:	2304      	movs	r3, #4
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLL2.PLL2N = 129;
 80026aa:	2381      	movs	r3, #129	@ 0x81
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLL2.PLL2P = 2;
 80026ae:	2302      	movs	r3, #2
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLL2.PLL2Q = 2;
 80026b2:	2302      	movs	r3, #2
 80026b4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLL2.PLL2R = 20;
 80026b6:	2314      	movs	r3, #20
 80026b8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.PLL2.PLL2RGE = RCC_PLLVCIRANGE_0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInit.PLL2.PLL2FRACN = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.PLL2.PLL2ClockOut = RCC_PLL2_DIVR;
 80026c2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026c6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026c8:	f107 0318 	add.w	r3, r7, #24
 80026cc:	4618      	mov	r0, r3
 80026ce:	f006 fe51 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_LTDC_MspInit+0x90>
    {
      Error_Handler();
 80026d8:	f7ff fc08 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80026dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 80026de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 80026e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026e8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 80026ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026fa:	4b47      	ldr	r3, [pc, #284]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 80026fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002700:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 8002702:	f043 0310 	orr.w	r3, r3, #16
 8002706:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800270a:	4b43      	ldr	r3, [pc, #268]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 800270c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002710:	f003 0210 	and.w	r2, r3, #16
 8002714:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002718:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002722:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002726:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002728:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 800272a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800272e:	4a3a      	ldr	r2, [pc, #232]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 8002730:	f043 0308 	orr.w	r3, r3, #8
 8002734:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002738:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 800273a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800273e:	f003 0208 	and.w	r2, r3, #8
 8002742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002754:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002756:	4b30      	ldr	r3, [pc, #192]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275c:	4a2e      	ldr	r2, [pc, #184]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 800275e:	f043 0320 	orr.w	r3, r3, #32
 8002762:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002766:	4b2c      	ldr	r3, [pc, #176]	@ (8002818 <HAL_LTDC_MspInit+0x1cc>)
 8002768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800276c:	f003 0220 	and.w	r2, r3, #32
 8002770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800277e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002782:	681b      	ldr	r3, [r3, #0]
    PE11     ------> LTDC_G4
    PD10     ------> LTDC_R5
    PD9     ------> LTDC_R4
    PE14     ------> LTDC_G7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_7
 8002784:	f647 7381 	movw	r3, #32641	@ 0x7f81
 8002788:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 800279e:	2308      	movs	r3, #8
 80027a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80027a8:	4619      	mov	r1, r3
 80027aa:	481c      	ldr	r0, [pc, #112]	@ (800281c <HAL_LTDC_MspInit+0x1d0>)
 80027ac:	f003 fbb0 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_15
 80027b0:	f64b 730b 	movw	r3, #48907	@ 0xbf0b
 80027b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8|GPIO_PIN_13
                          |GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c4:	2303      	movs	r3, #3
 80027c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80027ca:	2308      	movs	r3, #8
 80027cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d0:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80027d4:	4619      	mov	r1, r3
 80027d6:	4812      	ldr	r0, [pc, #72]	@ (8002820 <HAL_LTDC_MspInit+0x1d4>)
 80027d8:	f003 fb9a 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80027dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_LTDC;
 80027f6:	2308      	movs	r3, #8
 80027f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027fc:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002800:	4619      	mov	r1, r3
 8002802:	4808      	ldr	r0, [pc, #32]	@ (8002824 <HAL_LTDC_MspInit+0x1d8>)
 8002804:	f003 fb84 	bl	8005f10 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002808:	bf00      	nop
 800280a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40016800 	.word	0x40016800
 8002818:	46020c00 	.word	0x46020c00
 800281c:	42021000 	.word	0x42021000
 8002820:	42020c00 	.word	0x42020c00
 8002824:	42021400 	.word	0x42021400

08002828 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0c8      	sub	sp, #288	@ 0x120
 800282c:	af00      	add	r7, sp, #0
 800282e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002832:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002836:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800284c:	22e0      	movs	r2, #224	@ 0xe0
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f00c ff0c 	bl	800f66e <memset>
  if(hospi->Instance==OCTOSPI1)
 8002856:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800285a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4ab1      	ldr	r2, [pc, #708]	@ (8002b28 <HAL_OSPI_MspInit+0x300>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f040 8159 	bne.w	8002b1c <HAL_OSPI_MspInit+0x2f4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800286a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002880:	4618      	mov	r0, r3
 8002882:	f006 fd77 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 800288c:	f7ff fb2e 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002890:	4ba6      	ldr	r3, [pc, #664]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	4aa5      	ldr	r2, [pc, #660]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002898:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800289c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028a0:	4ba2      	ldr	r3, [pc, #648]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80028ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b4:	4a9d      	ldr	r2, [pc, #628]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028b6:	f043 0310 	orr.w	r3, r3, #16
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028be:	4b9b      	ldr	r3, [pc, #620]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f003 0210 	and.w	r2, r3, #16
 80028c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028d6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028da:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80028dc:	4b93      	ldr	r3, [pc, #588]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028e2:	4a92      	ldr	r2, [pc, #584]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80028ec:	4b8f      	ldr	r3, [pc, #572]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80028ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f2:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80028f6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80028fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002908:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800290a:	4b88      	ldr	r3, [pc, #544]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800290c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002910:	4a86      	ldr	r2, [pc, #536]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002912:	f043 0308 	orr.w	r3, r3, #8
 8002916:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800291a:	4b84      	ldr	r3, [pc, #528]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800291c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002920:	f003 0208 	and.w	r2, r3, #8
 8002924:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002936:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002938:	4b7c      	ldr	r3, [pc, #496]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800293e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002944:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002948:	4b78      	ldr	r3, [pc, #480]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800294a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294e:	f003 0280 	and.w	r2, r3, #128	@ 0x80
 8002952:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002956:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002960:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002964:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	4b71      	ldr	r3, [pc, #452]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296c:	4a6f      	ldr	r2, [pc, #444]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002976:	4b6d      	ldr	r3, [pc, #436]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002978:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800297c:	f003 0220 	and.w	r2, r3, #32
 8002980:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8002984:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800298e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002992:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002994:	4b65      	ldr	r3, [pc, #404]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 8002996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299a:	4a64      	ldr	r2, [pc, #400]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029a4:	4b61      	ldr	r3, [pc, #388]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80029a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80029c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80029c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c8:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029d2:	4b56      	ldr	r3, [pc, #344]	@ (8002b2c <HAL_OSPI_MspInit+0x304>)
 80029d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029d8:	f003 0204 	and.w	r2, r3, #4
 80029dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80029ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80029ee:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PF8     ------> OCTOSPIM_P1_IO0
    PA2     ------> OCTOSPIM_P1_NCS
    PC3     ------> OCTOSPIM_P1_IO6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 80029f0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 80029f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a10:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a14:	4619      	mov	r1, r3
 8002a16:	4846      	ldr	r0, [pc, #280]	@ (8002b30 <HAL_OSPI_MspInit+0x308>)
 8002a18:	f003 fa7a 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002a34:	230a      	movs	r3, #10
 8002a36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a3a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a3e:	4619      	mov	r1, r3
 8002a40:	483c      	ldr	r0, [pc, #240]	@ (8002b34 <HAL_OSPI_MspInit+0x30c>)
 8002a42:	f003 fa65 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a46:	2304      	movs	r3, #4
 8002a48:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a64:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4833      	ldr	r0, [pc, #204]	@ (8002b38 <HAL_OSPI_MspInit+0x310>)
 8002a6c:	f003 fa50 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a84:	2303      	movs	r3, #3
 8002a86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a90:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002a94:	4619      	mov	r1, r3
 8002a96:	4829      	ldr	r0, [pc, #164]	@ (8002b3c <HAL_OSPI_MspInit+0x314>)
 8002a98:	f003 fa3a 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_8;
 8002a9c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002aa0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002ab6:	230a      	movs	r3, #10
 8002ab8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002abc:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	481e      	ldr	r0, [pc, #120]	@ (8002b3c <HAL_OSPI_MspInit+0x314>)
 8002ac4:	f003 fa24 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ac8:	2304      	movs	r3, #4
 8002aca:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002ae0:	230a      	movs	r3, #10
 8002ae2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002aea:	4619      	mov	r1, r3
 8002aec:	4814      	ldr	r0, [pc, #80]	@ (8002b40 <HAL_OSPI_MspInit+0x318>)
 8002aee:	f003 fa0f 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002af2:	2308      	movs	r3, #8
 8002af4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002b0a:	230a      	movs	r3, #10
 8002b0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b10:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b14:	4619      	mov	r1, r3
 8002b16:	480b      	ldr	r0, [pc, #44]	@ (8002b44 <HAL_OSPI_MspInit+0x31c>)
 8002b18:	f003 f9fa 	bl	8005f10 <HAL_GPIO_Init>

  /* USER CODE END OCTOSPI1_MspInit 1 */

  }

}
 8002b1c:	bf00      	nop
 8002b1e:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	420d1400 	.word	0x420d1400
 8002b2c:	46020c00 	.word	0x46020c00
 8002b30:	42021800 	.word	0x42021800
 8002b34:	42020c00 	.word	0x42020c00
 8002b38:	42021c00 	.word	0x42021c00
 8002b3c:	42021400 	.word	0x42021400
 8002b40:	42020000 	.word	0x42020000
 8002b44:	42020800 	.word	0x42020800

08002b48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0bc      	sub	sp, #240	@ 0xf0
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	22e0      	movs	r2, #224	@ 0xe0
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00c fd88 	bl	800f66e <memset>
  if(hrtc->Instance==RTC)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd8 <HAL_RTC_MspInit+0x90>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d132      	bne.n	8002bce <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b68:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4618      	mov	r0, r3
 8002b82:	f006 fbf7 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002b8c:	f7ff f9ae 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b90:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b96:	4a11      	ldr	r2, [pc, #68]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002b98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002ba2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002ba8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bac:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002bb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bc4:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <HAL_RTC_MspInit+0x94>)
 8002bc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002bce:	bf00      	nop
 8002bd0:	37f0      	adds	r7, #240	@ 0xf0
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	46007800 	.word	0x46007800
 8002bdc:	46020c00 	.word	0x46020c00

08002be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b0c6      	sub	sp, #280	@ 0x118
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002bea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c00:	f107 0320 	add.w	r3, r7, #32
 8002c04:	22e0      	movs	r2, #224	@ 0xe0
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f00c fd30 	bl	800f66e <memset>
  if(hspi->Instance==SPI1)
 8002c0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a88      	ldr	r2, [pc, #544]	@ (8002e3c <HAL_SPI_MspInit+0x25c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d17b      	bne.n	8002d18 <HAL_SPI_MspInit+0x138>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002c20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8002c2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c34:	f107 0320 	add.w	r3, r7, #32
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f006 fb9b 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <HAL_SPI_MspInit+0x68>
    {
      Error_Handler();
 8002c44:	f7ff f952 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c48:	4b7d      	ldr	r3, [pc, #500]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002c58:	4b79      	ldr	r3, [pc, #484]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c66:	4b76      	ldr	r3, [pc, #472]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c6c:	4a74      	ldr	r2, [pc, #464]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c6e:	f043 0302 	orr.w	r3, r3, #2
 8002c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002c76:	4b72      	ldr	r3, [pc, #456]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c7c:	f003 0202 	and.w	r2, r3, #2
 8002c80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c84:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002c8e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002c92:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c94:	4b6a      	ldr	r3, [pc, #424]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c9a:	4a69      	ldr	r2, [pc, #420]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002c9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ca0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002ca4:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002caa:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8002cae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002cbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002cc0:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PG3     ------> SPI1_MISO
    PG2     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002cc2:	2320      	movs	r3, #32
 8002cc4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cda:	2305      	movs	r3, #5
 8002cdc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4857      	ldr	r0, [pc, #348]	@ (8002e44 <HAL_SPI_MspInit+0x264>)
 8002ce8:	f003 f912 	bl	8005f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002cec:	230c      	movs	r3, #12
 8002cee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d04:	2305      	movs	r3, #5
 8002d06:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d0a:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002d0e:	4619      	mov	r1, r3
 8002d10:	484d      	ldr	r0, [pc, #308]	@ (8002e48 <HAL_SPI_MspInit+0x268>)
 8002d12:	f003 f8fd 	bl	8005f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002d16:	e08c      	b.n	8002e32 <HAL_SPI_MspInit+0x252>
  else if(hspi->Instance==SPI2)
 8002d18:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a49      	ldr	r2, [pc, #292]	@ (8002e4c <HAL_SPI_MspInit+0x26c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	f040 8083 	bne.w	8002e32 <HAL_SPI_MspInit+0x252>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002d2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8002d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d40:	f107 0320 	add.w	r3, r7, #32
 8002d44:	4618      	mov	r0, r3
 8002d46:	f006 fb15 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_SPI_MspInit+0x174>
      Error_Handler();
 8002d50:	f7ff f8cc 	bl	8001eec <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d54:	4b3a      	ldr	r3, [pc, #232]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d5a:	4a39      	ldr	r2, [pc, #228]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d60:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002d64:	4b36      	ldr	r3, [pc, #216]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d6a:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002d6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002d80:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d88:	4a2d      	ldr	r2, [pc, #180]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d8a:	f043 0308 	orr.w	r3, r3, #8
 8002d8e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d92:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d98:	f003 0208 	and.w	r2, r3, #8
 8002d9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002da0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002daa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002dae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002db0:	4b23      	ldr	r3, [pc, #140]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db6:	4a22      	ldr	r2, [pc, #136]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <HAL_SPI_MspInit+0x260>)
 8002dc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8002dca:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002dce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002dd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002ddc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dde:	2310      	movs	r3, #16
 8002de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de4:	2302      	movs	r3, #2
 8002de6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002df6:	2305      	movs	r3, #5
 8002df8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dfc:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002e00:	4619      	mov	r1, r3
 8002e02:	4813      	ldr	r0, [pc, #76]	@ (8002e50 <HAL_SPI_MspInit+0x270>)
 8002e04:	f003 f884 	bl	8005f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002e08:	2306      	movs	r3, #6
 8002e0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e20:	2305      	movs	r3, #5
 8002e22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e26:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4809      	ldr	r0, [pc, #36]	@ (8002e54 <HAL_SPI_MspInit+0x274>)
 8002e2e:	f003 f86f 	bl	8005f10 <HAL_GPIO_Init>
}
 8002e32:	bf00      	nop
 8002e34:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40013000 	.word	0x40013000
 8002e40:	46020c00 	.word	0x46020c00
 8002e44:	42020400 	.word	0x42020400
 8002e48:	42021800 	.word	0x42021800
 8002e4c:	40003800 	.word	0x40003800
 8002e50:	42020c00 	.word	0x42020c00
 8002e54:	42022000 	.word	0x42022000

08002e58 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0b      	ldr	r2, [pc, #44]	@ (8002e94 <HAL_TIM_OC_MspInit+0x3c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10e      	bne.n	8002e88 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_TIM_OC_MspInit+0x40>)
 8002e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e70:	4a09      	ldr	r2, [pc, #36]	@ (8002e98 <HAL_TIM_OC_MspInit+0x40>)
 8002e72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e76:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002e7a:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <HAL_TIM_OC_MspInit+0x40>)
 8002e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40012c00 	.word	0x40012c00
 8002e98:	46020c00 	.word	0x46020c00

08002e9c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	@ 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <HAL_TIM_IC_MspInit+0x88>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12d      	bne.n	8002f1a <HAL_TIM_IC_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ec4:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002ec6:	f043 0302 	orr.w	r3, r3, #2
 8002eca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002ece:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ee2:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002eec:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_TIM_IC_MspInit+0x8c>)
 8002eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PE4     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002efa:	2310      	movs	r3, #16
 8002efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	4619      	mov	r1, r3
 8002f14:	4805      	ldr	r0, [pc, #20]	@ (8002f2c <HAL_TIM_IC_MspInit+0x90>)
 8002f16:	f002 fffb 	bl	8005f10 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3728      	adds	r7, #40	@ 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40000400 	.word	0x40000400
 8002f28:	46020c00 	.word	0x46020c00
 8002f2c:	42021000 	.word	0x42021000

08002f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a16      	ldr	r2, [pc, #88]	@ (8002f98 <HAL_TIM_Base_MspInit+0x68>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d10f      	bne.n	8002f62 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f42:	4b16      	ldr	r3, [pc, #88]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f48:	4a14      	ldr	r2, [pc, #80]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f4a:	f043 0310 	orr.w	r3, r3, #16
 8002f4e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002f60:	e013      	b.n	8002f8a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM15)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa0 <HAL_TIM_Base_MspInit+0x70>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10e      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f72:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f78:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002f7c:	4b07      	ldr	r3, [pc, #28]	@ (8002f9c <HAL_TIM_Base_MspInit+0x6c>)
 8002f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40001000 	.word	0x40001000
 8002f9c:	46020c00 	.word	0x46020c00
 8002fa0:	40014000 	.word	0x40014000

08002fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	@ 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	@ (800305c <HAL_TIM_MspPostInit+0xb8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d120      	bne.n	8003008 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	4b26      	ldr	r3, [pc, #152]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8002fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002fd6:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8002fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	4818      	ldr	r0, [pc, #96]	@ (8003064 <HAL_TIM_MspPostInit+0xc0>)
 8003002:	f002 ff85 	bl	8005f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003006:	e024      	b.n	8003052 <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM15)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a16      	ldr	r2, [pc, #88]	@ (8003068 <HAL_TIM_MspPostInit+0xc4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d11f      	bne.n	8003052 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003012:	4b13      	ldr	r3, [pc, #76]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8003014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003018:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 800301a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003022:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_TIM_MspPostInit+0xbc>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003042:	230e      	movs	r3, #14
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4807      	ldr	r0, [pc, #28]	@ (800306c <HAL_TIM_MspPostInit+0xc8>)
 800304e:	f002 ff5f 	bl	8005f10 <HAL_GPIO_Init>
}
 8003052:	bf00      	nop
 8003054:	3728      	adds	r7, #40	@ 0x28
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	46020c00 	.word	0x46020c00
 8003064:	42020000 	.word	0x42020000
 8003068:	40014000 	.word	0x40014000
 800306c:	42021800 	.word	0x42021800

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b0ca      	sub	sp, #296	@ 0x128
 8003074:	af00      	add	r7, sp, #0
 8003076:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800307a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800307e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003090:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003094:	22e0      	movs	r2, #224	@ 0xe0
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f00c fae8 	bl	800f66e <memset>
  if(huart->Instance==USART1)
 800309e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80030a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4ad3      	ldr	r2, [pc, #844]	@ (80033f8 <HAL_UART_MspInit+0x388>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d14e      	bne.n	800314e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030b0:	f04f 0201 	mov.w	r2, #1
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80030c6:	4618      	mov	r0, r3
 80030c8:	f006 f954 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80030d2:	f7fe ff0b 	bl	8001eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d6:	4bc9      	ldr	r3, [pc, #804]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80030d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030dc:	4ac7      	ldr	r2, [pc, #796]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80030de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80030e6:	4bc5      	ldr	r3, [pc, #788]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80030e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f4:	4bc1      	ldr	r3, [pc, #772]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80030f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030fa:	4ac0      	ldr	r2, [pc, #768]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80030fc:	f043 0302 	orr.w	r3, r3, #2
 8003100:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003104:	4bbd      	ldr	r3, [pc, #756]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800310a:	f003 0202 	and.w	r2, r3, #2
 800310e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003112:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800311c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003120:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003122:	23c0      	movs	r3, #192	@ 0xc0
 8003124:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800313a:	2307      	movs	r3, #7
 800313c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003140:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003144:	4619      	mov	r1, r3
 8003146:	48ae      	ldr	r0, [pc, #696]	@ (8003400 <HAL_UART_MspInit+0x390>)
 8003148:	f002 fee2 	bl	8005f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800314c:	e14e      	b.n	80033ec <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART2)
 800314e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003152:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4aaa      	ldr	r2, [pc, #680]	@ (8003404 <HAL_UART_MspInit+0x394>)
 800315c:	4293      	cmp	r3, r2
 800315e:	f040 8084 	bne.w	800326a <HAL_UART_MspInit+0x1fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003162:	f04f 0202 	mov.w	r2, #2
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800316e:	2300      	movs	r3, #0
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003174:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003178:	4618      	mov	r0, r3
 800317a:	f006 f8fb 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8003184:	f7fe feb2 	bl	8001eec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003188:	4b9c      	ldr	r3, [pc, #624]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 800318a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800318e:	4a9b      	ldr	r2, [pc, #620]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003194:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003198:	4b98      	ldr	r3, [pc, #608]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 800319a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800319e:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80031a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80031a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80031b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80031b4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b91      	ldr	r3, [pc, #580]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031bc:	4a8f      	ldr	r2, [pc, #572]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031c6:	4b8d      	ldr	r3, [pc, #564]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80031d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80031de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80031e2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031e4:	4b85      	ldr	r3, [pc, #532]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031ea:	4a84      	ldr	r2, [pc, #528]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031ec:	f043 0308 	orr.w	r3, r3, #8
 80031f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031f4:	4b81      	ldr	r3, [pc, #516]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80031f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031fa:	f003 0208 	and.w	r2, r3, #8
 80031fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003202:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800320c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003210:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003216:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800322c:	2303      	movs	r3, #3
 800322e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003236:	4619      	mov	r1, r3
 8003238:	4873      	ldr	r0, [pc, #460]	@ (8003408 <HAL_UART_MspInit+0x398>)
 800323a:	f002 fe69 	bl	8005f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800323e:	2320      	movs	r3, #32
 8003240:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003256:	2307      	movs	r3, #7
 8003258:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003260:	4619      	mov	r1, r3
 8003262:	486a      	ldr	r0, [pc, #424]	@ (800340c <HAL_UART_MspInit+0x39c>)
 8003264:	f002 fe54 	bl	8005f10 <HAL_GPIO_Init>
}
 8003268:	e0c0      	b.n	80033ec <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800326a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800326e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a66      	ldr	r2, [pc, #408]	@ (8003410 <HAL_UART_MspInit+0x3a0>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d157      	bne.n	800332c <HAL_UART_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800327c:	f04f 0204 	mov.w	r2, #4
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003288:	2300      	movs	r3, #0
 800328a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800328e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003292:	4618      	mov	r0, r3
 8003294:	f006 f86e 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_MspInit+0x232>
      Error_Handler();
 800329e:	f7fe fe25 	bl	8001eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032a2:	4b56      	ldr	r3, [pc, #344]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032a8:	4a54      	ldr	r2, [pc, #336]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032ae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80032b2:	4b52      	ldr	r3, [pc, #328]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032b8:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80032bc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80032c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80032ca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032ce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d0:	4b4a      	ldr	r3, [pc, #296]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032d6:	4a49      	ldr	r2, [pc, #292]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80032e0:	4b46      	ldr	r3, [pc, #280]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e6:	f003 0204 	and.w	r2, r3, #4
 80032ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80032ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80032f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80032fc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032fe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003302:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	2302      	movs	r3, #2
 8003308:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003318:	2307      	movs	r3, #7
 800331a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800331e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8003322:	4619      	mov	r1, r3
 8003324:	483b      	ldr	r0, [pc, #236]	@ (8003414 <HAL_UART_MspInit+0x3a4>)
 8003326:	f002 fdf3 	bl	8005f10 <HAL_GPIO_Init>
}
 800332a:	e05f      	b.n	80033ec <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART6)
 800332c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003330:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a37      	ldr	r2, [pc, #220]	@ (8003418 <HAL_UART_MspInit+0x3a8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d156      	bne.n	80033ec <HAL_UART_MspInit+0x37c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800333e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800334a:	2300      	movs	r3, #0
 800334c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003350:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003354:	4618      	mov	r0, r3
 8003356:	f006 f80d 	bl	8009374 <HAL_RCCEx_PeriphCLKConfig>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8003360:	f7fe fdc4 	bl	8001eec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003364:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 8003366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800336a:	4a24      	ldr	r2, [pc, #144]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 800336c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003370:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003374:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 8003376:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800337a:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800337e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8003382:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800338c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003390:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003392:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003398:	4a18      	ldr	r2, [pc, #96]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <HAL_UART_MspInit+0x38c>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033a8:	f003 0204 	and.w	r2, r3, #4
 80033ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80033ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80033be:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033c0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033c4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80033da:	2307      	movs	r3, #7
 80033dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80033e4:	4619      	mov	r1, r3
 80033e6:	480b      	ldr	r0, [pc, #44]	@ (8003414 <HAL_UART_MspInit+0x3a4>)
 80033e8:	f002 fd92 	bl	8005f10 <HAL_GPIO_Init>
}
 80033ec:	bf00      	nop
 80033ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40013800 	.word	0x40013800
 80033fc:	46020c00 	.word	0x46020c00
 8003400:	42020400 	.word	0x42020400
 8003404:	40004400 	.word	0x40004400
 8003408:	42020000 	.word	0x42020000
 800340c:	42020c00 	.word	0x42020c00
 8003410:	40004800 	.word	0x40004800
 8003414:	42020800 	.word	0x42020800
 8003418:	40006400 	.word	0x40006400

0800341c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	@ 0x38
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800342c:	4b2e      	ldr	r3, [pc, #184]	@ (80034e8 <HAL_InitTick+0xcc>)
 800342e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003432:	4a2d      	ldr	r2, [pc, #180]	@ (80034e8 <HAL_InitTick+0xcc>)
 8003434:	f043 0301 	orr.w	r3, r3, #1
 8003438:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800343c:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <HAL_InitTick+0xcc>)
 800343e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800344a:	f107 0210 	add.w	r2, r7, #16
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f005 fecf 	bl	80091f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800345a:	f005 fe91 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800345e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_InitTick+0xd0>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	3b01      	subs	r3, #1
 800346c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800346e:	4b20      	ldr	r3, [pc, #128]	@ (80034f0 <HAL_InitTick+0xd4>)
 8003470:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8003476:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <HAL_InitTick+0xd4>)
 8003478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800347c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800347e:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <HAL_InitTick+0xd4>)
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8003484:	4b1a      	ldr	r3, [pc, #104]	@ (80034f0 <HAL_InitTick+0xd4>)
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348a:	4b19      	ldr	r3, [pc, #100]	@ (80034f0 <HAL_InitTick+0xd4>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8003490:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <HAL_InitTick+0xd4>)
 8003492:	f009 fb95 	bl	800cbc0 <HAL_TIM_Base_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800349c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d118      	bne.n	80034d6 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80034a4:	4812      	ldr	r0, [pc, #72]	@ (80034f0 <HAL_InitTick+0xd4>)
 80034a6:	f009 fbe3 	bl	800cc70 <HAL_TIM_Base_Start_IT>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 80034b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10e      	bne.n	80034d6 <HAL_InitTick+0xba>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b0f      	cmp	r3, #15
 80034bc:	d808      	bhi.n	80034d0 <HAL_InitTick+0xb4>
      {
        /* Enable the TIM2 global Interrupt */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80034be:	2200      	movs	r2, #0
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	202d      	movs	r0, #45	@ 0x2d
 80034c4:	f001 fe02 	bl	80050cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034c8:	4a0a      	ldr	r2, [pc, #40]	@ (80034f4 <HAL_InitTick+0xd8>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e002      	b.n	80034d6 <HAL_InitTick+0xba>
      }
      else
      {
        status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034d6:	202d      	movs	r0, #45	@ 0x2d
 80034d8:	f001 fe12 	bl	8005100 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80034dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3738      	adds	r7, #56	@ 0x38
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	46020c00 	.word	0x46020c00
 80034ec:	431bde83 	.word	0x431bde83
 80034f0:	2017791c 	.word	0x2017791c
 80034f4:	2017700c 	.word	0x2017700c

080034f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <NMI_Handler+0x4>

08003500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <HardFault_Handler+0x4>

08003508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <MemManage_Handler+0x4>

08003510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	bf00      	nop
 800351e:	e7fd      	b.n	800351c <UsageFault_Handler+0x4>

08003520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <EXTI6_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32u5xx.s).                    */
/******************************************************************************/

void EXTI6_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI6_IRQn 0 */

  /* USER CODE END EXTI6_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800355c:	2040      	movs	r0, #64	@ 0x40
 800355e:	f002 fec7 	bl	80062f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI6_IRQn 1 */

  /* USER CODE END EXTI6_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <TIM2_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800356c:	4802      	ldr	r0, [pc, #8]	@ (8003578 <TIM2_IRQHandler+0x10>)
 800356e:	f009 fd2e 	bl	800cfce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2017791c 	.word	0x2017791c

0800357c <GPU2D_IRQHandler>:

/**
  * @brief This function handles GPU2D global interrupt.
  */
void GPU2D_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_IRQn 0 */

  /* USER CODE END GPU2D_IRQn 0 */
  HAL_GPU2D_IRQHandler(&hgpu2d);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <GPU2D_IRQHandler+0x10>)
 8003582:	f002 ff10 	bl	80063a6 <HAL_GPU2D_IRQHandler>
  /* USER CODE BEGIN GPU2D_IRQn 1 */

  /* USER CODE END GPU2D_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20177238 	.word	0x20177238

08003590 <GPU2D_ER_IRQHandler>:

/**
  * @brief This function handles GPU2D Error interrupt.
  */
void GPU2D_ER_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPU2D_ER_IRQn 0 */

  /* USER CODE END GPU2D_ER_IRQn 0 */
  HAL_GPU2D_ER_IRQHandler(&hgpu2d);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <GPU2D_ER_IRQHandler+0x10>)
 8003596:	f002 ff2c 	bl	80063f2 <HAL_GPU2D_ER_IRQHandler>
  /* USER CODE BEGIN GPU2D_ER_IRQn 1 */

  /* USER CODE END GPU2D_ER_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20177238 	.word	0x20177238

080035a4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035a8:	4b18      	ldr	r3, [pc, #96]	@ (800360c <SystemInit+0x68>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	4a17      	ldr	r2, [pc, #92]	@ (800360c <SystemInit+0x68>)
 80035b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80035b8:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <SystemInit+0x6c>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80035be:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <SystemInit+0x6c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80035c4:	4b12      	ldr	r3, [pc, #72]	@ (8003610 <SystemInit+0x6c>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <SystemInit+0x6c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80035d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <SystemInit+0x6c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003610 <SystemInit+0x6c>)
 80035d6:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80035da:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80035de:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80035e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003610 <SystemInit+0x6c>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <SystemInit+0x6c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a09      	ldr	r2, [pc, #36]	@ (8003610 <SystemInit+0x6c>)
 80035ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80035f2:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <SystemInit+0x6c>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <SystemInit+0x68>)
 80035fa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80035fe:	609a      	str	r2, [r3, #8]
  #endif
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00
 8003610:	46020c00 	.word	0x46020c00

08003614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800364c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003618:	f7ff ffc4 	bl	80035a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800361c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800361e:	e003      	b.n	8003628 <LoopCopyDataInit>

08003620 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003620:	4b0b      	ldr	r3, [pc, #44]	@ (8003650 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003622:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003624:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003626:	3104      	adds	r1, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003628:	480a      	ldr	r0, [pc, #40]	@ (8003654 <LoopForever+0xa>)
	ldr	r3, =_edata
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <LoopForever+0xe>)
	adds	r2, r0, r1
 800362c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800362e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003630:	d3f6      	bcc.n	8003620 <CopyDataInit>
	ldr	r2, =_sbss
 8003632:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003634:	e002      	b.n	800363c <LoopFillZerobss>

08003636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003636:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003638:	f842 3b04 	str.w	r3, [r2], #4

0800363c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <LoopForever+0x16>)
	cmp	r2, r3
 800363e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003640:	d3f9      	bcc.n	8003636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003642:	f00c f81d 	bl	800f680 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003646:	f7fe fc57 	bl	8001ef8 <main>

0800364a <LoopForever>:

LoopForever:
    b LoopForever
 800364a:	e7fe      	b.n	800364a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800364c:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8003650:	0800f7f0 	.word	0x0800f7f0
	ldr	r0, =_sdata
 8003654:	20177000 	.word	0x20177000
	ldr	r3, =_edata
 8003658:	20177030 	.word	0x20177030
	ldr	r2, =_sbss
 800365c:	20177030 	.word	0x20177030
	ldr	r3, = _ebss
 8003660:	2017796c 	.word	0x2017796c

08003664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC1_2_IRQHandler>
	...

08003668 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_Init+0x50>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a11      	ldr	r2, [pc, #68]	@ (80036b8 <HAL_Init+0x50>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003678:	2003      	movs	r0, #3
 800367a:	f001 fd1c 	bl	80050b6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800367e:	f005 fc63 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_Init+0x54>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	490c      	ldr	r1, [pc, #48]	@ (80036c0 <HAL_Init+0x58>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	fa22 f303 	lsr.w	r3, r2, r3
 8003694:	4a0b      	ldr	r2, [pc, #44]	@ (80036c4 <HAL_Init+0x5c>)
 8003696:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003698:	2004      	movs	r0, #4
 800369a:	f001 fd3f 	bl	800511c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800369e:	200f      	movs	r0, #15
 80036a0:	f7ff febc 	bl	800341c <HAL_InitTick>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e002      	b.n	80036b4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80036ae:	f7fe fcaf 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40022000 	.word	0x40022000
 80036bc:	46020c00 	.word	0x46020c00
 80036c0:	0800f6e0 	.word	0x0800f6e0
 80036c4:	20177008 	.word	0x20177008

080036c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <HAL_IncTick+0x20>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <HAL_IncTick+0x24>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a04      	ldr	r2, [pc, #16]	@ (80036ec <HAL_IncTick+0x24>)
 80036da:	6013      	str	r3, [r2, #0]
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20177010 	.word	0x20177010
 80036ec:	20177968 	.word	0x20177968

080036f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return uwTick;
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_GetTick+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20177968 	.word	0x20177968

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff ffee 	bl	80036f0 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffde 	bl	80036f0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20177010 	.word	0x20177010

08003750 <HAL_SYSCFG_DisableSRAMCached>:
  * @brief  Disable the Cacheability of internal SRAMx by DCACHE2
  *
  * @retval None
  */
void HAL_SYSCFG_DisableSRAMCached(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_SRAMCACHED);
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a04      	ldr	r2, [pc, #16]	@ (800376c <HAL_SYSCFG_DisableSRAMCached+0x1c>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800375e:	6053      	str	r3, [r2, #4]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	46000400 	.word	0x46000400

08003770 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003814 <LL_ADC_SetResolution+0x3c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d104      	bne.n	80037f8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 020c 	bic.w	r2, r3, #12
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	46021000 	.word	0x46021000

08003818 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	3360      	adds	r3, #96	@ 0x60
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	430b      	orrs	r3, r1
 8003848:	431a      	orrs	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	3360      	adds	r3, #96	@ 0x60
 8003868:	461a      	mov	r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Note: Value shift +1 for correspondence with channel definition using ADC_CHANNEL_ID_NUMBER_MASK */
  uint32_t ch_decimal = (READ_BIT(*preg, ADC_OFR1_OFFSET1_CH) >> (ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS + 1UL));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	0edb      	lsrs	r3, r3, #27
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	60bb      	str	r3, [r7, #8]
  return (uint32_t)__LL_ADC_DECIMAL_NB_TO_CHANNEL(ch_decimal);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b09      	cmp	r3, #9
 8003882:	d807      	bhi.n	8003894 <LL_ADC_GetOffsetChannel+0x3a>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	069a      	lsls	r2, r3, #26
 8003888:	2101      	movs	r1, #1
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	4313      	orrs	r3, r2
 8003892:	e008      	b.n	80038a6 <LL_ADC_GetOffsetChannel+0x4c>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	069a      	lsls	r2, r3, #26
 8003898:	2101      	movs	r1, #1
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3360      	adds	r3, #96	@ 0x60
 80038c2:	461a      	mov	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	601a      	str	r2, [r3, #0]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	3360      	adds	r3, #96	@ 0x60
 80038f8:	461a      	mov	r2, r3
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	431a      	orrs	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	601a      	str	r2, [r3, #0]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800391e:	b480      	push	{r7}
 8003920:	b087      	sub	sp, #28
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3360      	adds	r3, #96	@ 0x60
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003966:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003976:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	2a00      	cmp	r2, #0
 800397e:	d002      	beq.n	8003986 <LL_ADC_SetGainCompensation+0x32>
 8003980:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003984:	e000      	b.n	8003988 <LL_ADC_SetGainCompensation+0x34>
 8003986:	2200      	movs	r2, #0
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2107      	movs	r1, #7
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	43db      	mvns	r3, r3
 80039b8:	401a      	ands	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	431a      	orrs	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	@ 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003a94 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d020      	beq.n	8003a2e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	3330      	adds	r3, #48	@ 0x30
 80039f0:	461a      	mov	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	4413      	add	r3, r2
 80039fe:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	211f      	movs	r1, #31
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	f003 011f 	and.w	r1, r3, #31
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	431a      	orrs	r2, r3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 8003a2c:	e02b      	b.n	8003a86 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 031f 	and.w	r3, r3, #31
 8003a38:	210f      	movs	r1, #15
 8003a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0e9b      	lsrs	r3, r3, #26
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	e010      	b.n	8003a78 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	fa93 f3a3 	rbit	r3, r3
 8003a60:	613b      	str	r3, [r7, #16]
  return result;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	e003      	b.n	8003a78 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	fab3 f383 	clz	r3, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	f001 011f 	and.w	r1, r1, #31
 8003a7e:	408b      	lsls	r3, r1
 8003a80:	431a      	orrs	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a86:	bf00      	nop
 8003a88:	3724      	adds	r7, #36	@ 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	46021000 	.word	0x46021000

08003a98 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <LL_ADC_REG_SetSequencerChAdd+0x24>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	0e9b      	lsrs	r3, r3, #26
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	e015      	b.n	8003ae8 <LL_ADC_REG_SetSequencerChAdd+0x50>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	60fb      	str	r3, [r7, #12]
  return result;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	e003      	b.n	8003ade <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	0e9b      	lsrs	r3, r3, #26
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2101      	movs	r1, #1
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	401a      	ands	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b08b      	sub	sp, #44	@ 0x2c
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d042      	beq.n	8003bca <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <LL_ADC_SetChannelSamplingTime+0x28>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	f003 021f 	and.w	r2, r3, #31
 8003b56:	e011      	b.n	8003b7c <LL_ADC_SetChannelSamplingTime+0x4c>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa93 f3a3 	rbit	r3, r3
 8003b62:	617b      	str	r3, [r7, #20]
  return result;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8003b6e:	2320      	movs	r3, #32
 8003b70:	e003      	b.n	8003b7a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0e5b      	lsrs	r3, r3, #25
 8003b80:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8003b84:	460b      	mov	r3, r1
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	1ad2      	subs	r2, r2, r3
 8003b8e:	4613      	mov	r3, r2
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	4413      	add	r3, r2
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3314      	adds	r3, #20
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	0e5b      	lsrs	r3, r3, #25
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	2107      	movs	r1, #7
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	401a      	ands	r2, r3
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8003bc8:	e00e      	b.n	8003be8 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	0219      	lsls	r1, r3, #8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	400b      	ands	r3, r1
 8003bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	615a      	str	r2, [r3, #20]
}
 8003be8:	bf00      	nop
 8003bea:	372c      	adds	r7, #44	@ 0x2c
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	46021000 	.word	0x46021000

08003bf8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c10:	43db      	mvns	r3, r3
 8003c12:	401a      	ands	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f003 0318 	and.w	r3, r3, #24
 8003c1a:	4908      	ldr	r1, [pc, #32]	@ (8003c3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003c1c:	40d9      	lsrs	r1, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	400b      	ands	r3, r1
 8003c22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c26:	431a      	orrs	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003c2e:	bf00      	nop
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	000fffff 	.word	0x000fffff

08003c40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6093      	str	r3, [r2, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c78:	d101      	bne.n	8003c7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003c9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ca0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cc8:	d101      	bne.n	8003cce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <LL_ADC_IsEnabled+0x18>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_ADC_IsEnabled+0x1a>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d101      	bne.n	8003d1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d101      	bne.n	8003d40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b08b      	sub	sp, #44	@ 0x2c
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e2ce      	b.n	800430e <HAL_ADC_Init+0x5be>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a95      	ldr	r2, [pc, #596]	@ (8003fd4 <HAL_ADC_Init+0x284>)
 8003d7e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d109      	bne.n	8003d9c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7fe f95f 	bl	800204c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ff5f 	bl	8003c64 <LL_ADC_IsDeepPowerDownEnabled>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ff45 	bl	8003c40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff7a 	bl	8003cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff ff5e 	bl	8003c8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd0:	4b81      	ldr	r3, [pc, #516]	@ (8003fd8 <HAL_ADC_Init+0x288>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	099b      	lsrs	r3, r3, #6
 8003dd6:	4a81      	ldr	r2, [pc, #516]	@ (8003fdc <HAL_ADC_Init+0x28c>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003de4:	e002      	b.n	8003dec <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff5c 	bl	8003cb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e06:	f043 0210 	orr.w	r2, r3, #16
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff6c 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8003e2a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f040 825f 	bne.w	80042f8 <HAL_ADC_Init+0x5a8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 825b 	bne.w	80042f8 <HAL_ADC_Init+0x5a8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff40 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d14f      	bne.n	8003f02 <HAL_ADC_Init+0x1b2>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5b      	ldr	r2, [pc, #364]	@ (8003fd4 <HAL_ADC_Init+0x284>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d037      	beq.n	8003edc <HAL_ADC_Init+0x18c>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5b      	ldr	r2, [pc, #364]	@ (8003fe0 <HAL_ADC_Init+0x290>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d004      	beq.n	8003e80 <HAL_ADC_Init+0x130>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe4 <HAL_ADC_Init+0x294>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10e      	bne.n	8003e9e <HAL_ADC_Init+0x14e>
 8003e80:	4857      	ldr	r0, [pc, #348]	@ (8003fe0 <HAL_ADC_Init+0x290>)
 8003e82:	f7ff ff2b 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e86:	4604      	mov	r4, r0
 8003e88:	4856      	ldr	r0, [pc, #344]	@ (8003fe4 <HAL_ADC_Init+0x294>)
 8003e8a:	f7ff ff27 	bl	8003cdc <LL_ADC_IsEnabled>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4323      	orrs	r3, r4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	e008      	b.n	8003eb0 <HAL_ADC_Init+0x160>
 8003e9e:	484d      	ldr	r0, [pc, #308]	@ (8003fd4 <HAL_ADC_Init+0x284>)
 8003ea0:	f7ff ff1c 	bl	8003cdc <LL_ADC_IsEnabled>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d026      	beq.n	8003f02 <HAL_ADC_Init+0x1b2>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a49      	ldr	r2, [pc, #292]	@ (8003fe0 <HAL_ADC_Init+0x290>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_Init+0x178>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a48      	ldr	r2, [pc, #288]	@ (8003fe4 <HAL_ADC_Init+0x294>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_Init+0x17c>
 8003ec8:	4a47      	ldr	r2, [pc, #284]	@ (8003fe8 <HAL_ADC_Init+0x298>)
 8003eca:	e000      	b.n	8003ece <HAL_ADC_Init+0x17e>
 8003ecc:	4a47      	ldr	r2, [pc, #284]	@ (8003fec <HAL_ADC_Init+0x29c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7ff fc4b 	bl	8003770 <LL_ADC_SetCommonClock>
 8003eda:	e012      	b.n	8003f02 <HAL_ADC_Init+0x1b2>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7ff fc76 	bl	80037d8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8003eec:	4b3f      	ldr	r3, [pc, #252]	@ (8003fec <HAL_ADC_Init+0x29c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003efc:	493b      	ldr	r1, [pc, #236]	@ (8003fec <HAL_ADC_Init+0x29c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a33      	ldr	r2, [pc, #204]	@ (8003fd4 <HAL_ADC_Init+0x284>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d010      	beq.n	8003f2e <HAL_ADC_Init+0x1de>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f12:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003f18:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8003f1e:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003f26:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	623b      	str	r3, [r7, #32]
 8003f2c:	e035      	b.n	8003f9a <HAL_ADC_Init+0x24a>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7f1b      	ldrb	r3, [r3, #28]
 8003f32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f3a:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f3c:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_ADC_Init+0x1fc>
 8003f46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f4a:	e000      	b.n	8003f4e <HAL_ADC_Init+0x1fe>
 8003f4c:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003f4e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8003f54:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da04      	bge.n	8003f68 <HAL_ADC_Init+0x218>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f66:	e001      	b.n	8003f6c <HAL_ADC_Init+0x21c>
 8003f68:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8003f6c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	491b      	ldr	r1, [pc, #108]	@ (8003fe0 <HAL_ADC_Init+0x290>)
 8003f74:	428b      	cmp	r3, r1
 8003f76:	d004      	beq.n	8003f82 <HAL_ADC_Init+0x232>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4919      	ldr	r1, [pc, #100]	@ (8003fe4 <HAL_ADC_Init+0x294>)
 8003f7e:	428b      	cmp	r3, r1
 8003f80:	d103      	bne.n	8003f8a <HAL_ADC_Init+0x23a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f88:	e003      	b.n	8003f92 <HAL_ADC_Init+0x242>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f90:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8003f92:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d131      	bne.n	8004008 <HAL_ADC_Init+0x2b8>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd4 <HAL_ADC_Init+0x284>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d007      	beq.n	8003fbe <HAL_ADC_Init+0x26e>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	045b      	lsls	r3, r3, #17
 8003fb6:	6a3a      	ldr	r2, [r7, #32]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	e024      	b.n	8004008 <HAL_ADC_Init+0x2b8>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d113      	bne.n	8003ff0 <HAL_ADC_Init+0x2a0>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fce:	623b      	str	r3, [r7, #32]
 8003fd0:	e01a      	b.n	8004008 <HAL_ADC_Init+0x2b8>
 8003fd2:	bf00      	nop
 8003fd4:	46021000 	.word	0x46021000
 8003fd8:	20177008 	.word	0x20177008
 8003fdc:	053e2d63 	.word	0x053e2d63
 8003fe0:	42028000 	.word	0x42028000
 8003fe4:	42028100 	.word	0x42028100
 8003fe8:	42028300 	.word	0x42028300
 8003fec:	46021300 	.word	0x46021300
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a75      	ldr	r2, [pc, #468]	@ (80041e4 <HAL_ADC_Init+0x494>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d018      	beq.n	8004044 <HAL_ADC_Init+0x2f4>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_ADC_Init+0x2de>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	4313      	orrs	r3, r2
 8004028:	6a3a      	ldr	r2, [r7, #32]
 800402a:	4313      	orrs	r3, r2
 800402c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	4b6c      	ldr	r3, [pc, #432]	@ (80041e8 <HAL_ADC_Init+0x498>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	430b      	orrs	r3, r1
 8004040:	60d3      	str	r3, [r2, #12]
 8004042:	e031      	b.n	80040a8 <HAL_ADC_Init+0x358>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_ADC_Init+0x310>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004050:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	4313      	orrs	r3, r2
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	4313      	orrs	r3, r2
 800405e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	4b61      	ldr	r3, [pc, #388]	@ (80041ec <HAL_ADC_Init+0x49c>)
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6812      	ldr	r2, [r2, #0]
 800406e:	6a39      	ldr	r1, [r7, #32]
 8004070:	430b      	orrs	r3, r1
 8004072:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_ADC_Init+0x33e>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_ADC_Init+0x358>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a4d      	ldr	r2, [pc, #308]	@ (80041e4 <HAL_ADC_Init+0x494>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f000 80a4 	beq.w	80041fc <HAL_ADC_Init+0x4ac>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fe22 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 80040be:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fe2f 	bl	8003d28 <LL_ADC_INJ_IsConversionOngoing>
 80040ca:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d166      	bne.n	80041a0 <HAL_ADC_Init+0x450>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d163      	bne.n	80041a0 <HAL_ADC_Init+0x450>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7f1b      	ldrb	r3, [r3, #28]
 80040dc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4943      	ldr	r1, [pc, #268]	@ (80041f0 <HAL_ADC_Init+0x4a0>)
 80040e4:	428b      	cmp	r3, r1
 80040e6:	d004      	beq.n	80040f2 <HAL_ADC_Init+0x3a2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4941      	ldr	r1, [pc, #260]	@ (80041f4 <HAL_ADC_Init+0x4a4>)
 80040ee:	428b      	cmp	r3, r1
 80040f0:	d102      	bne.n	80040f8 <HAL_ADC_Init+0x3a8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f6:	e002      	b.n	80040fe <HAL_ADC_Init+0x3ae>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040fc:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040fe:	4313      	orrs	r3, r2
 8004100:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800410c:	f023 0303 	bic.w	r3, r3, #3
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	430b      	orrs	r3, r1
 8004118:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_ADC_Init+0x3e2>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4619      	mov	r1, r3
 800412c:	4610      	mov	r0, r2
 800412e:	f7ff fc11 	bl	8003954 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004138:	2b01      	cmp	r3, #1
 800413a:	d11e      	bne.n	800417a <HAL_ADC_Init+0x42a>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004140:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	4b2b      	ldr	r3, [pc, #172]	@ (80041f8 <HAL_ADC_Init+0x4a8>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004150:	0411      	lsls	r1, r2, #16
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004168:	0892      	lsrs	r2, r2, #2
 800416a:	430a      	orrs	r2, r1
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	611a      	str	r2, [r3, #16]
 8004178:	e007      	b.n	800418a <HAL_ADC_Init+0x43a>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d10c      	bne.n	80041c2 <HAL_ADC_Init+0x472>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f023 010f 	bic.w	r1, r3, #15
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b6:	1e5a      	subs	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30
 80041c0:	e007      	b.n	80041d2 <HAL_ADC_Init+0x482>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 020f 	bic.w	r2, r2, #15
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80041e2:	e092      	b.n	800430a <HAL_ADC_Init+0x5ba>
 80041e4:	46021000 	.word	0x46021000
 80041e8:	fff0c013 	.word	0xfff0c013
 80041ec:	ffde800d 	.word	0xffde800d
 80041f0:	42028000 	.word	0x42028000
 80041f4:	42028100 	.word	0x42028100
 80041f8:	fc00f81e 	.word	0xfc00f81e

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004202:	2b01      	cmp	r3, #1
 8004204:	d111      	bne.n	800422a <HAL_ADC_Init+0x4da>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800420e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8004214:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 800421a:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	4313      	orrs	r3, r2
 8004220:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	4b39      	ldr	r3, [pc, #228]	@ (8004318 <HAL_ADC_Init+0x5c8>)
 8004232:	4013      	ands	r3, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	69f9      	ldr	r1, [r7, #28]
 800423a:	430b      	orrs	r3, r1
 800423c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004246:	461a      	mov	r2, r3
 8004248:	2100      	movs	r1, #0
 800424a:	f7ff fba6 	bl	800399a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	461a      	mov	r2, r3
 8004258:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800425c:	f7ff fb9d 	bl	800399a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d108      	bne.n	800427a <HAL_ADC_Init+0x52a>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f062 020f 	orn	r2, r2, #15
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28
 8004278:	e018      	b.n	80042ac <HAL_ADC_Init+0x55c>

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004282:	d113      	bne.n	80042ac <HAL_ADC_Init+0x55c>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	f003 031c 	and.w	r3, r3, #28
 8004296:	f06f 020f 	mvn.w	r2, #15
 800429a:	fa02 f103 	lsl.w	r1, r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_ADC_Init+0x5cc>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	6a3a      	ldr	r2, [r7, #32]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d10b      	bne.n	80042d4 <HAL_ADC_Init+0x584>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	f043 0201 	orr.w	r2, r3, #1
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80042d2:	e01a      	b.n	800430a <HAL_ADC_Init+0x5ba>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042d8:	f023 0312 	bic.w	r3, r3, #18
 80042dc:	f043 0210 	orr.w	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80042f6:	e008      	b.n	800430a <HAL_ADC_Init+0x5ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042fc:	f043 0210 	orr.w	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 800430a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800430e:	4618      	mov	r0, r3
 8004310:	372c      	adds	r7, #44	@ 0x2c
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	bf00      	nop
 8004318:	f7fffc02 	.word	0xf7fffc02
 800431c:	833ffff3 	.word	0x833ffff3

08004320 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b0b7      	sub	sp, #220	@ 0xdc
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4aa8      	ldr	r2, [pc, #672]	@ (80045dc <HAL_ADC_ConfigChannel+0x2bc>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d103      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <HAL_ADC_ConfigChannel+0x36>
 8004350:	2302      	movs	r3, #2
 8004352:	f000 bdfe 	b.w	8004f52 <HAL_ADC_ConfigChannel+0xc32>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fccd 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 85c1 	bne.w	8004ef2 <HAL_ADC_ConfigChannel+0xbd2>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a99      	ldr	r2, [pc, #612]	@ (80045dc <HAL_ADC_ConfigChannel+0x2bc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f000 8409 	beq.w	8004b8e <HAL_ADC_ConfigChannel+0x86e>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <HAL_ADC_ConfigChannel+0x7a>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	f003 031f 	and.w	r3, r3, #31
 8004392:	2201      	movs	r2, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	e01d      	b.n	80043d6 <HAL_ADC_ConfigChannel+0xb6>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043a6:	fa93 f3a3 	rbit	r3, r3
 80043aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80043ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80043b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 80043be:	2320      	movs	r3, #32
 80043c0:	e004      	b.n	80043cc <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 80043c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2201      	movs	r2, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	69d1      	ldr	r1, [r2, #28]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	430b      	orrs	r3, r1
 80043e2:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	f7ff faf1 	bl	80039d8 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fc81 	bl	8003d02 <LL_ADC_REG_IsConversionOngoing>
 8004400:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff fc8d 	bl	8003d28 <LL_ADC_INJ_IsConversionOngoing>
 800440e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 81df 	bne.w	80047da <HAL_ADC_ConfigChannel+0x4ba>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800441c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 81da 	bne.w	80047da <HAL_ADC_ConfigChannel+0x4ba>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	461a      	mov	r2, r3
 8004434:	f7ff fb7c 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	089b      	lsrs	r3, r3, #2
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d046      	beq.n	80044e8 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6919      	ldr	r1, [r3, #16]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800446a:	f7ff f9d5 	bl	8003818 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	461a      	mov	r2, r3
 800447c:	f7ff fa19 	bl	80038b2 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	7e9b      	ldrb	r3, [r3, #26]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d11e      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <HAL_ADC_ConfigChannel+0x17e>
 8004498:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800449c:	e000      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x180>
 800449e:	2300      	movs	r3, #0
 80044a0:	461a      	mov	r2, r3
 80044a2:	f7ff fa3c 	bl	800391e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x19c>
 80044b6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80044ba:	e000      	b.n	80044be <HAL_ADC_ConfigChannel+0x19e>
 80044bc:	2300      	movs	r3, #0
 80044be:	461a      	mov	r2, r3
 80044c0:	f7ff fa12 	bl	80038e8 <LL_ADC_SetOffsetSignedSaturation>
 80044c4:	e189      	b.n	80047da <HAL_ADC_ConfigChannel+0x4ba>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2200      	movs	r2, #0
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7ff fa24 	bl	800391e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2200      	movs	r2, #0
 80044e0:	4619      	mov	r1, r3
 80044e2:	f7ff fa01 	bl	80038e8 <LL_ADC_SetOffsetSignedSaturation>
 80044e6:	e178      	b.n	80047da <HAL_ADC_ConfigChannel+0x4ba>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f9b3 	bl	800385a <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <HAL_ADC_ConfigChannel+0x1f4>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff f9a8 	bl	800385a <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	f003 021f 	and.w	r2, r3, #31
 8004512:	e01e      	b.n	8004552 <HAL_ADC_ConfigChannel+0x232>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2100      	movs	r1, #0
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff f99d 	bl	800385a <LL_ADC_GetOffsetChannel>
 8004520:	4603      	mov	r3, r0
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800453a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8004542:	2320      	movs	r3, #32
 8004544:	e004      	b.n	8004550 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8004546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800454a:	fab3 f383 	clz	r3, r3
 800454e:	b2db      	uxtb	r3, r3
 8004550:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d105      	bne.n	800456a <HAL_ADC_ConfigChannel+0x24a>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	e018      	b.n	800459c <HAL_ADC_ConfigChannel+0x27c>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004576:	fa93 f3a3 	rbit	r3, r3
 800457a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800457e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 800458e:	2320      	movs	r3, #32
 8004590:	e004      	b.n	800459c <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8004592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800459c:	429a      	cmp	r2, r3
 800459e:	d107      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2300      	movs	r3, #0
 80045aa:	2100      	movs	r1, #0
 80045ac:	f7ff f934 	bl	8003818 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2101      	movs	r1, #1
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff f94f 	bl	800385a <LL_ADC_GetOffsetChannel>
 80045bc:	4603      	mov	r3, r0
 80045be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10c      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x2c0>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2101      	movs	r1, #1
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff f944 	bl	800385a <LL_ADC_GetOffsetChannel>
 80045d2:	4603      	mov	r3, r0
 80045d4:	0e9b      	lsrs	r3, r3, #26
 80045d6:	f003 021f 	and.w	r2, r3, #31
 80045da:	e020      	b.n	800461e <HAL_ADC_ConfigChannel+0x2fe>
 80045dc:	46021000 	.word	0x46021000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff f937 	bl	800385a <LL_ADC_GetOffsetChannel>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80045fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004602:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004606:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 800460e:	2320      	movs	r3, #32
 8004610:	e004      	b.n	800461c <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8004612:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d105      	bne.n	8004636 <HAL_ADC_ConfigChannel+0x316>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	0e9b      	lsrs	r3, r3, #26
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	e018      	b.n	8004668 <HAL_ADC_ConfigChannel+0x348>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800464a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800464e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004652:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e004      	b.n	8004668 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 800465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004668:	429a      	cmp	r2, r3
 800466a:	d107      	bne.n	800467c <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2300      	movs	r3, #0
 8004676:	2101      	movs	r1, #1
 8004678:	f7ff f8ce 	bl	8003818 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2102      	movs	r1, #2
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f8e9 	bl	800385a <LL_ADC_GetOffsetChannel>
 8004688:	4603      	mov	r3, r0
 800468a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x388>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff f8de 	bl	800385a <LL_ADC_GetOffsetChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	e01a      	b.n	80046de <HAL_ADC_ConfigChannel+0x3be>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff f8d3 	bl	800385a <LL_ADC_GetOffsetChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80046c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80046c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80046ce:	2320      	movs	r3, #32
 80046d0:	e004      	b.n	80046dc <HAL_ADC_ConfigChannel+0x3bc>
  return __builtin_clz(value);
 80046d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_ADC_ConfigChannel+0x3d6>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	0e9b      	lsrs	r3, r3, #26
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	e011      	b.n	800471a <HAL_ADC_ConfigChannel+0x3fa>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004704:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004706:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004708:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800470e:	2320      	movs	r3, #32
 8004710:	e003      	b.n	800471a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8004712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004714:	fab3 f383 	clz	r3, r3
 8004718:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800471a:	429a      	cmp	r2, r3
 800471c:	d107      	bne.n	800472e <HAL_ADC_ConfigChannel+0x40e>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	2300      	movs	r3, #0
 8004728:	2102      	movs	r1, #2
 800472a:	f7ff f875 	bl	8003818 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2103      	movs	r1, #3
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f890 	bl	800385a <LL_ADC_GetOffsetChannel>
 800473a:	4603      	mov	r3, r0
 800473c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <HAL_ADC_ConfigChannel+0x43a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2103      	movs	r1, #3
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff f885 	bl	800385a <LL_ADC_GetOffsetChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	0e9b      	lsrs	r3, r3, #26
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	e017      	b.n	800478a <HAL_ADC_ConfigChannel+0x46a>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2103      	movs	r1, #3
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff f87a 	bl	800385a <LL_ADC_GetOffsetChannel>
 8004766:	4603      	mov	r3, r0
 8004768:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800476c:	fa93 f3a3 	rbit	r3, r3
 8004770:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004774:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004776:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x460>
    return 32U;
 800477c:	2320      	movs	r3, #32
 800477e:	e003      	b.n	8004788 <HAL_ADC_ConfigChannel+0x468>
  return __builtin_clz(value);
 8004780:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x482>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0e9b      	lsrs	r3, r3, #26
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	e011      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x4a6>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80047aa:	fa93 f3a3 	rbit	r3, r3
 80047ae:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80047b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80047b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_ADC_ConfigChannel+0x49e>
    return 32U;
 80047ba:	2320      	movs	r3, #32
 80047bc:	e003      	b.n	80047c6 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 80047be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047c0:	fab3 f383 	clz	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d107      	bne.n	80047da <HAL_ADC_ConfigChannel+0x4ba>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	2300      	movs	r3, #0
 80047d4:	2103      	movs	r1, #3
 80047d6:	f7ff f81f 	bl	8003818 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fa7c 	bl	8003cdc <LL_ADC_IsEnabled>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 83ad 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	461a      	mov	r2, r3
 80047fa:	f7ff f9fd 	bl	8003bf8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004806:	f040 80d6 	bne.w	80049b6 <HAL_ADC_ConfigChannel+0x696>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10b      	bne.n	800482e <HAL_ADC_ConfigChannel+0x50e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	3301      	adds	r3, #1
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2b09      	cmp	r3, #9
 8004824:	bf94      	ite	ls
 8004826:	2301      	movls	r3, #1
 8004828:	2300      	movhi	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	e019      	b.n	8004862 <HAL_ADC_ConfigChannel+0x542>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004836:	fa93 f3a3 	rbit	r3, r3
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800483c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e003      	b.n	8004852 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800484a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800484c:	fab3 f383 	clz	r3, r3
 8004850:	b2db      	uxtb	r3, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	2b09      	cmp	r3, #9
 800485a:	bf94      	ite	ls
 800485c:	2301      	movls	r3, #1
 800485e:	2300      	movhi	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d04d      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x5e2>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <HAL_ADC_ConfigChannel+0x562>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	3301      	adds	r3, #1
 800487a:	069b      	lsls	r3, r3, #26
 800487c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004880:	e015      	b.n	80048ae <HAL_ADC_ConfigChannel+0x58e>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004892:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004894:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800489a:	2320      	movs	r3, #32
 800489c:	e003      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800489e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a0:	fab3 f383 	clz	r3, r3
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	069b      	lsls	r3, r3, #26
 80048aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d109      	bne.n	80048ce <HAL_ADC_ConfigChannel+0x5ae>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	0e9b      	lsrs	r3, r3, #26
 80048c0:	3301      	adds	r3, #1
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f303 	lsl.w	r3, r1, r3
 80048cc:	e017      	b.n	80048fe <HAL_ADC_ConfigChannel+0x5de>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x5ca>
    return 32U;
 80048e6:	2320      	movs	r3, #32
 80048e8:	e003      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x5d2>
  return __builtin_clz(value);
 80048ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ec:	fab3 f383 	clz	r3, r3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2101      	movs	r1, #1
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	4313      	orrs	r3, r2
 8004900:	e04e      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x680>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d107      	bne.n	800491e <HAL_ADC_ConfigChannel+0x5fe>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	0e9b      	lsrs	r3, r3, #26
 8004914:	3301      	adds	r3, #1
 8004916:	069b      	lsls	r3, r3, #26
 8004918:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800491c:	e015      	b.n	800494a <HAL_ADC_ConfigChannel+0x62a>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8004936:	2320      	movs	r3, #32
 8004938:	e003      	b.n	8004942 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	fab3 f383 	clz	r3, r3
 8004940:	b2db      	uxtb	r3, r3
 8004942:	3301      	adds	r3, #1
 8004944:	069b      	lsls	r3, r3, #26
 8004946:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <HAL_ADC_ConfigChannel+0x64a>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	0e9b      	lsrs	r3, r3, #26
 800495c:	3301      	adds	r3, #1
 800495e:	f003 031f 	and.w	r3, r3, #31
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	e017      	b.n	800499a <HAL_ADC_ConfigChannel+0x67a>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	61bb      	str	r3, [r7, #24]
  return result;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x666>
    return 32U;
 8004982:	2320      	movs	r3, #32
 8004984:	e003      	b.n	800498e <HAL_ADC_ConfigChannel+0x66e>
  return __builtin_clz(value);
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	fab3 f383 	clz	r3, r3
 800498c:	b2db      	uxtb	r3, r3
 800498e:	3301      	adds	r3, #1
 8004990:	f003 031f 	and.w	r3, r3, #31
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	4313      	orrs	r3, r2
 800499c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80049a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80049b2:	f7ff f8bd 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f280 82c3 	bge.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a92      	ldr	r2, [pc, #584]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x6b4>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a91      	ldr	r2, [pc, #580]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d101      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x6b8>
 80049d4:	4b90      	ldr	r3, [pc, #576]	@ (8004c18 <HAL_ADC_ConfigChannel+0x8f8>)
 80049d6:	e000      	b.n	80049da <HAL_ADC_ConfigChannel+0x6ba>
 80049d8:	4b90      	ldr	r3, [pc, #576]	@ (8004c1c <HAL_ADC_ConfigChannel+0x8fc>)
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe feee 	bl	80037bc <LL_ADC_GetCommonPathInternalCh>
 80049e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a89      	ldr	r2, [pc, #548]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <HAL_ADC_ConfigChannel+0x6d8>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a88      	ldr	r2, [pc, #544]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10e      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x6f6>
 80049f8:	4885      	ldr	r0, [pc, #532]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 80049fa:	f7ff f96f 	bl	8003cdc <LL_ADC_IsEnabled>
 80049fe:	4604      	mov	r4, r0
 8004a00:	4884      	ldr	r0, [pc, #528]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a02:	f7ff f96b 	bl	8003cdc <LL_ADC_IsEnabled>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4323      	orrs	r3, r4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e008      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x708>
 8004a16:	4882      	ldr	r0, [pc, #520]	@ (8004c20 <HAL_ADC_ConfigChannel+0x900>)
 8004a18:	f7ff f960 	bl	8003cdc <LL_ADC_IsEnabled>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80a6 	beq.w	8004b7a <HAL_ADC_ConfigChannel+0x85a>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7c      	ldr	r2, [pc, #496]	@ (8004c24 <HAL_ADC_ConfigChannel+0x904>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d13c      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x792>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d136      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x792>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a71      	ldr	r2, [pc, #452]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00a      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x744>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a70      	ldr	r2, [pc, #448]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d005      	beq.n	8004a64 <HAL_ADC_ConfigChannel+0x744>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a70      	ldr	r2, [pc, #448]	@ (8004c20 <HAL_ADC_ConfigChannel+0x900>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	f040 826e 	bne.w	8004f40 <HAL_ADC_ConfigChannel+0xc20>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a69      	ldr	r2, [pc, #420]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d004      	beq.n	8004a78 <HAL_ADC_ConfigChannel+0x758>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a68      	ldr	r2, [pc, #416]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x75c>
 8004a78:	4a67      	ldr	r2, [pc, #412]	@ (8004c18 <HAL_ADC_ConfigChannel+0x8f8>)
 8004a7a:	e000      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x75e>
 8004a7c:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_ADC_ConfigChannel+0x8fc>)
 8004a7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a86:	4619      	mov	r1, r3
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fe fe84 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8e:	4b66      	ldr	r3, [pc, #408]	@ (8004c28 <HAL_ADC_ConfigChannel+0x908>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	4a65      	ldr	r2, [pc, #404]	@ (8004c2c <HAL_ADC_ConfigChannel+0x90c>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	099b      	lsrs	r3, r3, #6
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8004aa0:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004aa2:	e002      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x78a>
                {
                  wait_loop_index--;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f9      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x784>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ab0:	e246      	b.n	8004f40 <HAL_ADC_ConfigChannel+0xc20>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c30 <HAL_ADC_ConfigChannel+0x910>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d12b      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x7f4>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d125      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x7f4>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x7c8>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a4f      	ldr	r2, [pc, #316]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d005      	beq.n	8004ae8 <HAL_ADC_ConfigChannel+0x7c8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8004c20 <HAL_ADC_ConfigChannel+0x900>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	f040 822e 	bne.w	8004f44 <HAL_ADC_ConfigChannel+0xc24>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a48      	ldr	r2, [pc, #288]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x7dc>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a47      	ldr	r2, [pc, #284]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x7e0>
 8004afc:	4a46      	ldr	r2, [pc, #280]	@ (8004c18 <HAL_ADC_ConfigChannel+0x8f8>)
 8004afe:	e000      	b.n	8004b02 <HAL_ADC_ConfigChannel+0x7e2>
 8004b00:	4a46      	ldr	r2, [pc, #280]	@ (8004c1c <HAL_ADC_ConfigChannel+0x8fc>)
 8004b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f7fe fe42 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004b12:	e217      	b.n	8004f44 <HAL_ADC_ConfigChannel+0xc24>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a46      	ldr	r2, [pc, #280]	@ (8004c34 <HAL_ADC_ConfigChannel+0x914>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	f040 8213 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 820c 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a37      	ldr	r2, [pc, #220]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00a      	beq.n	8004b4e <HAL_ADC_ConfigChannel+0x82e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a35      	ldr	r2, [pc, #212]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d005      	beq.n	8004b4e <HAL_ADC_ConfigChannel+0x82e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a36      	ldr	r2, [pc, #216]	@ (8004c20 <HAL_ADC_ConfigChannel+0x900>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f040 81fc 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2f      	ldr	r2, [pc, #188]	@ (8004c10 <HAL_ADC_ConfigChannel+0x8f0>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_ADC_ConfigChannel+0x842>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c14 <HAL_ADC_ConfigChannel+0x8f4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0x846>
 8004b62:	4a2d      	ldr	r2, [pc, #180]	@ (8004c18 <HAL_ADC_ConfigChannel+0x8f8>)
 8004b64:	e000      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x848>
 8004b66:	4a2d      	ldr	r2, [pc, #180]	@ (8004c1c <HAL_ADC_ConfigChannel+0x8fc>)
 8004b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f7fe fe0f 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
 8004b78:	e1e5      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b7e:	f043 0220 	orr.w	r2, r3, #32
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004b8c:	e1db      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	f000 811b 	beq.w	8004dd6 <HAL_ADC_ConfigChannel+0xab6>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ba8:	d004      	beq.n	8004bb4 <HAL_ADC_ConfigChannel+0x894>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004bae:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <HAL_ADC_ConfigChannel+0x918>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d107      	bne.n	8004bc4 <HAL_ADC_ConfigChannel+0x8a4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe ff6b 	bl	8003a98 <LL_ADC_REG_SetSequencerChAdd>
 8004bc2:	e059      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x958>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	401a      	ands	r2, r3
 8004bdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004be0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_ADC_ConfigChannel+0x8d4>
 8004be8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bec:	0e9b      	lsrs	r3, r3, #26
 8004bee:	f003 031f 	and.w	r3, r3, #31
 8004bf2:	e027      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x924>
 8004bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bf8:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	60fb      	str	r3, [r7, #12]
  return result;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d117      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x91c>
    return 32U;
 8004c0c:	2320      	movs	r3, #32
 8004c0e:	e019      	b.n	8004c44 <HAL_ADC_ConfigChannel+0x924>
 8004c10:	42028000 	.word	0x42028000
 8004c14:	42028100 	.word	0x42028100
 8004c18:	42028300 	.word	0x42028300
 8004c1c:	46021300 	.word	0x46021300
 8004c20:	46021000 	.word	0x46021000
 8004c24:	ce080000 	.word	0xce080000
 8004c28:	20177008 	.word	0x20177008
 8004c2c:	053e2d63 	.word	0x053e2d63
 8004c30:	ca040000 	.word	0xca040000
 8004c34:	80000001 	.word	0x80000001
 8004c38:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	fab3 f383 	clz	r3, r3
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6849      	ldr	r1, [r1, #4]
 8004c48:	f001 011f 	and.w	r1, r1, #31
 8004c4c:	408b      	lsls	r3, r1
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	089b      	lsrs	r3, r3, #2
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d808      	bhi.n	8004c78 <HAL_ADC_ConfigChannel+0x958>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c72:	4619      	mov	r1, r3
 8004c74:	f7fe feb0 	bl	80039d8 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004c86:	f7fe ff53 	bl	8003b30 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f280 8159 	bge.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a9b      	ldr	r2, [pc, #620]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_ADC_ConfigChannel+0x988>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a9a      	ldr	r2, [pc, #616]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d101      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x98c>
 8004ca8:	4b99      	ldr	r3, [pc, #612]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004caa:	e000      	b.n	8004cae <HAL_ADC_ConfigChannel+0x98e>
 8004cac:	4b99      	ldr	r3, [pc, #612]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd84 	bl	80037bc <LL_ADC_GetCommonPathInternalCh>
 8004cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a96      	ldr	r2, [pc, #600]	@ (8004f18 <HAL_ADC_ConfigChannel+0xbf8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d12b      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x9fa>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d125      	bne.n	8004d1a <HAL_ADC_ConfigChannel+0x9fa>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a8d      	ldr	r2, [pc, #564]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d004      	beq.n	8004ce2 <HAL_ADC_ConfigChannel+0x9c2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x9c6>
 8004ce2:	4a8b      	ldr	r2, [pc, #556]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004ce4:	e000      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x9c8>
 8004ce6:	4a8b      	ldr	r2, [pc, #556]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004ce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe fd4f 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004cf8:	4b88      	ldr	r3, [pc, #544]	@ (8004f1c <HAL_ADC_ConfigChannel+0xbfc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	4a88      	ldr	r2, [pc, #544]	@ (8004f20 <HAL_ADC_ConfigChannel+0xc00>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004d0a:	e002      	b.n	8004d12 <HAL_ADC_ConfigChannel+0x9f2>
            {
              wait_loop_index--;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f9      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x9ec>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8004d18:	e045      	b.n	8004da6 <HAL_ADC_ConfigChannel+0xa86>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a81      	ldr	r2, [pc, #516]	@ (8004f24 <HAL_ADC_ConfigChannel+0xc04>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d11b      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0xa3c>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d115      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0xa3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a74      	ldr	r2, [pc, #464]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d004      	beq.n	8004d44 <HAL_ADC_ConfigChannel+0xa24>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a73      	ldr	r2, [pc, #460]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d101      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0xa28>
 8004d44:	4a72      	ldr	r2, [pc, #456]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d46:	e000      	b.n	8004d4a <HAL_ADC_ConfigChannel+0xa2a>
 8004d48:	4a72      	ldr	r2, [pc, #456]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f7fe fd1e 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
 8004d5a:	e024      	b.n	8004da6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a71      	ldr	r2, [pc, #452]	@ (8004f28 <HAL_ADC_ConfigChannel+0xc08>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d11f      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0xa86>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d115      	bne.n	8004d9e <HAL_ADC_ConfigChannel+0xa7e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a64      	ldr	r2, [pc, #400]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_ADC_ConfigChannel+0xa66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a62      	ldr	r2, [pc, #392]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0xa6a>
 8004d86:	4a62      	ldr	r2, [pc, #392]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004d88:	e000      	b.n	8004d8c <HAL_ADC_ConfigChannel+0xa6c>
 8004d8a:	4a62      	ldr	r2, [pc, #392]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004d8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fe fcfd 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
 8004d9c:	e003      	b.n	8004da6 <HAL_ADC_ConfigChannel+0xa86>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a62      	ldr	r2, [pc, #392]	@ (8004f2c <HAL_ADC_ConfigChannel+0xc0c>)
 8004da4:	4293      	cmp	r3, r2
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a61      	ldr	r2, [pc, #388]	@ (8004f30 <HAL_ADC_ConfigChannel+0xc10>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	f040 80ca 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 80c3 	bne.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004dd4:	e0b7      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dde:	d004      	beq.n	8004dea <HAL_ADC_ConfigChannel+0xaca>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8004de4:	4a53      	ldr	r2, [pc, #332]	@ (8004f34 <HAL_ADC_ConfigChannel+0xc14>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d106      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0xad8>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe fe83 	bl	8003afe <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f280 80a2 	bge.w	8004f46 <HAL_ADC_ConfigChannel+0xc26>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a40      	ldr	r2, [pc, #256]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d004      	beq.n	8004e16 <HAL_ADC_ConfigChannel+0xaf6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a3e      	ldr	r2, [pc, #248]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0xafa>
 8004e16:	4b3e      	ldr	r3, [pc, #248]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004e18:	e000      	b.n	8004e1c <HAL_ADC_ConfigChannel+0xafc>
 8004e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fccd 	bl	80037bc <LL_ADC_GetCommonPathInternalCh>
 8004e22:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a43      	ldr	r2, [pc, #268]	@ (8004f38 <HAL_ADC_ConfigChannel+0xc18>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d115      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0xb3c>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a34      	ldr	r2, [pc, #208]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_ADC_ConfigChannel+0xb24>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a33      	ldr	r2, [pc, #204]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0xb28>
 8004e44:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004e46:	e000      	b.n	8004e4a <HAL_ADC_ConfigChannel+0xb2a>
 8004e48:	4a32      	ldr	r2, [pc, #200]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe fc9e 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
 8004e5a:	e034      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a36      	ldr	r2, [pc, #216]	@ (8004f3c <HAL_ADC_ConfigChannel+0xc1c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_ADC_ConfigChannel+0xb72>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d004      	beq.n	8004e7a <HAL_ADC_ConfigChannel+0xb5a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a25      	ldr	r2, [pc, #148]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d101      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0xb5e>
 8004e7a:	4a25      	ldr	r2, [pc, #148]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004e7c:	e000      	b.n	8004e80 <HAL_ADC_ConfigChannel+0xb60>
 8004e7e:	4a25      	ldr	r2, [pc, #148]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004e80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f7fe fc83 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
 8004e90:	e019      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0xba6>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a24      	ldr	r2, [pc, #144]	@ (8004f28 <HAL_ADC_ConfigChannel+0xc08>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d114      	bne.n	8004ec6 <HAL_ADC_ConfigChannel+0xba6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a19      	ldr	r2, [pc, #100]	@ (8004f08 <HAL_ADC_ConfigChannel+0xbe8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0xb90>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <HAL_ADC_ConfigChannel+0xbec>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d101      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0xb94>
 8004eb0:	4a17      	ldr	r2, [pc, #92]	@ (8004f10 <HAL_ADC_ConfigChannel+0xbf0>)
 8004eb2:	e000      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0xb96>
 8004eb4:	4a17      	ldr	r2, [pc, #92]	@ (8004f14 <HAL_ADC_ConfigChannel+0xbf4>)
 8004eb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eba:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	f7fe fc68 	bl	8003796 <LL_ADC_SetCommonPathInternalCh>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
            }
          }
#else
          if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a19      	ldr	r2, [pc, #100]	@ (8004f30 <HAL_ADC_ConfigChannel+0xc10>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d13a      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d134      	bne.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
          {
            SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8004ef0:	e029      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004f04:	e01f      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
 8004f06:	bf00      	nop
 8004f08:	42028000 	.word	0x42028000
 8004f0c:	42028100 	.word	0x42028100
 8004f10:	42028300 	.word	0x42028300
 8004f14:	46021300 	.word	0x46021300
 8004f18:	b6002000 	.word	0xb6002000
 8004f1c:	20177008 	.word	0x20177008
 8004f20:	053e2d63 	.word	0x053e2d63
 8004f24:	ba004000 	.word	0xba004000
 8004f28:	80000001 	.word	0x80000001
 8004f2c:	b2001000 	.word	0xb2001000
 8004f30:	d7200000 	.word	0xd7200000
 8004f34:	80000010 	.word	0x80000010
 8004f38:	ce080000 	.word	0xce080000
 8004f3c:	ca040000 	.word	0xca040000
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f40:	bf00      	nop
 8004f42:	e000      	b.n	8004f46 <HAL_ADC_ConfigChannel+0xc26>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f44:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8004f4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	37dc      	adds	r7, #220	@ 0xdc
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd90      	pop	{r4, r7, pc}
 8004f5a:	bf00      	nop

08004f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f78:	4013      	ands	r3, r2
 8004f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	60d3      	str	r3, [r2, #12]
}
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	e000ed00 	.word	0xe000ed00

08004fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <__NVIC_GetPriorityGrouping+0x18>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	f003 0307 	and.w	r3, r3, #7
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00

08004fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db0b      	blt.n	8004fea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	4907      	ldr	r1, [pc, #28]	@ (8004ff8 <__NVIC_EnableIRQ+0x38>)
 8004fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000e100 	.word	0xe000e100

08004ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	4603      	mov	r3, r0
 8005004:	6039      	str	r1, [r7, #0]
 8005006:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005008:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	db0a      	blt.n	8005026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	490c      	ldr	r1, [pc, #48]	@ (8005048 <__NVIC_SetPriority+0x4c>)
 8005016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005024:	e00a      	b.n	800503c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	4908      	ldr	r1, [pc, #32]	@ (800504c <__NVIC_SetPriority+0x50>)
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	3b04      	subs	r3, #4
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	440b      	add	r3, r1
 800503a:	761a      	strb	r2, [r3, #24]
}
 800503c:	bf00      	nop
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	e000e100 	.word	0xe000e100
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	@ 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f1c3 0307 	rsb	r3, r3, #7
 800506a:	2b04      	cmp	r3, #4
 800506c:	bf28      	it	cs
 800506e:	2304      	movcs	r3, #4
 8005070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	3304      	adds	r3, #4
 8005076:	2b06      	cmp	r3, #6
 8005078:	d902      	bls.n	8005080 <NVIC_EncodePriority+0x30>
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3b03      	subs	r3, #3
 800507e:	e000      	b.n	8005082 <NVIC_EncodePriority+0x32>
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005084:	f04f 32ff 	mov.w	r2, #4294967295
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43da      	mvns	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	401a      	ands	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005098:	f04f 31ff 	mov.w	r1, #4294967295
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	fa01 f303 	lsl.w	r3, r1, r3
 80050a2:	43d9      	mvns	r1, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050a8:	4313      	orrs	r3, r2
         );
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3724      	adds	r7, #36	@ 0x24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff4c 	bl	8004f5c <__NVIC_SetPriorityGrouping>
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	4603      	mov	r3, r0
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050da:	f7ff ff63 	bl	8004fa4 <__NVIC_GetPriorityGrouping>
 80050de:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	6978      	ldr	r0, [r7, #20]
 80050e6:	f7ff ffb3 	bl	8005050 <NVIC_EncodePriority>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050f0:	4611      	mov	r1, r2
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff ff82 	bl	8004ffc <__NVIC_SetPriority>
}
 80050f8:	bf00      	nop
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800510a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff ff56 	bl	8004fc0 <__NVIC_EnableIRQ>
}
 8005114:	bf00      	nop
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d844      	bhi.n	80051b4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800512a:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005153 	.word	0x08005153
 8005134:	08005171 	.word	0x08005171
 8005138:	08005193 	.word	0x08005193
 800513c:	080051b5 	.word	0x080051b5
 8005140:	08005145 	.word	0x08005145
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005144:	4b1f      	ldr	r3, [pc, #124]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800514a:	f043 0304 	orr.w	r3, r3, #4
 800514e:	6013      	str	r3, [r2, #0]
      break;
 8005150:	e031      	b.n	80051b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005152:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005158:	f023 0304 	bic.w	r3, r3, #4
 800515c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800515e:	4b1a      	ldr	r3, [pc, #104]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005164:	4a18      	ldr	r2, [pc, #96]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005166:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800516a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800516e:	e022      	b.n	80051b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005170:	4b14      	ldr	r3, [pc, #80]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005176:	f023 0304 	bic.w	r3, r3, #4
 800517a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 800517c:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005182:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005186:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8005188:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800518c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005190:	e011      	b.n	80051b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a0b      	ldr	r2, [pc, #44]	@ (80051c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800519e:	4b0a      	ldr	r3, [pc, #40]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80051a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051a4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80051a8:	4a07      	ldr	r2, [pc, #28]	@ (80051c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80051aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80051ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80051b2:	e000      	b.n	80051b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80051b4:	bf00      	nop
  }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	e000e010 	.word	0xe000e010
 80051c8:	46020c00 	.word	0x46020c00

080051cc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e014      	b.n	8005208 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d105      	bne.n	80051f4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fc ffa6 	bl	8002140 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	@ 0x28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <HAL_DAC_ConfigChannel+0x1c>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e187      	b.n	8005540 <HAL_DAC_ConfigChannel+0x330>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	795b      	ldrb	r3, [r3, #5]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_DAC_ConfigChannel+0x32>
 800523e:	2302      	movs	r3, #2
 8005240:	e17e      	b.n	8005540 <HAL_DAC_ConfigChannel+0x330>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2202      	movs	r2, #2
 800524c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b04      	cmp	r3, #4
 8005254:	d17a      	bne.n	800534c <HAL_DAC_ConfigChannel+0x13c>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005256:	f7fe fa4b 	bl	80036f0 <HAL_GetTick>
 800525a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d13d      	bne.n	80052de <HAL_DAC_ConfigChannel+0xce>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005262:	e018      	b.n	8005296 <HAL_DAC_ConfigChannel+0x86>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005264:	f7fe fa44 	bl	80036f0 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	d911      	bls.n	8005296 <HAL_DAC_ConfigChannel+0x86>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <HAL_DAC_ConfigChannel+0x86>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	f043 0208 	orr.w	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2203      	movs	r2, #3
 8005290:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e154      	b.n	8005540 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1df      	bne.n	8005264 <HAL_DAC_ConfigChannel+0x54>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80052ae:	e020      	b.n	80052f2 <HAL_DAC_ConfigChannel+0xe2>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80052b0:	f7fe fa1e 	bl	80036f0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d90f      	bls.n	80052de <HAL_DAC_ConfigChannel+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da0a      	bge.n	80052de <HAL_DAC_ConfigChannel+0xce>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	f043 0208 	orr.w	r2, r3, #8
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2203      	movs	r2, #3
 80052d8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e130      	b.n	8005540 <HAL_DAC_ConfigChannel+0x330>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dbe3      	blt.n	80052b0 <HAL_DAC_ConfigChannel+0xa0>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	ea02 0103 	and.w	r1, r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	409a      	lsls	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	21ff      	movs	r1, #255	@ 0xff
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	ea02 0103 	and.w	r1, r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	409a      	lsls	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	655a      	str	r2, [r3, #84]	@ 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d11d      	bne.n	80053a6 <HAL_DAC_ConfigChannel+0x196>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	221f      	movs	r2, #31
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43db      	mvns	r3, r3
 8005380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005382:	4013      	ands	r3, r2
 8005384:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539a:	4313      	orrs	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2207      	movs	r2, #7
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	4013      	ands	r3, r2
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d102      	bne.n	80053d0 <HAL_DAC_ConfigChannel+0x1c0>
  {
    connectOnChip = 0x00000000UL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	e00f      	b.n	80053f0 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d102      	bne.n	80053de <HAL_DAC_ConfigChannel+0x1ce>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80053d8:	2301      	movs	r3, #1
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	e008      	b.n	80053f0 <HAL_DAC_ConfigChannel+0x1e0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_DAC_ConfigChannel+0x1dc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80053e6:	2301      	movs	r3, #1
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	e001      	b.n	80053f0 <HAL_DAC_ConfigChannel+0x1e0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	6a3a      	ldr	r2, [r7, #32]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	43db      	mvns	r3, r3
 8005410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005412:	4013      	ands	r3, r2
 8005414:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	7a1b      	ldrb	r3, [r3, #8]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d102      	bne.n	8005424 <HAL_DAC_ConfigChannel+0x214>
 800541e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005422:	e000      	b.n	8005426 <HAL_DAC_ConfigChannel+0x216>
 8005424:	2300      	movs	r3, #0
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800543e:	4013      	ands	r3, r2
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	7a5b      	ldrb	r3, [r3, #9]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d102      	bne.n	8005450 <HAL_DAC_ConfigChannel+0x240>
 800544a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800544e:	e000      	b.n	8005452 <HAL_DAC_ConfigChannel+0x242>
 8005450:	2300      	movs	r3, #0
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4313      	orrs	r3, r2
 8005456:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d114      	bne.n	8005492 <HAL_DAC_ConfigChannel+0x282>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005468:	f003 fe70 	bl	800914c <HAL_RCC_GetHCLKFreq>
 800546c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4a35      	ldr	r2, [pc, #212]	@ (8005548 <HAL_DAC_ConfigChannel+0x338>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d904      	bls.n	8005480 <HAL_DAC_ConfigChannel+0x270>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	e00f      	b.n	80054a0 <HAL_DAC_ConfigChannel+0x290>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4a32      	ldr	r2, [pc, #200]	@ (800554c <HAL_DAC_ConfigChannel+0x33c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d90a      	bls.n	800549e <HAL_DAC_ConfigChannel+0x28e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005490:	e006      	b.n	80054a0 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005498:	4313      	orrs	r3, r2
 800549a:	627b      	str	r3, [r7, #36]	@ 0x24
 800549c:	e000      	b.n	80054a0 <HAL_DAC_ConfigChannel+0x290>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800549e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f003 0310 	and.w	r3, r3, #16
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ae:	4313      	orrs	r3, r2
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6819      	ldr	r1, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0310 	and.w	r3, r3, #16
 80054c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	400a      	ands	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43db      	mvns	r3, r3
 80054f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f2:	4013      	ands	r3, r2
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800550a:	4313      	orrs	r3, r2
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005514:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6819      	ldr	r1, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	22c0      	movs	r2, #192	@ 0xc0
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	43da      	mvns	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	400a      	ands	r2, r1
 8005530:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800553e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3728      	adds	r7, #40	@ 0x28
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	09896800 	.word	0x09896800
 800554c:	04c4b400 	.word	0x04c4b400

08005550 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle and autonomous mode configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_DACEx_SetConfigAutonomousMode+0x16>
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_DACEx_SetConfigAutonomousMode+0x1a>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e024      	b.n	80055b4 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }

  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	791b      	ldrb	r3, [r3, #4]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d11e      	bne.n	80055b2 <HAL_DACEx_SetConfigAutonomousMode+0x62>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	795b      	ldrb	r3, [r3, #5]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_DACEx_SetConfigAutonomousMode+0x30>
 800557c:	2302      	movs	r3, #2
 800557e:	e019      	b.n	80055b4 <HAL_DACEx_SetConfigAutonomousMode+0x64>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005592:	f423 0180 	bic.w	r1, r3, #4194304	@ 0x400000
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e000      	b.n	80055b4 <HAL_DACEx_SetConfigAutonomousMode+0x64>
  }
  else
  {
    return HAL_BUSY;
 80055b2:	2302      	movs	r3, #2
  }
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e037      	b.n	8005642 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d119      	bne.n	8005612 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1a      	ldr	r2, [pc, #104]	@ (800564c <HAL_DCACHE_Init+0x8c>)
 80055e2:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005650 <HAL_DCACHE_Init+0x90>)
 80055e8:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a19      	ldr	r2, [pc, #100]	@ (8005654 <HAL_DCACHE_Init+0x94>)
 80055ee:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <HAL_DCACHE_Init+0x98>)
 80055f4:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a18      	ldr	r2, [pc, #96]	@ (800565c <HAL_DCACHE_Init+0x9c>)
 80055fa:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a16      	ldr	r2, [pc, #88]	@ (8005660 <HAL_DCACHE_Init+0xa0>)
 8005608:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f814 	bl	8005664 <HAL_DCACHE_Enable>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]

  return status;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	08005703 	.word	0x08005703
 8005650:	080056b3 	.word	0x080056b3
 8005654:	080056c7 	.word	0x080056c7
 8005658:	080056ef 	.word	0x080056ef
 800565c:	080056db 	.word	0x080056db
 8005660:	08002235 	.word	0x08002235

08005664 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e015      	b.n	80056a6 <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0309 	and.w	r3, r3, #9
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8005688:	2302      	movs	r3, #2
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	e00a      	b.n	80056a4 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f042 0201 	orr.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
  }

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 80056ba:	bf00      	nop
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 80056f6:	bf00      	nop
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b084      	sub	sp, #16
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800571e:	f7fd ffe7 	bl	80036f0 <HAL_GetTick>
 8005722:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06b      	b.n	8005806 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d008      	beq.n	800574c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e05c      	b.n	8005806 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0204 	orr.w	r2, r2, #4
 800575a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2205      	movs	r2, #5
 8005760:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005764:	e020      	b.n	80057a8 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005766:	f7fd ffc3 	bl	80036f0 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b05      	cmp	r3, #5
 8005772:	d919      	bls.n	80057a8 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	f043 0210 	orr.w	r2, r3, #16
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2203      	movs	r2, #3
 8005784:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800578c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005798:	2201      	movs	r2, #1
 800579a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e02e      	b.n	8005806 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0d7      	beq.n	8005766 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695a      	ldr	r2, [r3, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0202 	orr.w	r2, r2, #2
 80057c4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2204      	movs	r2, #4
 80057ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80057d6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f0:	2201      	movs	r2, #1
 80057f2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2200      	movs	r2, #0
 80057fa:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b082      	sub	sp, #8
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d101      	bne.n	8005820 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e053      	b.n	80058c8 <HAL_DMA2D_Init+0xba>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fc fd37 	bl	80022a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800584c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6851      	ldr	r1, [r2, #4]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	69d2      	ldr	r2, [r2, #28]
 8005858:	4311      	orrs	r1, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	430b      	orrs	r3, r1
 8005860:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005868:	f423 7383 	bic.w	r3, r3, #262	@ 0x106
 800586c:	f023 0301 	bic.w	r3, r3, #1
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6891      	ldr	r1, [r2, #8]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6992      	ldr	r2, [r2, #24]
 8005878:	4311      	orrs	r1, r2
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	430b      	orrs	r3, r1
 8005880:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68d1      	ldr	r1, [r2, #12]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	430b      	orrs	r3, r1
 8005896:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800589e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	051a      	lsls	r2, r3, #20
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	055b      	lsls	r3, r3, #21
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_DMA2D_Start+0x1c>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e018      	b.n	800591e <HAL_DMA2D_Start+0x4e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 f994 	bl	8005c34 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b086      	sub	sp, #24
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d056      	beq.n	80059f0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005942:	f7fd fed5 	bl	80036f0 <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005948:	e04b      	b.n	80059e2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005958:	2b00      	cmp	r3, #0
 800595a:	d023      	beq.n	80059a4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d005      	beq.n	8005972 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	f043 0202 	orr.w	r2, r3, #2
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005980:	f043 0201 	orr.w	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2221      	movs	r2, #33	@ 0x21
 800598e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2204      	movs	r2, #4
 8005994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e0a5      	b.n	8005af0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d01a      	beq.n	80059e2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059ac:	f7fd fea0 	bl	80036f0 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d302      	bcc.n	80059c2 <HAL_DMA2D_PollForTransfer+0x9c>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10f      	bne.n	80059e2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2203      	movs	r2, #3
 80059d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e086      	b.n	8005af0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ac      	beq.n	800594a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d061      	beq.n	8005ad6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a12:	f7fd fe6d 	bl	80036f0 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a18:	e056      	b.n	8005ac8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d02e      	beq.n	8005a8a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a50:	f043 0202 	orr.w	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a66:	f043 0201 	orr.w	r2, r3, #1
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2229      	movs	r2, #41	@ 0x29
 8005a74:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e032      	b.n	8005af0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a90:	d01a      	beq.n	8005ac8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a92:	f7fd fe2d 	bl	80036f0 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d302      	bcc.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x182>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10f      	bne.n	8005ac8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	f043 0220 	orr.w	r2, r3, #32
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e013      	b.n	8005af0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0310 	and.w	r3, r3, #16
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0a1      	beq.n	8005a1a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2212      	movs	r2, #18
 8005adc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

#endif /* DMA2D_FGPFCCR_CSS */
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_DMA2D_ConfigLayer+0x20>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e084      	b.n	8005c22 <HAL_DMA2D_ConfigLayer+0x12a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	3328      	adds	r3, #40	@ 0x28
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	4413      	add	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	041b      	lsls	r3, r3, #16
 8005b44:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005b4c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005b58:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <HAL_DMA2D_ConfigLayer+0x138>)
 8005b5a:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b0a      	cmp	r3, #10
 8005b62:	d003      	beq.n	8005b6c <HAL_DMA2D_ConfigLayer+0x74>
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	d107      	bne.n	8005b7c <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e005      	b.n	8005b88 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d120      	bne.n	8005bd0 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	43db      	mvns	r3, r3
 8005b98:	ea02 0103 	and.w	r1, r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d003      	beq.n	8005bc0 <HAL_DMA2D_ConfigLayer+0xc8>
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	d127      	bne.n	8005c10 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005bcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8005bce:	e01f      	b.n	8005c10 <HAL_DMA2D_ConfigLayer+0x118>
      regMask  |= DMA2D_FGPFCCR_CSS;
    }
#endif /* DMA2D_FGPFCCR_CSS */

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69da      	ldr	r2, [r3, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	ea02 0103 	and.w	r1, r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2b0a      	cmp	r3, #10
 8005bf8:	d003      	beq.n	8005c02 <HAL_DMA2D_ConfigLayer+0x10a>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d106      	bne.n	8005c10 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005c0e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	ff33000f 	.word	0xff33000f

08005c34 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b08b      	sub	sp, #44	@ 0x2c
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c48:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	041a      	lsls	r2, r3, #16
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	431a      	orrs	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c6c:	d174      	bne.n	8005d58 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005c74:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c7c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c84:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d108      	bne.n	8005ca6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca4:	e053      	b.n	8005d4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d106      	bne.n	8005cbc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cba:	e048      	b.n	8005d4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d111      	bne.n	8005ce8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	0cdb      	lsrs	r3, r3, #19
 8005cc8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	0a9b      	lsrs	r3, r3, #10
 8005cce:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	08db      	lsrs	r3, r3, #3
 8005cd4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	02db      	lsls	r3, r3, #11
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce6:	e032      	b.n	8005d4e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d117      	bne.n	8005d20 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	0fdb      	lsrs	r3, r3, #31
 8005cf4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	0cdb      	lsrs	r3, r3, #19
 8005cfa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	0adb      	lsrs	r3, r3, #11
 8005d00:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	029b      	lsls	r3, r3, #10
 8005d10:	431a      	orrs	r2, r3
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	03db      	lsls	r3, r3, #15
 8005d16:	4313      	orrs	r3, r2
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1e:	e016      	b.n	8005d4e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	0f1b      	lsrs	r3, r3, #28
 8005d24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	0d1b      	lsrs	r3, r3, #20
 8005d2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	0b1b      	lsrs	r3, r3, #12
 8005d30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	011a      	lsls	r2, r3, #4
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	431a      	orrs	r2, r3
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	031b      	lsls	r3, r3, #12
 8005d46:	4313      	orrs	r3, r2
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005d56:	e00d      	b.n	8005d74 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d60:	d104      	bne.n	8005d6c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	615a      	str	r2, [r3, #20]
}
 8005d6a:	e003      	b.n	8005d74 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	60da      	str	r2, [r3, #12]
}
 8005d74:	bf00      	nop
 8005d76:	372c      	adds	r7, #44	@ 0x2c
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8005d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <HAL_FLASH_Unlock+0x38>)
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da0b      	bge.n	8005daa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_FLASH_Unlock+0x38>)
 8005d94:	4a09      	ldr	r2, [pc, #36]	@ (8005dbc <HAL_FLASH_Unlock+0x3c>)
 8005d96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8005d98:	4b07      	ldr	r3, [pc, #28]	@ (8005db8 <HAL_FLASH_Unlock+0x38>)
 8005d9a:	4a09      	ldr	r2, [pc, #36]	@ (8005dc0 <HAL_FLASH_Unlock+0x40>)
 8005d9c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8005d9e:	4b06      	ldr	r3, [pc, #24]	@ (8005db8 <HAL_FLASH_Unlock+0x38>)
 8005da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da01      	bge.n	8005daa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8005daa:	79fb      	ldrb	r3, [r7, #7]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	45670123 	.word	0x45670123
 8005dc0:	cdef89ab 	.word	0xcdef89ab

08005dc4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8005dce:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <HAL_FLASH_Lock+0x30>)
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dd2:	4a08      	ldr	r2, [pc, #32]	@ (8005df4 <HAL_FLASH_Lock+0x30>)
 8005dd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dd8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8005dda:	4b06      	ldr	r3, [pc, #24]	@ (8005df4 <HAL_FLASH_Lock+0x30>)
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da01      	bge.n	8005de6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8005de6:	79fb      	ldrb	r3, [r7, #7]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40022000 	.word	0x40022000

08005df8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8005e00:	f7fd fc76 	bl	80036f0 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4413      	add	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e7c <FLASH_WaitForLastOperation+0x84>)
 8005e0e:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8005e10:	e00b      	b.n	8005e2a <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d007      	beq.n	8005e2a <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 8005e1a:	f7fd fc69 	bl	80036f0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d801      	bhi.n	8005e2a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e023      	b.n	8005e72 <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1ed      	bne.n	8005e12 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8005e3e:	4013      	ands	r3, r2
 8005e40:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00a      	beq.n	8005e5e <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005e48:	4b0d      	ldr	r3, [pc, #52]	@ (8005e80 <FLASH_WaitForLastOperation+0x88>)
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	4a0b      	ldr	r2, [pc, #44]	@ (8005e80 <FLASH_WaitForLastOperation+0x88>)
 8005e52:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e009      	b.n	8005e72 <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40022020 	.word	0x40022020
 8005e80:	20177014 	.word	0x20177014

08005e84 <HAL_FLASHEx_ConfigBBAttributes>:
  *         block-base attribute type is requested: Secure or Privilege.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_ConfigBBAttributes(FLASH_BBAttributesTypeDef *pBBAttributes)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(pBBAttributes->Bank));
  assert_param(IS_FLASH_BB_EXCLUSIVE(pBBAttributes->BBAttributesType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005e8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e90:	f7ff ffb2 	bl	8005df8 <FLASH_WaitForLastOperation>
 8005e94:	4603      	mov	r3, r0
 8005e96:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d129      	bne.n	8005ef2 <HAL_FLASHEx_ConfigBBAttributes+0x6e>
      }
    }
    else
#endif /* __ARM_FEATURE_CMSE */
    {
      if (pBBAttributes->Bank == FLASH_BANK_1)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d102      	bne.n	8005eac <HAL_FLASHEx_ConfigBBAttributes+0x28>
      {
        reg = &(FLASH->PRIVBB1R1);
 8005ea6:	4b17      	ldr	r3, [pc, #92]	@ (8005f04 <HAL_FLASHEx_ConfigBBAttributes+0x80>)
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	e001      	b.n	8005eb0 <HAL_FLASHEx_ConfigBBAttributes+0x2c>
      }
      else
      {
        reg = &(FLASH->PRIVBB2R1);
 8005eac:	4b16      	ldr	r3, [pc, #88]	@ (8005f08 <HAL_FLASHEx_ConfigBBAttributes+0x84>)
 8005eae:	60bb      	str	r3, [r7, #8]
      }
    }

    /* Modify the register values and check that new attributes are taken in account */
    for (index = 0; index < FLASH_BLOCKBASED_NB_REG; index++)
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73bb      	strb	r3, [r7, #14]
 8005eb4:	e017      	b.n	8005ee6 <HAL_FLASHEx_ConfigBBAttributes+0x62>
    {
      *reg = pBBAttributes->BBAttributes_array[index];
 8005eb6:	7bba      	ldrb	r2, [r7, #14]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3202      	adds	r2, #2
 8005ebc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	601a      	str	r2, [r3, #0]
      if ((*reg) != pBBAttributes->BBAttributes_array[index])
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	7bb9      	ldrb	r1, [r7, #14]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3102      	adds	r1, #2
 8005ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d001      	beq.n	8005eda <HAL_FLASHEx_ConfigBBAttributes+0x56>
      {
        status = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
      }
      reg++;
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	3304      	adds	r3, #4
 8005ede:	60bb      	str	r3, [r7, #8]
    for (index = 0; index < FLASH_BLOCKBASED_NB_REG; index++)
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	73bb      	strb	r3, [r7, #14]
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	2b07      	cmp	r3, #7
 8005eea:	d9e4      	bls.n	8005eb6 <HAL_FLASHEx_ConfigBBAttributes+0x32>
  __ASM volatile ("isb 0xF":::"memory");
 8005eec:	f3bf 8f6f 	isb	sy
}
 8005ef0:	bf00      	nop
    /* ISB instruction is called to be sure next instructions are performed with correct attributes */
    __ISB();
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005ef2:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <HAL_FLASHEx_ConfigBBAttributes+0x88>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]

  return status;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	400220d0 	.word	0x400220d0
 8005f08:	400220f0 	.word	0x400220f0
 8005f0c:	20177014 	.word	0x20177014

08005f10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	@ 0x24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005f22:	e1ba      	b.n	800629a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	2101      	movs	r1, #1
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 81aa 	beq.w	8006294 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a55      	ldr	r2, [pc, #340]	@ (8006098 <HAL_GPIO_Init+0x188>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d15d      	bne.n	8006004 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005f4e:	2201      	movs	r2, #1
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0201 	and.w	r2, r3, #1
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005f78:	4a48      	ldr	r2, [pc, #288]	@ (800609c <HAL_GPIO_Init+0x18c>)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005f80:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005f82:	4a46      	ldr	r2, [pc, #280]	@ (800609c <HAL_GPIO_Init+0x18c>)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	4413      	add	r3, r2
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	08da      	lsrs	r2, r3, #3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	3208      	adds	r2, #8
 8005f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	220b      	movs	r2, #11
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	08da      	lsrs	r2, r3, #3
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	3208      	adds	r2, #8
 8005fce:	69f9      	ldr	r1, [r7, #28]
 8005fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	2203      	movs	r2, #3
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	43db      	mvns	r3, r3
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e067      	b.n	80060d4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d003      	beq.n	8006014 <HAL_GPIO_Init+0x104>
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b12      	cmp	r3, #18
 8006012:	d145      	bne.n	80060a0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	08da      	lsrs	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3208      	adds	r2, #8
 800601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006020:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	220f      	movs	r2, #15
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	4013      	ands	r3, r2
 8006036:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 020f 	and.w	r2, r3, #15
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	4313      	orrs	r3, r2
 8006050:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	08da      	lsrs	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3208      	adds	r2, #8
 800605a:	69f9      	ldr	r1, [r7, #28]
 800605c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	2203      	movs	r2, #3
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43db      	mvns	r3, r3
 8006072:	69fa      	ldr	r2, [r7, #28]
 8006074:	4013      	ands	r3, r2
 8006076:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0203 	and.w	r2, r3, #3
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	4313      	orrs	r3, r2
 800608c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	e01e      	b.n	80060d4 <HAL_GPIO_Init+0x1c4>
 8006096:	bf00      	nop
 8006098:	46020000 	.word	0x46020000
 800609c:	0800f738 	.word	0x0800f738
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	2203      	movs	r2, #3
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0203 	and.w	r2, r3, #3
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	69fa      	ldr	r2, [r7, #28]
 80060d2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d00b      	beq.n	80060f4 <HAL_GPIO_Init+0x1e4>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d007      	beq.n	80060f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060e8:	2b11      	cmp	r3, #17
 80060ea:	d003      	beq.n	80060f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b12      	cmp	r3, #18
 80060f2:	d130      	bne.n	8006156 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	2203      	movs	r2, #3
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	43db      	mvns	r3, r3
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	4013      	ands	r3, r2
 800610a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	68da      	ldr	r2, [r3, #12]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	69fa      	ldr	r2, [r7, #28]
 800611a:	4313      	orrs	r3, r2
 800611c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800612a:	2201      	movs	r2, #1
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	69fa      	ldr	r2, [r7, #28]
 8006136:	4013      	ands	r3, r2
 8006138:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	091b      	lsrs	r3, r3, #4
 8006140:	f003 0201 	and.w	r2, r3, #1
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	4313      	orrs	r3, r2
 800614e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	69fa      	ldr	r2, [r7, #28]
 8006154:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2b03      	cmp	r3, #3
 800615c:	d017      	beq.n	800618e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	2203      	movs	r2, #3
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	4013      	ands	r3, r2
 8006174:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d07c      	beq.n	8006294 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800619a:	4a47      	ldr	r2, [pc, #284]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	3318      	adds	r3, #24
 80061a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	220f      	movs	r2, #15
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	0a9a      	lsrs	r2, r3, #10
 80061c2:	4b3e      	ldr	r3, [pc, #248]	@ (80062bc <HAL_GPIO_Init+0x3ac>)
 80061c4:	4013      	ands	r3, r2
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	f002 0203 	and.w	r2, r2, #3
 80061cc:	00d2      	lsls	r2, r2, #3
 80061ce:	4093      	lsls	r3, r2
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80061d6:	4938      	ldr	r1, [pc, #224]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	089b      	lsrs	r3, r3, #2
 80061dc:	3318      	adds	r3, #24
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80061e4:	4b34      	ldr	r3, [pc, #208]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	4013      	ands	r3, r2
 80061f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8006208:	4a2b      	ldr	r2, [pc, #172]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800620e:	4b2a      	ldr	r3, [pc, #168]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	43db      	mvns	r3, r3
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	4013      	ands	r3, r2
 800621c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8006232:	4a21      	ldr	r2, [pc, #132]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006238:	4b1f      	ldr	r3, [pc, #124]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800623e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	43db      	mvns	r3, r3
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	4013      	ands	r3, r2
 8006248:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8006256:	69fa      	ldr	r2, [r7, #28]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800625e:	4a16      	ldr	r2, [pc, #88]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8006266:	4b14      	ldr	r3, [pc, #80]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800626c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	43db      	mvns	r3, r3
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	4013      	ands	r3, r2
 8006276:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800628c:	4a0a      	ldr	r2, [pc, #40]	@ (80062b8 <HAL_GPIO_Init+0x3a8>)
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	3301      	adds	r3, #1
 8006298:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f47f ae3d 	bne.w	8005f24 <HAL_GPIO_Init+0x14>
  }
}
 80062aa:	bf00      	nop
 80062ac:	bf00      	nop
 80062ae:	3724      	adds	r7, #36	@ 0x24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	46022000 	.word	0x46022000
 80062bc:	002f7f7f 	.word	0x002f7f7f

080062c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	807b      	strh	r3, [r7, #2]
 80062cc:	4613      	mov	r3, r2
 80062ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062d0:	787b      	ldrb	r3, [r7, #1]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80062dc:	e002      	b.n	80062e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80062de:	887a      	ldrh	r2, [r7, #2]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80062fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80062fc:	68da      	ldr	r2, [r3, #12]
 80062fe:	88fb      	ldrh	r3, [r7, #6]
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8006306:	4a0c      	ldr	r2, [pc, #48]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006308:	88fb      	ldrh	r3, [r7, #6]
 800630a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f814 	bl	800633c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8006314:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8006320:	4a05      	ldr	r2, [pc, #20]	@ (8006338 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	4618      	mov	r0, r3
 800632a:	f7fb fe4d 	bl	8001fc8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	46022000 	.word	0x46022000

0800633c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_GPU2D_Init>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_GPU2D_Init(GPU2D_HandleTypeDef *hgpu2d)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b082      	sub	sp, #8
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Check the GPU2D handle validity */
  if (hgpu2d == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_GPU2D_Init+0x12>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e01c      	b.n	800639e <HAL_GPU2D_Init+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_GPU2D_ALL_INSTANCE(hgpu2d->Instance));

  if (hgpu2d->State == HAL_GPU2D_STATE_RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	795b      	ldrb	r3, [r3, #5]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d105      	bne.n	8006378 <HAL_GPU2D_Init+0x26>

    /* Init the low level hardware */
    hgpu2d->MspInitCallback(hgpu2d);
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    /* Init the low level hardware */
    HAL_GPU2D_MspInit(hgpu2d);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fb ffbd 	bl	80022ec <HAL_GPU2D_MspInit>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

    /* Allocate lock resource and initialize it */
    hgpu2d->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	711a      	strb	r2, [r3, #4]
  }

  /* Process locked */
  __HAL_LOCK(hgpu2d);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	791b      	ldrb	r3, [r3, #4]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_GPU2D_Init+0x32>
 8006380:	2302      	movs	r3, #2
 8006382:	e00c      	b.n	800639e <HAL_GPU2D_Init+0x4c>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	711a      	strb	r2, [r3, #4]
  /* Reset the CommandListCpltCallback handler */
  hgpu2d->CommandListCpltCallback = NULL;
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */

  /* Update error code */
  hgpu2d->ErrorCode = HAL_GPU2D_ERROR_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	609a      	str	r2, [r3, #8]

  /* Initialize the GPU2D state*/
  hgpu2d->State = HAL_GPU2D_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	715a      	strb	r2, [r3, #5]

  /* Release Lock */
  __HAL_UNLOCK(hgpu2d);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	711a      	strb	r2, [r3, #4]

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_GPU2D_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t isr_flags = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_ITCTRL);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	33f8      	adds	r3, #248	@ 0xf8
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Command List Complete Interrupt management */
  if ((isr_flags & GPU2D_FLAG_CLC) != 0U)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d013      	beq.n	80063ea <HAL_GPU2D_IRQHandler+0x44>
  {
    uint32_t last_cl_id;

    /* Clear the completion flag */
    __HAL_GPU2D_CLEAR_FLAG(hgpu2d, GPU2D_FLAG_CLC);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	33f8      	adds	r3, #248	@ 0xf8
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f023 0201 	bic.w	r2, r3, #1
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	601a      	str	r2, [r3, #0]

    last_cl_id = GPU2D_ReadReg(hgpu2d->Instance, GPU2D_CLID);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60fb      	str	r3, [r7, #12]
    if (hgpu2d->CommandListCpltCallback != NULL)
    {
      hgpu2d->CommandListCpltCallback(hgpu2d, last_cl_id);
    }
#else /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 0 */
    HAL_GPU2D_CommandListCpltCallback(hgpu2d, last_cl_id);
 80063e2:	68f9      	ldr	r1, [r7, #12]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f80f 	bl	8006408 <HAL_GPU2D_CommandListCpltCallback>
#endif /* USE_HAL_GPU2D_REGISTER_CALLBACKS = 1 */
  }
}
 80063ea:	bf00      	nop
 80063ec:	3718      	adds	r7, #24
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_GPU2D_ER_IRQHandler>:
  * @param  hgpu2d Pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
void HAL_GPU2D_ER_IRQHandler(GPU2D_HandleTypeDef *hgpu2d)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  HAL_GPU2D_ErrorCallback(hgpu2d);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f80f 	bl	800641e <HAL_GPU2D_ErrorCallback>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_GPU2D_CommandListCpltCallback>:
  *                the configuration information for the GPU2D.
  * @param  CmdListID Command list ID that got completed.
  * @retval None
  */
__weak void HAL_GPU2D_CommandListCpltCallback(GPU2D_HandleTypeDef *hgpu2d, uint32_t CmdListID)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  UNUSED(CmdListID);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_GPU2D_CommandListCpltCallback can be implemented in the user file.
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <HAL_GPU2D_ErrorCallback>:
  * @param  hgpu2d pointer to a GPU2D_HandleTypeDef structure that contains
  *                the configuration information for the GPU2D.
  * @retval None
  */
__weak void HAL_GPU2D_ErrorCallback(GPU2D_HandleTypeDef *hgpu2d)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
            the HAL_GPU2D_ErrorCallback can be implemented in the user file.
            The default implementation stops the execution as an error is considered
            fatal and non recoverable.
   */

  for (;;)
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <HAL_GPU2D_ErrorCallback+0x8>

0800642a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e08d      	b.n	8006558 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7fb ff8b 	bl	800236c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2224      	movs	r2, #36	@ 0x24
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 0201 	bic.w	r2, r2, #1
 800646c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800647a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800648a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d107      	bne.n	80064a4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a0:	609a      	str	r2, [r3, #8]
 80064a2:	e006      	b.n	80064b2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80064b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d108      	bne.n	80064cc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	e007      	b.n	80064dc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064da:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6812      	ldr	r2, [r2, #0]
 80064e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68da      	ldr	r2, [r3, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69d9      	ldr	r1, [r3, #28]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1a      	ldr	r2, [r3, #32]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b20      	cmp	r3, #32
 8006574:	d138      	bne.n	80065e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800657c:	2b01      	cmp	r3, #1
 800657e:	d101      	bne.n	8006584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006580:	2302      	movs	r3, #2
 8006582:	e032      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	@ 0x24
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6819      	ldr	r1, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	e000      	b.n	80065ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80065e8:	2302      	movs	r3, #2
  }
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b085      	sub	sp, #20
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b20      	cmp	r3, #32
 800660a:	d139      	bne.n	8006680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006616:	2302      	movs	r3, #2
 8006618:	e033      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2224      	movs	r2, #36	@ 0x24
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0201 	bic.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800669c:	4b0b      	ldr	r3, [pc, #44]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
 80066ac:	e007      	b.n	80066be <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80066ae:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 0204 	bic.w	r2, r3, #4
 80066b6:	4905      	ldr	r1, [pc, #20]	@ (80066cc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80066be:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40030400 	.word	0x40030400

080066d0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80066d4:	4b05      	ldr	r3, [pc, #20]	@ (80066ec <HAL_ICACHE_Enable+0x1c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a04      	ldr	r2, [pc, #16]	@ (80066ec <HAL_ICACHE_Enable+0x1c>)
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	40030400 	.word	0x40030400

080066f0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e0bf      	b.n	8006882 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fb ff98 	bl	800264c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006732:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685a      	ldr	r2, [r3, #4]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006748:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6899      	ldr	r1, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b4a      	ldr	r3, [pc, #296]	@ (800688c <HAL_LTDC_Init+0x19c>)
 8006764:	400b      	ands	r3, r1
 8006766:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6899      	ldr	r1, [r3, #8]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	431a      	orrs	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68d9      	ldr	r1, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	4b3e      	ldr	r3, [pc, #248]	@ (800688c <HAL_LTDC_Init+0x19c>)
 8006792:	400b      	ands	r3, r1
 8006794:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68d9      	ldr	r1, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1a      	ldr	r2, [r3, #32]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6919      	ldr	r1, [r3, #16]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b33      	ldr	r3, [pc, #204]	@ (800688c <HAL_LTDC_Init+0x19c>)
 80067c0:	400b      	ands	r3, r1
 80067c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	041b      	lsls	r3, r3, #16
 80067ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6919      	ldr	r1, [r3, #16]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6959      	ldr	r1, [r3, #20]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	4b27      	ldr	r3, [pc, #156]	@ (800688c <HAL_LTDC_Init+0x19c>)
 80067ee:	400b      	ands	r3, r1
 80067f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6959      	ldr	r1, [r3, #20]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006820:	041b      	lsls	r3, r3, #16
 8006822:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0206 	orr.w	r2, r2, #6
 800685e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	f000f800 	.word	0xf000f800

08006890 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006890:	b5b0      	push	{r4, r5, r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_LTDC_ConfigLayer+0x1a>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e02c      	b.n	8006904 <HAL_LTDC_ConfigLayer+0x74>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2202      	movs	r2, #2
 80068b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2134      	movs	r1, #52	@ 0x34
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4614      	mov	r4, r2
 80068ce:	461d      	mov	r5, r3
 80068d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 f811 	bl	800690c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2201      	movs	r2, #1
 80068f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bdb0      	pop	{r4, r5, r7, pc}

0800690c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800690c:	b480      	push	{r7}
 800690e:	b089      	sub	sp, #36	@ 0x24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	0c1b      	lsrs	r3, r3, #16
 8006924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006928:	4413      	add	r3, r2
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	01db      	lsls	r3, r3, #7
 8006938:	4413      	add	r3, r2
 800693a:	3384      	adds	r3, #132	@ 0x84
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	4611      	mov	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	01d2      	lsls	r2, r2, #7
 8006948:	440a      	add	r2, r1
 800694a:	3284      	adds	r2, #132	@ 0x84
 800694c:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 8006950:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	0c1b      	lsrs	r3, r3, #16
 800695e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006962:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006964:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4619      	mov	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	440b      	add	r3, r1
 8006972:	3384      	adds	r3, #132	@ 0x84
 8006974:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800697a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800698a:	4413      	add	r3, r2
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	01db      	lsls	r3, r3, #7
 800699a:	4413      	add	r3, r2
 800699c:	3384      	adds	r3, #132	@ 0x84
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	6812      	ldr	r2, [r2, #0]
 80069a4:	4611      	mov	r1, r2
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	01d2      	lsls	r2, r2, #7
 80069aa:	440a      	add	r2, r1
 80069ac:	3284      	adds	r2, #132	@ 0x84
 80069ae:	f003 23f0 	and.w	r3, r3, #4026593280	@ 0xf000f000
 80069b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	689a      	ldr	r2, [r3, #8]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069c2:	4413      	add	r3, r2
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4619      	mov	r1, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	01db      	lsls	r3, r3, #7
 80069d0:	440b      	add	r3, r1
 80069d2:	3384      	adds	r3, #132	@ 0x84
 80069d4:	4619      	mov	r1, r3
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4313      	orrs	r3, r2
 80069da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	01db      	lsls	r3, r3, #7
 80069e6:	4413      	add	r3, r2
 80069e8:	3384      	adds	r3, #132	@ 0x84
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	4611      	mov	r1, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	01d2      	lsls	r2, r2, #7
 80069f6:	440a      	add	r2, r1
 80069f8:	3284      	adds	r2, #132	@ 0x84
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	461a      	mov	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	01db      	lsls	r3, r3, #7
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3384      	adds	r3, #132	@ 0x84
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a26:	041b      	lsls	r3, r3, #16
 8006a28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a38:	461a      	mov	r2, r3
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	431a      	orrs	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	01db      	lsls	r3, r3, #7
 8006a4c:	440b      	add	r3, r1
 8006a4e:	3384      	adds	r3, #132	@ 0x84
 8006a50:	4619      	mov	r1, r3
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	01db      	lsls	r3, r3, #7
 8006a62:	4413      	add	r3, r2
 8006a64:	3384      	adds	r3, #132	@ 0x84
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	6812      	ldr	r2, [r2, #0]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	01d2      	lsls	r2, r2, #7
 8006a72:	440a      	add	r2, r1
 8006a74:	3284      	adds	r2, #132	@ 0x84
 8006a76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a7a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	01db      	lsls	r3, r3, #7
 8006a86:	4413      	add	r3, r2
 8006a88:	3384      	adds	r3, #132	@ 0x84
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	01db      	lsls	r3, r3, #7
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3384      	adds	r3, #132	@ 0x84
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	01d2      	lsls	r2, r2, #7
 8006aac:	440a      	add	r2, r1
 8006aae:	3284      	adds	r2, #132	@ 0x84
 8006ab0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006ab4:	f023 0307 	bic.w	r3, r3, #7
 8006ab8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	69da      	ldr	r2, [r3, #28]
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	6809      	ldr	r1, [r1, #0]
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	01c9      	lsls	r1, r1, #7
 8006acc:	4401      	add	r1, r0
 8006ace:	3184      	adds	r1, #132	@ 0x84
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	01db      	lsls	r3, r3, #7
 8006ade:	4413      	add	r3, r2
 8006ae0:	3384      	adds	r3, #132	@ 0x84
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <LTDC_SetConfig+0x1ec>
  {
    tmp = 4U;
 8006af2:	2304      	movs	r3, #4
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	e01b      	b.n	8006b30 <LTDC_SetConfig+0x224>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d102      	bne.n	8006b06 <LTDC_SetConfig+0x1fa>
  {
    tmp = 3U;
 8006b00:	2303      	movs	r3, #3
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	e014      	b.n	8006b30 <LTDC_SetConfig+0x224>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d00b      	beq.n	8006b26 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d007      	beq.n	8006b26 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d003      	beq.n	8006b26 <LTDC_SetConfig+0x21a>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b22:	2b07      	cmp	r3, #7
 8006b24:	d102      	bne.n	8006b2c <LTDC_SetConfig+0x220>
  {
    tmp = 2U;
 8006b26:	2302      	movs	r3, #2
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	e001      	b.n	8006b30 <LTDC_SetConfig+0x224>
  }
  else
  {
    tmp = 1U;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	01db      	lsls	r3, r3, #7
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3384      	adds	r3, #132	@ 0x84
 8006b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	4611      	mov	r1, r2
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	01d2      	lsls	r2, r2, #7
 8006b4a:	440a      	add	r2, r1
 8006b4c:	3284      	adds	r2, #132	@ 0x84
 8006b4e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006b52:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	fb02 f303 	mul.w	r3, r2, r3
 8006b5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6859      	ldr	r1, [r3, #4]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	1acb      	subs	r3, r1, r3
 8006b6a:	69f9      	ldr	r1, [r7, #28]
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b72:	68f9      	ldr	r1, [r7, #12]
 8006b74:	6809      	ldr	r1, [r1, #0]
 8006b76:	4608      	mov	r0, r1
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	01c9      	lsls	r1, r1, #7
 8006b7c:	4401      	add	r1, r0
 8006b7e:	3184      	adds	r1, #132	@ 0x84
 8006b80:	4313      	orrs	r3, r2
 8006b82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	01db      	lsls	r3, r3, #7
 8006b8e:	4413      	add	r3, r2
 8006b90:	3384      	adds	r3, #132	@ 0x84
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	6812      	ldr	r2, [r2, #0]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	01d2      	lsls	r2, r2, #7
 8006b9e:	440a      	add	r2, r1
 8006ba0:	3284      	adds	r2, #132	@ 0x84
 8006ba2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ba6:	f023 0307 	bic.w	r3, r3, #7
 8006baa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	01db      	lsls	r3, r3, #7
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3384      	adds	r3, #132	@ 0x84
 8006bba:	461a      	mov	r2, r3
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	01db      	lsls	r3, r3, #7
 8006bcc:	4413      	add	r3, r2
 8006bce:	3384      	adds	r3, #132	@ 0x84
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	6812      	ldr	r2, [r2, #0]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	01d2      	lsls	r2, r2, #7
 8006bdc:	440a      	add	r2, r1
 8006bde:	3284      	adds	r2, #132	@ 0x84
 8006be0:	f043 0301 	orr.w	r3, r3, #1
 8006be4:	6013      	str	r3, [r2, #0]
}
 8006be6:	bf00      	nop
 8006be8:	3724      	adds	r7, #36	@ 0x24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	601a      	str	r2, [r3, #0]
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
	...

08006c14 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af02      	add	r7, sp, #8
 8006c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006c20:	f7fc fd66 	bl	80036f0 <HAL_GetTick>
 8006c24:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e0a5      	b.n	8006d7e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f040 809e 	bne.w	8006d7e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb fdf0 	bl	8002828 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006c48:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f912 	bl	8006e76 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689a      	ldr	r2, [r3, #8]
 8006c58:	4b4b      	ldr	r3, [pc, #300]	@ (8006d88 <HAL_OSPI_Init+0x174>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68d1      	ldr	r1, [r2, #12]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6912      	ldr	r2, [r2, #16]
 8006c64:	3a01      	subs	r2, #1
 8006c66:	0412      	lsls	r2, r2, #16
 8006c68:	4311      	orrs	r1, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6952      	ldr	r2, [r2, #20]
 8006c6e:	3a01      	subs	r2, #1
 8006c70:	0212      	lsls	r2, r2, #8
 8006c72:	4311      	orrs	r1, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	69d2      	ldr	r2, [r2, #28]
 8006c7e:	4311      	orrs	r1, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6812      	ldr	r2, [r2, #0]
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ca2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006cb8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	2120      	movs	r1, #32
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fdcd 	bl	8007880 <OSPI_WaitFlagStateUntilTimeout>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d146      	bne.n	8006d7e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689a      	ldr	r2, [r3, #8]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d26:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d107      	bne.n	8006d66 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0202 	orr.w	r2, r2, #2
 8006d64:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006d6e:	d103      	bne.n	8006d78 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d76:	e002      	b.n	8006d7e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	f8e0c0f4 	.word	0xf8e0c0f4

08006d8c <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af02      	add	r7, sp, #8
 8006d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006d98:	f7fc fcaa 	bl	80036f0 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da2:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0308 	and.w	r3, r3, #8
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <HAL_OSPI_Abort+0x2c>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d052      	beq.n	8006e5e <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d014      	beq.n	8006df0 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0204 	bic.w	r2, r2, #4
 8006dd4:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fc9b 	bl	8005716 <HAL_DMA_Abort>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2204      	movs	r2, #4
 8006dee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02b      	beq.n	8006e56 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0202 	orr.w	r2, r2, #2
 8006e0c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2201      	movs	r2, #1
 8006e18:	2102      	movs	r1, #2
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fd30 	bl	8007880 <OSPI_WaitFlagStateUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11f      	bne.n	8006e6a <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	2120      	movs	r1, #32
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fd1e 	bl	8007880 <OSPI_WaitFlagStateUntilTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10d      	bne.n	8006e6a <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2202      	movs	r2, #2
 8006e52:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e54:	e009      	b.n	8006e6a <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e5c:	e005      	b.n	8006e6a <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2210      	movs	r2, #16
 8006e66:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e68:	e000      	b.n	8006e6c <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8006e6a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b094      	sub	sp, #80	@ 0x50
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a9d      	ldr	r2, [pc, #628]	@ (8007128 <HAL_OSPIM_Config+0x294>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d105      	bne.n	8006ec2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006ec0:	e004      	b.n	8006ecc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006ed2:	e01d      	b.n	8006f10 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b2d8      	uxtb	r0, r3
 8006edc:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006ee0:	f107 0114 	add.w	r1, r7, #20
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	440b      	add	r3, r1
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f000 fd06 	bl	8007900 <OSPIM_GetConfig>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d005      	beq.n	8006f06 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2208      	movs	r2, #8
 8006f04:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006f06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006f10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d9dd      	bls.n	8006ed4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006f18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 84a2 	bne.w	8007866 <HAL_OSPIM_Config+0x9d2>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006f22:	4b81      	ldr	r3, [pc, #516]	@ (8007128 <HAL_OSPIM_Config+0x294>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00b      	beq.n	8006f46 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006f2e:	4b7e      	ldr	r3, [pc, #504]	@ (8007128 <HAL_OSPIM_Config+0x294>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a7d      	ldr	r2, [pc, #500]	@ (8007128 <HAL_OSPIM_Config+0x294>)
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006f3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006f3e:	f043 0301 	orr.w	r3, r3, #1
 8006f42:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006f46:	4b79      	ldr	r3, [pc, #484]	@ (800712c <HAL_OSPIM_Config+0x298>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006f52:	4b76      	ldr	r3, [pc, #472]	@ (800712c <HAL_OSPIM_Config+0x298>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a75      	ldr	r2, [pc, #468]	@ (800712c <HAL_OSPIM_Config+0x298>)
 8006f58:	f023 0301 	bic.w	r3, r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006f5e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006f62:	f043 0302 	orr.w	r3, r3, #2
 8006f66:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006f6a:	4971      	ldr	r1, [pc, #452]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	3350      	adds	r3, #80	@ 0x50
 8006f78:	443b      	add	r3, r7
 8006f7a:	3b34      	subs	r3, #52	@ 0x34
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	6859      	ldr	r1, [r3, #4]
 8006f86:	486a      	ldr	r0, [pc, #424]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006f88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	3350      	adds	r3, #80	@ 0x50
 8006f94:	443b      	add	r3, r7
 8006f96:	3b34      	subs	r3, #52	@ 0x34
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4403      	add	r3, r0
 8006fa4:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006fa6:	4b62      	ldr	r3, [pc, #392]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f000 80c0 	beq.w	8007134 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006fb4:	4b5e      	ldr	r3, [pc, #376]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a5d      	ldr	r2, [pc, #372]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006fba:	f023 0301 	bic.w	r3, r3, #1
 8006fbe:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006fc0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	f040 8162 	bne.w	800728e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006fca:	4959      	ldr	r1, [pc, #356]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006fcc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	4413      	add	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	3350      	adds	r3, #80	@ 0x50
 8006fda:	443b      	add	r3, r7
 8006fdc:	3b3c      	subs	r3, #60	@ 0x3c
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	6859      	ldr	r1, [r3, #4]
 8006fe8:	4851      	ldr	r0, [pc, #324]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8006fea:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fee:	4613      	mov	r3, r2
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	4413      	add	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	3350      	adds	r3, #80	@ 0x50
 8006ff8:	443b      	add	r3, r7
 8006ffa:	3b3c      	subs	r3, #60	@ 0x3c
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	f041 0202 	orr.w	r2, r1, #2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4403      	add	r3, r0
 8007008:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800700a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800700e:	4613      	mov	r3, r2
 8007010:	005b      	lsls	r3, r3, #1
 8007012:	4413      	add	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	3350      	adds	r3, #80	@ 0x50
 8007018:	443b      	add	r3, r7
 800701a:	3b38      	subs	r3, #56	@ 0x38
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01f      	beq.n	8007062 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8007022:	4943      	ldr	r1, [pc, #268]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8007024:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007028:	4613      	mov	r3, r2
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	4413      	add	r3, r2
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	3350      	adds	r3, #80	@ 0x50
 8007032:	443b      	add	r3, r7
 8007034:	3b38      	subs	r3, #56	@ 0x38
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3b01      	subs	r3, #1
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	440b      	add	r3, r1
 800703e:	6859      	ldr	r1, [r3, #4]
 8007040:	483b      	ldr	r0, [pc, #236]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8007042:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007046:	4613      	mov	r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	3350      	adds	r3, #80	@ 0x50
 8007050:	443b      	add	r3, r7
 8007052:	3b38      	subs	r3, #56	@ 0x38
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3b01      	subs	r3, #1
 8007058:	f041 0220 	orr.w	r2, r1, #32
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4403      	add	r3, r0
 8007060:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007062:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007066:	4613      	mov	r3, r2
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	4413      	add	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	3350      	adds	r3, #80	@ 0x50
 8007070:	443b      	add	r3, r7
 8007072:	3b30      	subs	r3, #48	@ 0x30
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d023      	beq.n	80070c2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 800707a:	492d      	ldr	r1, [pc, #180]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 800707c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007080:	4613      	mov	r3, r2
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	4413      	add	r3, r2
 8007086:	00db      	lsls	r3, r3, #3
 8007088:	3350      	adds	r3, #80	@ 0x50
 800708a:	443b      	add	r3, r7
 800708c:	3b30      	subs	r3, #48	@ 0x30
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	440b      	add	r3, r1
 800709a:	6859      	ldr	r1, [r3, #4]
 800709c:	4824      	ldr	r0, [pc, #144]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 800709e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	3350      	adds	r3, #80	@ 0x50
 80070ac:	443b      	add	r3, r7
 80070ae:	3b30      	subs	r3, #48	@ 0x30
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f003 0301 	and.w	r3, r3, #1
 80070b8:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4403      	add	r3, r0
 80070c0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80070c2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	3350      	adds	r3, #80	@ 0x50
 80070d0:	443b      	add	r3, r7
 80070d2:	3b2c      	subs	r3, #44	@ 0x2c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80d9 	beq.w	800728e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80070dc:	4914      	ldr	r1, [pc, #80]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 80070de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070e2:	4613      	mov	r3, r2
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	3350      	adds	r3, #80	@ 0x50
 80070ec:	443b      	add	r3, r7
 80070ee:	3b2c      	subs	r3, #44	@ 0x2c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	440b      	add	r3, r1
 80070fc:	6859      	ldr	r1, [r3, #4]
 80070fe:	480c      	ldr	r0, [pc, #48]	@ (8007130 <HAL_OSPIM_Config+0x29c>)
 8007100:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007104:	4613      	mov	r3, r2
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	4413      	add	r3, r2
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	3350      	adds	r3, #80	@ 0x50
 800710e:	443b      	add	r3, r7
 8007110:	3b2c      	subs	r3, #44	@ 0x2c
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3b01      	subs	r3, #1
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4403      	add	r3, r0
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	e0b3      	b.n	800728e <HAL_OSPIM_Config+0x3fa>
 8007126:	bf00      	nop
 8007128:	420d1400 	.word	0x420d1400
 800712c:	420d2400 	.word	0x420d2400
 8007130:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007136:	4613      	mov	r3, r2
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	3350      	adds	r3, #80	@ 0x50
 8007140:	443b      	add	r3, r7
 8007142:	3b3c      	subs	r3, #60	@ 0x3c
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 80a1 	beq.w	800728e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800714c:	4995      	ldr	r1, [pc, #596]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 800714e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007150:	4613      	mov	r3, r2
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	4413      	add	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	3350      	adds	r3, #80	@ 0x50
 800715a:	443b      	add	r3, r7
 800715c:	3b3c      	subs	r3, #60	@ 0x3c
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3b01      	subs	r3, #1
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	488e      	ldr	r0, [pc, #568]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 800716a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800716c:	4613      	mov	r3, r2
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	4413      	add	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	3350      	adds	r3, #80	@ 0x50
 8007176:	443b      	add	r3, r7
 8007178:	3b3c      	subs	r3, #60	@ 0x3c
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	f021 0201 	bic.w	r2, r1, #1
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4403      	add	r3, r0
 8007186:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718a:	4613      	mov	r3, r2
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	4413      	add	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	3350      	adds	r3, #80	@ 0x50
 8007194:	443b      	add	r3, r7
 8007196:	3b38      	subs	r3, #56	@ 0x38
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d01d      	beq.n	80071da <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800719e:	4981      	ldr	r1, [pc, #516]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 80071a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	3350      	adds	r3, #80	@ 0x50
 80071ac:	443b      	add	r3, r7
 80071ae:	3b38      	subs	r3, #56	@ 0x38
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3b01      	subs	r3, #1
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	6859      	ldr	r1, [r3, #4]
 80071ba:	487a      	ldr	r0, [pc, #488]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 80071bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071be:	4613      	mov	r3, r2
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	4413      	add	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	3350      	adds	r3, #80	@ 0x50
 80071c8:	443b      	add	r3, r7
 80071ca:	3b38      	subs	r3, #56	@ 0x38
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	f021 0210 	bic.w	r2, r1, #16
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4403      	add	r3, r0
 80071d8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80071da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071dc:	4613      	mov	r3, r2
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	4413      	add	r3, r2
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	3350      	adds	r3, #80	@ 0x50
 80071e6:	443b      	add	r3, r7
 80071e8:	3b30      	subs	r3, #48	@ 0x30
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d021      	beq.n	8007234 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80071f0:	496c      	ldr	r1, [pc, #432]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 80071f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071f4:	4613      	mov	r3, r2
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	3350      	adds	r3, #80	@ 0x50
 80071fe:	443b      	add	r3, r7
 8007200:	3b30      	subs	r3, #48	@ 0x30
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3b01      	subs	r3, #1
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	6859      	ldr	r1, [r3, #4]
 8007210:	4864      	ldr	r0, [pc, #400]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 8007212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007214:	4613      	mov	r3, r2
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	4413      	add	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	3350      	adds	r3, #80	@ 0x50
 800721e:	443b      	add	r3, r7
 8007220:	3b30      	subs	r3, #48	@ 0x30
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3b01      	subs	r3, #1
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4403      	add	r3, r0
 8007232:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007234:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007236:	4613      	mov	r3, r2
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	4413      	add	r3, r2
 800723c:	00db      	lsls	r3, r3, #3
 800723e:	3350      	adds	r3, #80	@ 0x50
 8007240:	443b      	add	r3, r7
 8007242:	3b2c      	subs	r3, #44	@ 0x2c
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d021      	beq.n	800728e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800724a:	4956      	ldr	r1, [pc, #344]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 800724c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724e:	4613      	mov	r3, r2
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4413      	add	r3, r2
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	3350      	adds	r3, #80	@ 0x50
 8007258:	443b      	add	r3, r7
 800725a:	3b2c      	subs	r3, #44	@ 0x2c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	6859      	ldr	r1, [r3, #4]
 800726a:	484e      	ldr	r0, [pc, #312]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 800726c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800726e:	4613      	mov	r3, r2
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	4413      	add	r3, r2
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	3350      	adds	r3, #80	@ 0x50
 8007278:	443b      	add	r3, r7
 800727a:	3b2c      	subs	r3, #44	@ 0x2c
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3b01      	subs	r3, #1
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4403      	add	r3, r0
 800728c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	6819      	ldr	r1, [r3, #0]
 8007292:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	3350      	adds	r3, #80	@ 0x50
 80072a0:	443b      	add	r3, r7
 80072a2:	3b3c      	subs	r3, #60	@ 0x3c
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d03c      	beq.n	8007324 <HAL_OSPIM_Config+0x490>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6899      	ldr	r1, [r3, #8]
 80072ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072b2:	4613      	mov	r3, r2
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	3350      	adds	r3, #80	@ 0x50
 80072bc:	443b      	add	r3, r7
 80072be:	3b34      	subs	r3, #52	@ 0x34
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4299      	cmp	r1, r3
 80072c4:	d02e      	beq.n	8007324 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	6859      	ldr	r1, [r3, #4]
 80072ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072ce:	4613      	mov	r3, r2
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	4413      	add	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	3350      	adds	r3, #80	@ 0x50
 80072d8:	443b      	add	r3, r7
 80072da:	3b38      	subs	r3, #56	@ 0x38
 80072dc:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80072de:	4299      	cmp	r1, r3
 80072e0:	d103      	bne.n	80072ea <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d11c      	bne.n	8007324 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	68d9      	ldr	r1, [r3, #12]
 80072ee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072f2:	4613      	mov	r3, r2
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	4413      	add	r3, r2
 80072f8:	00db      	lsls	r3, r3, #3
 80072fa:	3350      	adds	r3, #80	@ 0x50
 80072fc:	443b      	add	r3, r7
 80072fe:	3b30      	subs	r3, #48	@ 0x30
 8007300:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 8007302:	4299      	cmp	r1, r3
 8007304:	d00e      	beq.n	8007324 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6919      	ldr	r1, [r3, #16]
 800730a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	00db      	lsls	r3, r3, #3
 8007316:	3350      	adds	r3, #80	@ 0x50
 8007318:	443b      	add	r3, r7
 800731a:	3b2c      	subs	r3, #44	@ 0x2c
 800731c:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800731e:	4299      	cmp	r1, r3
 8007320:	f040 810e 	bne.w	8007540 <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	6819      	ldr	r1, [r3, #0]
 8007328:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800732c:	4613      	mov	r3, r2
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	3350      	adds	r3, #80	@ 0x50
 8007336:	443b      	add	r3, r7
 8007338:	3b3c      	subs	r3, #60	@ 0x3c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4299      	cmp	r1, r3
 800733e:	d133      	bne.n	80073a8 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007348:	4613      	mov	r3, r2
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	4413      	add	r3, r2
 800734e:	00db      	lsls	r3, r3, #3
 8007350:	3350      	adds	r3, #80	@ 0x50
 8007352:	443b      	add	r3, r7
 8007354:	3b38      	subs	r3, #56	@ 0x38
 8007356:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007358:	4299      	cmp	r1, r3
 800735a:	d125      	bne.n	80073a8 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68d9      	ldr	r1, [r3, #12]
 8007360:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	3350      	adds	r3, #80	@ 0x50
 800736e:	443b      	add	r3, r7
 8007370:	3b30      	subs	r3, #48	@ 0x30
 8007372:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007374:	4299      	cmp	r1, r3
 8007376:	d117      	bne.n	80073a8 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6919      	ldr	r1, [r3, #16]
 800737c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	3350      	adds	r3, #80	@ 0x50
 800738a:	443b      	add	r3, r7
 800738c:	3b2c      	subs	r3, #44	@ 0x2c
 800738e:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007390:	4299      	cmp	r1, r3
 8007392:	d109      	bne.n	80073a8 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007394:	4b03      	ldr	r3, [pc, #12]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a02      	ldr	r2, [pc, #8]	@ (80073a4 <HAL_OSPIM_Config+0x510>)
 800739a:	f043 0301 	orr.w	r3, r3, #1
 800739e:	6013      	str	r3, [r2, #0]
 80073a0:	e0ce      	b.n	8007540 <HAL_OSPIM_Config+0x6ac>
 80073a2:	bf00      	nop
 80073a4:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80073a8:	49a4      	ldr	r1, [pc, #656]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80073aa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073ae:	4613      	mov	r3, r2
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	3350      	adds	r3, #80	@ 0x50
 80073b8:	443b      	add	r3, r7
 80073ba:	3b3c      	subs	r3, #60	@ 0x3c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3b01      	subs	r3, #1
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	489d      	ldr	r0, [pc, #628]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80073c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	3350      	adds	r3, #80	@ 0x50
 80073d6:	443b      	add	r3, r7
 80073d8:	3b3c      	subs	r3, #60	@ 0x3c
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	f021 0201 	bic.w	r2, r1, #1
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4403      	add	r3, r0
 80073e6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80073e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073ec:	4613      	mov	r3, r2
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	4413      	add	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	3350      	adds	r3, #80	@ 0x50
 80073f6:	443b      	add	r3, r7
 80073f8:	3b38      	subs	r3, #56	@ 0x38
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01f      	beq.n	8007440 <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007400:	498e      	ldr	r1, [pc, #568]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007402:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007406:	4613      	mov	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4413      	add	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	3350      	adds	r3, #80	@ 0x50
 8007410:	443b      	add	r3, r7
 8007412:	3b38      	subs	r3, #56	@ 0x38
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3b01      	subs	r3, #1
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	440b      	add	r3, r1
 800741c:	6859      	ldr	r1, [r3, #4]
 800741e:	4887      	ldr	r0, [pc, #540]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007420:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007424:	4613      	mov	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	3350      	adds	r3, #80	@ 0x50
 800742e:	443b      	add	r3, r7
 8007430:	3b38      	subs	r3, #56	@ 0x38
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3b01      	subs	r3, #1
 8007436:	f021 0210 	bic.w	r2, r1, #16
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4403      	add	r3, r0
 800743e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007440:	497e      	ldr	r1, [pc, #504]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007442:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007446:	4613      	mov	r3, r2
 8007448:	005b      	lsls	r3, r3, #1
 800744a:	4413      	add	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	3350      	adds	r3, #80	@ 0x50
 8007450:	443b      	add	r3, r7
 8007452:	3b34      	subs	r3, #52	@ 0x34
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3b01      	subs	r3, #1
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	440b      	add	r3, r1
 800745c:	6859      	ldr	r1, [r3, #4]
 800745e:	4877      	ldr	r0, [pc, #476]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007460:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007464:	4613      	mov	r3, r2
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	4413      	add	r3, r2
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	3350      	adds	r3, #80	@ 0x50
 800746e:	443b      	add	r3, r7
 8007470:	3b34      	subs	r3, #52	@ 0x34
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3b01      	subs	r3, #1
 8007476:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4403      	add	r3, r0
 800747e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007480:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007484:	4613      	mov	r3, r2
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4413      	add	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3350      	adds	r3, #80	@ 0x50
 800748e:	443b      	add	r3, r7
 8007490:	3b30      	subs	r3, #48	@ 0x30
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d023      	beq.n	80074e0 <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007498:	4968      	ldr	r1, [pc, #416]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 800749a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800749e:	4613      	mov	r3, r2
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	4413      	add	r3, r2
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	3350      	adds	r3, #80	@ 0x50
 80074a8:	443b      	add	r3, r7
 80074aa:	3b30      	subs	r3, #48	@ 0x30
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	4860      	ldr	r0, [pc, #384]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80074bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074c0:	4613      	mov	r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4413      	add	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	3350      	adds	r3, #80	@ 0x50
 80074ca:	443b      	add	r3, r7
 80074cc:	3b30      	subs	r3, #48	@ 0x30
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4403      	add	r3, r0
 80074de:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80074e0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074e4:	4613      	mov	r3, r2
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4413      	add	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	3350      	adds	r3, #80	@ 0x50
 80074ee:	443b      	add	r3, r7
 80074f0:	3b2c      	subs	r3, #44	@ 0x2c
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d023      	beq.n	8007540 <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074f8:	4950      	ldr	r1, [pc, #320]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80074fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80074fe:	4613      	mov	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4413      	add	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	3350      	adds	r3, #80	@ 0x50
 8007508:	443b      	add	r3, r7
 800750a:	3b2c      	subs	r3, #44	@ 0x2c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3b01      	subs	r3, #1
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	4848      	ldr	r0, [pc, #288]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 800751c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007520:	4613      	mov	r3, r2
 8007522:	005b      	lsls	r3, r3, #1
 8007524:	4413      	add	r3, r2
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	3350      	adds	r3, #80	@ 0x50
 800752a:	443b      	add	r3, r7
 800752c:	3b2c      	subs	r3, #44	@ 0x2c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3b01      	subs	r3, #1
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4403      	add	r3, r0
 800753e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8007540:	4a3e      	ldr	r2, [pc, #248]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	3b01      	subs	r3, #1
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007554:	025b      	lsls	r3, r3, #9
 8007556:	431a      	orrs	r2, r3
 8007558:	4938      	ldr	r1, [pc, #224]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	3b01      	subs	r3, #1
 8007560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	440b      	add	r3, r1
 8007568:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d018      	beq.n	80075a4 <HAL_OSPIM_Config+0x710>
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800757a:	d813      	bhi.n	80075a4 <HAL_OSPIM_Config+0x710>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	1e5a      	subs	r2, r3, #1
 8007582:	4b2e      	ldr	r3, [pc, #184]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	0c1b      	lsrs	r3, r3, #16
 8007588:	b2db      	uxtb	r3, r3
 800758a:	429a      	cmp	r2, r3
 800758c:	d90a      	bls.n	80075a4 <HAL_OSPIM_Config+0x710>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800758e:	4b2b      	ldr	r3, [pc, #172]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	3b01      	subs	r3, #1
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	4927      	ldr	r1, [pc, #156]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80075a4:	4b25      	ldr	r3, [pc, #148]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 809a 	beq.w	80076e6 <HAL_OSPIM_Config+0x852>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80075b2:	4a22      	ldr	r2, [pc, #136]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f023 0203 	bic.w	r2, r3, #3
 80075c4:	491d      	ldr	r1, [pc, #116]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	f042 0201 	orr.w	r2, r2, #1
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d011      	beq.n	8007602 <HAL_OSPIM_Config+0x76e>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80075de:	4a17      	ldr	r2, [pc, #92]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075f0:	4912      	ldr	r1, [pc, #72]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	f042 0210 	orr.w	r2, r2, #16
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	440b      	add	r3, r1
 8007600:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d018      	beq.n	8007640 <HAL_OSPIM_Config+0x7ac>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800760e:	4a0b      	ldr	r2, [pc, #44]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	3b01      	subs	r3, #1
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007624:	4905      	ldr	r1, [pc, #20]	@ (800763c <HAL_OSPIM_Config+0x7a8>)
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	3b01      	subs	r3, #1
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	440b      	add	r3, r1
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	e01b      	b.n	8007674 <HAL_OSPIM_Config+0x7e0>
 800763c:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d015      	beq.n	8007674 <HAL_OSPIM_Config+0x7e0>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007648:	4a8a      	ldr	r2, [pc, #552]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800765e:	4985      	ldr	r1, [pc, #532]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	3b01      	subs	r3, #1
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d016      	beq.n	80076ae <HAL_OSPIM_Config+0x81a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007680:	4a7c      	ldr	r2, [pc, #496]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	3b01      	subs	r3, #1
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007696:	4977      	ldr	r1, [pc, #476]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	440b      	add	r3, r1
 80076aa:	605a      	str	r2, [r3, #4]
 80076ac:	e0c3      	b.n	8007836 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 80bf 	beq.w	8007836 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80076b8:	4a6e      	ldr	r2, [pc, #440]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	3b01      	subs	r3, #1
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80076ce:	4969      	ldr	r1, [pc, #420]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80076de:	009b      	lsls	r3, r3, #2
 80076e0:	440b      	add	r3, r1
 80076e2:	605a      	str	r2, [r3, #4]
 80076e4:	e0a7      	b.n	8007836 <HAL_OSPIM_Config+0x9a2>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80076e6:	4a63      	ldr	r2, [pc, #396]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3b01      	subs	r3, #1
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f023 0203 	bic.w	r2, r3, #3
 80076f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	431a      	orrs	r2, r3
 80076fe:	495d      	ldr	r1, [pc, #372]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3b01      	subs	r3, #1
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	440b      	add	r3, r1
 800770e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d014      	beq.n	8007742 <HAL_OSPIM_Config+0x8ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007718:	4a56      	ldr	r2, [pc, #344]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	3b01      	subs	r3, #1
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800772a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800772c:	015b      	lsls	r3, r3, #5
 800772e:	431a      	orrs	r2, r3
 8007730:	4950      	ldr	r1, [pc, #320]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	3b01      	subs	r3, #1
 8007738:	f042 0210 	orr.w	r2, r2, #16
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d019      	beq.n	8007782 <HAL_OSPIM_Config+0x8ee>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800774e:	4a49      	ldr	r2, [pc, #292]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	3b01      	subs	r3, #1
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007766:	049b      	lsls	r3, r3, #18
 8007768:	431a      	orrs	r2, r3
 800776a:	4942      	ldr	r1, [pc, #264]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	3b01      	subs	r3, #1
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	605a      	str	r2, [r3, #4]
 8007780:	e01c      	b.n	80077bc <HAL_OSPIM_Config+0x928>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d018      	beq.n	80077bc <HAL_OSPIM_Config+0x928>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800778a:	4a3a      	ldr	r2, [pc, #232]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	3b01      	subs	r3, #1
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80077a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077a2:	069b      	lsls	r3, r3, #26
 80077a4:	431a      	orrs	r2, r3
 80077a6:	4933      	ldr	r1, [pc, #204]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d019      	beq.n	80077fc <HAL_OSPIM_Config+0x968>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80077c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	f003 0301 	and.w	r3, r3, #1
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4413      	add	r3, r2
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80077de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077e0:	049b      	lsls	r3, r3, #18
 80077e2:	431a      	orrs	r2, r3
 80077e4:	4923      	ldr	r1, [pc, #140]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	605a      	str	r2, [r3, #4]
 80077fa:	e01c      	b.n	8007836 <HAL_OSPIM_Config+0x9a2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d018      	beq.n	8007836 <HAL_OSPIM_Config+0x9a2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007804:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	3b01      	subs	r3, #1
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	069b      	lsls	r3, r3, #26
 800781e:	431a      	orrs	r2, r3
 8007820:	4914      	ldr	r1, [pc, #80]	@ (8007874 <HAL_OSPIM_Config+0x9e0>)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	3b01      	subs	r3, #1
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007836:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_OSPIM_Config+0x9ba>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <HAL_OSPIM_Config+0x9e4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a0c      	ldr	r2, [pc, #48]	@ (8007878 <HAL_OSPIM_Config+0x9e4>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800784e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_OSPIM_Config+0x9d2>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800785a:	4b08      	ldr	r3, [pc, #32]	@ (800787c <HAL_OSPIM_Config+0x9e8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a07      	ldr	r2, [pc, #28]	@ (800787c <HAL_OSPIM_Config+0x9e8>)
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007866:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800786a:	4618      	mov	r0, r3
 800786c:	3750      	adds	r7, #80	@ 0x50
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	420c4000 	.word	0x420c4000
 8007878:	420d1400 	.word	0x420d1400
 800787c:	420d2400 	.word	0x420d2400

08007880 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	4613      	mov	r3, r2
 800788e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007890:	e022      	b.n	80078d8 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007898:	d01e      	beq.n	80078d8 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789a:	f7fb ff29 	bl	80036f0 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d302      	bcc.n	80078b0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d113      	bne.n	80078d8 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6a1a      	ldr	r2, [r3, #32]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	401a      	ands	r2, r3
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d00b      	beq.n	80078d8 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078c6:	651a      	str	r2, [r3, #80]	@ 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078cc:	f043 0201 	orr.w	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	655a      	str	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e00e      	b.n	80078f6 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a1a      	ldr	r2, [r3, #32]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	bf14      	ite	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	2300      	moveq	r3, #0
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	461a      	mov	r2, r3
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d1ce      	bne.n	8007892 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <OSPIM_GetConfig+0x26>
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b02      	cmp	r3, #2
 800791e:	d802      	bhi.n	8007926 <OSPIM_GetConfig+0x26>
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
 800792a:	e098      	b.n	8007a5e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2200      	movs	r2, #0
 8007936:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2200      	movs	r2, #0
 8007942:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2200      	movs	r2, #0
 8007948:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d10b      	bne.n	8007968 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007950:	4b46      	ldr	r3, [pc, #280]	@ (8007a6c <OSPIM_GetConfig+0x16c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	d102      	bne.n	8007962 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800795c:	4b44      	ldr	r3, [pc, #272]	@ (8007a70 <OSPIM_GetConfig+0x170>)
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	e002      	b.n	8007968 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8007962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007966:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]
 800796c:	e074      	b.n	8007a58 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800796e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a6c <OSPIM_GetConfig+0x16c>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	4053      	eors	r3, r2
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d103      	bne.n	800799a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f003 0310 	and.w	r3, r3, #16
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00a      	beq.n	80079ba <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4053      	eors	r3, r2
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	4053      	eors	r3, r2
 80079ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d018      	beq.n	8007a16 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	4053      	eors	r3, r2
 80079ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d111      	bne.n	8007a16 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	60da      	str	r2, [r3, #12]
 8007a08:	e005      	b.n	8007a16 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4053      	eors	r3, r2
 8007a26:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d111      	bne.n	8007a52 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	611a      	str	r2, [r3, #16]
 8007a44:	e005      	b.n	8007a52 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d987      	bls.n	800796e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	420c4000 	.word	0x420c4000
 8007a70:	04040222 	.word	0x04040222

08007a74 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	689a      	ldr	r2, [r3, #8]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f042 0202 	orr.w	r2, r2, #2
 8007a90:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2208      	movs	r2, #8
 8007a96:	651a      	str	r2, [r3, #80]	@ 0x50

  if (hospi->Instance == OCTOSPI1)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a15      	ldr	r2, [pc, #84]	@ (8007af4 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d109      	bne.n	8007ab6 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8007aa2:	4815      	ldr	r0, [pc, #84]	@ (8007af8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007aa4:	f7ff f8a5 	bl	8006bf2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	4813      	ldr	r0, [pc, #76]	@ (8007af8 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8007aac:	f007 fdc0 	bl	800f630 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e00d      	b.n	8007ad2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a10      	ldr	r2, [pc, #64]	@ (8007afc <HAL_OSPI_DLYB_SetConfig+0x88>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8007ac0:	480f      	ldr	r0, [pc, #60]	@ (8007b00 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007ac2:	f7ff f896 	bl	8006bf2 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	480d      	ldr	r0, [pc, #52]	@ (8007b00 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8007aca:	f007 fdb1 	bl	800f630 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff f95a 	bl	8006d8c <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	689a      	ldr	r2, [r3, #8]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f022 0202 	bic.w	r2, r2, #2
 8007ae6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	420d1400 	.word	0x420d1400
 8007af8:	420cf000 	.word	0x420cf000
 8007afc:	420d2400 	.word	0x420d2400
 8007b00:	420cf400 	.word	0x420cf400

08007b04 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007b08:	4b05      	ldr	r3, [pc, #20]	@ (8007b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0c:	4a04      	ldr	r2, [pc, #16]	@ (8007b20 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b0e:	f043 0301 	orr.w	r3, r3, #1
 8007b12:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	46020800 	.word	0x46020800

08007b24 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8007b2c:	4b39      	ldr	r3, [pc, #228]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007b34:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d10b      	bne.n	8007b56 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b44:	d905      	bls.n	8007b52 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007b46:	4b33      	ldr	r3, [pc, #204]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	4a32      	ldr	r2, [pc, #200]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b50:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	e057      	b.n	8007c06 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b5c:	d90a      	bls.n	8007b74 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b70:	60d3      	str	r3, [r2, #12]
 8007b72:	e007      	b.n	8007b84 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8007b74:	4b27      	ldr	r3, [pc, #156]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007b7c:	4925      	ldr	r1, [pc, #148]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007b84:	4b24      	ldr	r3, [pc, #144]	@ (8007c18 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a24      	ldr	r2, [pc, #144]	@ (8007c1c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	099b      	lsrs	r3, r3, #6
 8007b90:	2232      	movs	r2, #50	@ 0x32
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	4a21      	ldr	r2, [pc, #132]	@ (8007c1c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	099b      	lsrs	r3, r3, #6
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007ba2:	e002      	b.n	8007baa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007baa:	4b1a      	ldr	r3, [pc, #104]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d102      	bne.n	8007bbc <HAL_PWREx_ControlVoltageScaling+0x98>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f3      	bne.n	8007ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d01b      	beq.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007bc2:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a15      	ldr	r2, [pc, #84]	@ (8007c1c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bcc:	099b      	lsrs	r3, r3, #6
 8007bce:	2232      	movs	r2, #50	@ 0x32
 8007bd0:	fb02 f303 	mul.w	r3, r2, r3
 8007bd4:	4a11      	ldr	r2, [pc, #68]	@ (8007c1c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	099b      	lsrs	r3, r3, #6
 8007bdc:	3301      	adds	r3, #1
 8007bde:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007be0:	e002      	b.n	8007be8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007be8:	4b0a      	ldr	r3, [pc, #40]	@ (8007c14 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8007bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d102      	bne.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0xd6>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1f3      	bne.n	8007be2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e000      	b.n	8007c06 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	46020800 	.word	0x46020800
 8007c18:	20177008 	.word	0x20177008
 8007c1c:	10624dd3 	.word	0x10624dd3

08007c20 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8007c24:	4b04      	ldr	r3, [pc, #16]	@ (8007c38 <HAL_PWREx_GetVoltageRange+0x18>)
 8007c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	46020800 	.word	0x46020800

08007c3c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8007c44:	4b22      	ldr	r3, [pc, #136]	@ (8007cd0 <HAL_PWREx_ConfigSupply+0x94>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a22      	ldr	r2, [pc, #136]	@ (8007cd4 <HAL_PWREx_ConfigSupply+0x98>)
 8007c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4e:	099b      	lsrs	r3, r3, #6
 8007c50:	2232      	movs	r2, #50	@ 0x32
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd4 <HAL_PWREx_ConfigSupply+0x98>)
 8007c58:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5c:	099b      	lsrs	r3, r3, #6
 8007c5e:	3301      	adds	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d113      	bne.n	8007c90 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007c68:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007c6e:	f023 0302 	bic.w	r3, r3, #2
 8007c72:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007c74:	e002      	b.n	8007c7c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007c7c:	4b16      	ldr	r3, [pc, #88]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d116      	bne.n	8007cb6 <HAL_PWREx_ConfigSupply+0x7a>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f3      	bne.n	8007c76 <HAL_PWREx_ConfigSupply+0x3a>
 8007c8e:	e012      	b.n	8007cb6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007c90:	4b11      	ldr	r3, [pc, #68]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	4a10      	ldr	r2, [pc, #64]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007c96:	f043 0302 	orr.w	r3, r3, #2
 8007c9a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007c9c:	e002      	b.n	8007ca4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <HAL_PWREx_ConfigSupply+0x9c>)
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <HAL_PWREx_ConfigSupply+0x7a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f3      	bne.n	8007c9e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e000      	b.n	8007cc2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20177008 	.word	0x20177008
 8007cd4:	10624dd3 	.word	0x10624dd3
 8007cd8:	46020800 	.word	0x46020800

08007cdc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	4a04      	ldr	r2, [pc, #16]	@ (8007cf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cea:	6113      	str	r3, [r2, #16]
}
 8007cec:	bf00      	nop
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	46020800 	.word	0x46020800

08007cfc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007d00:	4b05      	ldr	r3, [pc, #20]	@ (8007d18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007d06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d0a:	6113      	str	r3, [r2, #16]
}
 8007d0c:	bf00      	nop
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	46020800 	.word	0x46020800

08007d1c <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8007d20:	4b05      	ldr	r3, [pc, #20]	@ (8007d38 <HAL_PWREx_EnableVddA+0x1c>)
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	4a04      	ldr	r2, [pc, #16]	@ (8007d38 <HAL_PWREx_EnableVddA+0x1c>)
 8007d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d2a:	6113      	str	r3, [r2, #16]
}
 8007d2c:	bf00      	nop
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	46020800 	.word	0x46020800

08007d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08e      	sub	sp, #56	@ 0x38
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f000 bec8 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d56:	4b99      	ldr	r3, [pc, #612]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f003 030c 	and.w	r3, r3, #12
 8007d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d60:	4b96      	ldr	r3, [pc, #600]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0310 	and.w	r3, r3, #16
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 816c 	beq.w	8008050 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <HAL_RCC_OscConfig+0x52>
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	f040 80de 	bne.w	8007f42 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	f040 80da 	bne.w	8007f42 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	69db      	ldr	r3, [r3, #28]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f000 bea5 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007da0:	4b86      	ldr	r3, [pc, #536]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <HAL_RCC_OscConfig+0x7a>
 8007dac:	4b83      	ldr	r3, [pc, #524]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007db4:	e005      	b.n	8007dc2 <HAL_RCC_OscConfig+0x86>
 8007db6:	4b81      	ldr	r3, [pc, #516]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007dbc:	041b      	lsls	r3, r3, #16
 8007dbe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d255      	bcs.n	8007e72 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 fa49 	bl	8009268 <RCC_SetFlashLatencyFromMSIRange>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f000 be82 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007de2:	4b76      	ldr	r3, [pc, #472]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	4a75      	ldr	r2, [pc, #468]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007de8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007dec:	6093      	str	r3, [r2, #8]
 8007dee:	4b73      	ldr	r3, [pc, #460]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfa:	4970      	ldr	r1, [pc, #448]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007e08:	d309      	bcc.n	8007e1e <HAL_RCC_OscConfig+0xe2>
 8007e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f023 021f 	bic.w	r2, r3, #31
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	4969      	ldr	r1, [pc, #420]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	60cb      	str	r3, [r1, #12]
 8007e1c:	e07e      	b.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da0a      	bge.n	8007e3c <HAL_RCC_OscConfig+0x100>
 8007e26:	4b65      	ldr	r3, [pc, #404]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	015b      	lsls	r3, r3, #5
 8007e34:	4961      	ldr	r1, [pc, #388]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60cb      	str	r3, [r1, #12]
 8007e3a:	e06f      	b.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e44:	d30a      	bcc.n	8007e5c <HAL_RCC_OscConfig+0x120>
 8007e46:	4b5d      	ldr	r3, [pc, #372]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	029b      	lsls	r3, r3, #10
 8007e54:	4959      	ldr	r1, [pc, #356]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60cb      	str	r3, [r1, #12]
 8007e5a:	e05f      	b.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
 8007e5c:	4b57      	ldr	r3, [pc, #348]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	03db      	lsls	r3, r3, #15
 8007e6a:	4954      	ldr	r1, [pc, #336]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60cb      	str	r3, [r1, #12]
 8007e70:	e054      	b.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007e72:	4b52      	ldr	r3, [pc, #328]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4a51      	ldr	r2, [pc, #324]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007e7c:	6093      	str	r3, [r2, #8]
 8007e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	494c      	ldr	r1, [pc, #304]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007e98:	d309      	bcc.n	8007eae <HAL_RCC_OscConfig+0x172>
 8007e9a:	4b48      	ldr	r3, [pc, #288]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f023 021f 	bic.w	r2, r3, #31
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	4945      	ldr	r1, [pc, #276]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60cb      	str	r3, [r1, #12]
 8007eac:	e028      	b.n	8007f00 <HAL_RCC_OscConfig+0x1c4>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	da0a      	bge.n	8007ecc <HAL_RCC_OscConfig+0x190>
 8007eb6:	4b41      	ldr	r3, [pc, #260]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	015b      	lsls	r3, r3, #5
 8007ec4:	493d      	ldr	r1, [pc, #244]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60cb      	str	r3, [r1, #12]
 8007eca:	e019      	b.n	8007f00 <HAL_RCC_OscConfig+0x1c4>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed4:	d30a      	bcc.n	8007eec <HAL_RCC_OscConfig+0x1b0>
 8007ed6:	4b39      	ldr	r3, [pc, #228]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	029b      	lsls	r3, r3, #10
 8007ee4:	4935      	ldr	r1, [pc, #212]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	60cb      	str	r3, [r1, #12]
 8007eea:	e009      	b.n	8007f00 <HAL_RCC_OscConfig+0x1c4>
 8007eec:	4b33      	ldr	r3, [pc, #204]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	03db      	lsls	r3, r3, #15
 8007efa:	4930      	ldr	r1, [pc, #192]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 f9ac 	bl	8009268 <RCC_SetFlashLatencyFromMSIRange>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f000 bde5 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8007f1c:	f001 f916 	bl	800914c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007f20:	4b27      	ldr	r3, [pc, #156]	@ (8007fc0 <HAL_RCC_OscConfig+0x284>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fb fa79 	bl	800341c <HAL_InitTick>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8007f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 808a 	beq.w	800804e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8007f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f3e:	f000 bdd2 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d066      	beq.n	8008018 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8007f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f50:	f043 0301 	orr.w	r3, r3, #1
 8007f54:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007f56:	f7fb fbcb 	bl	80036f0 <HAL_GetTick>
 8007f5a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007f5c:	e009      	b.n	8007f72 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f5e:	f7fb fbc7 	bl	80036f0 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d902      	bls.n	8007f72 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	f000 bdba 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8007f72:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d0ef      	beq.n	8007f5e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	4a0e      	ldr	r2, [pc, #56]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f88:	6093      	str	r3, [r2, #8]
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f96:	4909      	ldr	r1, [pc, #36]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007fa4:	d30e      	bcc.n	8007fc4 <HAL_RCC_OscConfig+0x288>
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f023 021f 	bic.w	r2, r3, #31
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	4902      	ldr	r1, [pc, #8]	@ (8007fbc <HAL_RCC_OscConfig+0x280>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60cb      	str	r3, [r1, #12]
 8007fb8:	e04a      	b.n	8008050 <HAL_RCC_OscConfig+0x314>
 8007fba:	bf00      	nop
 8007fbc:	46020c00 	.word	0x46020c00
 8007fc0:	2017700c 	.word	0x2017700c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	da0a      	bge.n	8007fe2 <HAL_RCC_OscConfig+0x2a6>
 8007fcc:	4b98      	ldr	r3, [pc, #608]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	015b      	lsls	r3, r3, #5
 8007fda:	4995      	ldr	r1, [pc, #596]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60cb      	str	r3, [r1, #12]
 8007fe0:	e036      	b.n	8008050 <HAL_RCC_OscConfig+0x314>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fea:	d30a      	bcc.n	8008002 <HAL_RCC_OscConfig+0x2c6>
 8007fec:	4b90      	ldr	r3, [pc, #576]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	029b      	lsls	r3, r3, #10
 8007ffa:	498d      	ldr	r1, [pc, #564]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60cb      	str	r3, [r1, #12]
 8008000:	e026      	b.n	8008050 <HAL_RCC_OscConfig+0x314>
 8008002:	4b8b      	ldr	r3, [pc, #556]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	03db      	lsls	r3, r3, #15
 8008010:	4987      	ldr	r1, [pc, #540]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	60cb      	str	r3, [r1, #12]
 8008016:	e01b      	b.n	8008050 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008018:	4b85      	ldr	r3, [pc, #532]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a84      	ldr	r2, [pc, #528]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800801e:	f023 0301 	bic.w	r3, r3, #1
 8008022:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008024:	f7fb fb64 	bl	80036f0 <HAL_GetTick>
 8008028:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800802a:	e009      	b.n	8008040 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800802c:	f7fb fb60 	bl	80036f0 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	2b02      	cmp	r3, #2
 8008038:	d902      	bls.n	8008040 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	f000 bd53 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008040:	4b7b      	ldr	r3, [pc, #492]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ef      	bne.n	800802c <HAL_RCC_OscConfig+0x2f0>
 800804c:	e000      	b.n	8008050 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800804e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 808b 	beq.w	8008174 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	2b08      	cmp	r3, #8
 8008062:	d005      	beq.n	8008070 <HAL_RCC_OscConfig+0x334>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	2b0c      	cmp	r3, #12
 8008068:	d109      	bne.n	800807e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800806a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806c:	2b03      	cmp	r3, #3
 800806e:	d106      	bne.n	800807e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d17d      	bne.n	8008174 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	f000 bd34 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008086:	d106      	bne.n	8008096 <HAL_RCC_OscConfig+0x35a>
 8008088:	4b69      	ldr	r3, [pc, #420]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a68      	ldr	r2, [pc, #416]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800808e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	e041      	b.n	800811a <HAL_RCC_OscConfig+0x3de>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800809e:	d112      	bne.n	80080c6 <HAL_RCC_OscConfig+0x38a>
 80080a0:	4b63      	ldr	r3, [pc, #396]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a62      	ldr	r2, [pc, #392]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	4b60      	ldr	r3, [pc, #384]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a5f      	ldr	r2, [pc, #380]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080b2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	4b5d      	ldr	r3, [pc, #372]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a5c      	ldr	r2, [pc, #368]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080c2:	6013      	str	r3, [r2, #0]
 80080c4:	e029      	b.n	800811a <HAL_RCC_OscConfig+0x3de>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80080ce:	d112      	bne.n	80080f6 <HAL_RCC_OscConfig+0x3ba>
 80080d0:	4b57      	ldr	r3, [pc, #348]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a56      	ldr	r2, [pc, #344]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4b54      	ldr	r3, [pc, #336]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a53      	ldr	r2, [pc, #332]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	4b51      	ldr	r3, [pc, #324]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a50      	ldr	r2, [pc, #320]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	e011      	b.n	800811a <HAL_RCC_OscConfig+0x3de>
 80080f6:	4b4e      	ldr	r3, [pc, #312]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a4d      	ldr	r2, [pc, #308]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80080fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	4b4b      	ldr	r3, [pc, #300]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a4a      	ldr	r2, [pc, #296]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	4b48      	ldr	r3, [pc, #288]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a47      	ldr	r2, [pc, #284]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008114:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008118:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d014      	beq.n	800814c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008122:	f7fb fae5 	bl	80036f0 <HAL_GetTick>
 8008126:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008128:	e009      	b.n	800813e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800812a:	f7fb fae1 	bl	80036f0 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	2b64      	cmp	r3, #100	@ 0x64
 8008136:	d902      	bls.n	800813e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008138:	2303      	movs	r3, #3
 800813a:	f000 bcd4 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800813e:	4b3c      	ldr	r3, [pc, #240]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0ef      	beq.n	800812a <HAL_RCC_OscConfig+0x3ee>
 800814a:	e013      	b.n	8008174 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800814c:	f7fb fad0 	bl	80036f0 <HAL_GetTick>
 8008150:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008152:	e009      	b.n	8008168 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008154:	f7fb facc 	bl	80036f0 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b64      	cmp	r3, #100	@ 0x64
 8008160:	d902      	bls.n	8008168 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	f000 bcbf 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008168:	4b31      	ldr	r3, [pc, #196]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1ef      	bne.n	8008154 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d05f      	beq.n	8008240 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	2b04      	cmp	r3, #4
 8008184:	d005      	beq.n	8008192 <HAL_RCC_OscConfig+0x456>
 8008186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008188:	2b0c      	cmp	r3, #12
 800818a:	d114      	bne.n	80081b6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800818c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800818e:	2b02      	cmp	r3, #2
 8008190:	d111      	bne.n	80081b6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d102      	bne.n	80081a0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	f000 bca3 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80081a0:	4b23      	ldr	r3, [pc, #140]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	4920      	ldr	r1, [pc, #128]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80081b4:	e044      	b.n	8008240 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d024      	beq.n	8008208 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80081be:	4b1c      	ldr	r3, [pc, #112]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081ca:	f7fb fa91 	bl	80036f0 <HAL_GetTick>
 80081ce:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081d0:	e009      	b.n	80081e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081d2:	f7fb fa8d 	bl	80036f0 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d902      	bls.n	80081e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	f000 bc80 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081e6:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d0ef      	beq.n	80081d2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80081f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	490b      	ldr	r1, [pc, #44]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 8008202:	4313      	orrs	r3, r2
 8008204:	610b      	str	r3, [r1, #16]
 8008206:	e01b      	b.n	8008240 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008208:	4b09      	ldr	r3, [pc, #36]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a08      	ldr	r2, [pc, #32]	@ (8008230 <HAL_RCC_OscConfig+0x4f4>)
 800820e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008212:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008214:	f7fb fa6c 	bl	80036f0 <HAL_GetTick>
 8008218:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800821a:	e00b      	b.n	8008234 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800821c:	f7fb fa68 	bl	80036f0 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d904      	bls.n	8008234 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	f000 bc5b 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
 8008230:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008234:	4baf      	ldr	r3, [pc, #700]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1ed      	bne.n	800821c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0308 	and.w	r3, r3, #8
 8008248:	2b00      	cmp	r3, #0
 800824a:	f000 80c8 	beq.w	80083de <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800824e:	2300      	movs	r3, #0
 8008250:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008254:	4ba7      	ldr	r3, [pc, #668]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800825a:	f003 0304 	and.w	r3, r3, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	d111      	bne.n	8008286 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008262:	4ba4      	ldr	r3, [pc, #656]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008264:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008268:	4aa2      	ldr	r2, [pc, #648]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800826a:	f043 0304 	orr.w	r3, r3, #4
 800826e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008272:	4ba0      	ldr	r3, [pc, #640]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008286:	4b9c      	ldr	r3, [pc, #624]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d119      	bne.n	80082c6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008292:	4b99      	ldr	r3, [pc, #612]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008296:	4a98      	ldr	r2, [pc, #608]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800829e:	f7fb fa27 	bl	80036f0 <HAL_GetTick>
 80082a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082a4:	e009      	b.n	80082ba <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a6:	f7fb fa23 	bl	80036f0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d902      	bls.n	80082ba <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	f000 bc16 	b.w	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082ba:	4b8f      	ldr	r3, [pc, #572]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0ef      	beq.n	80082a6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d05f      	beq.n	800838e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80082ce:	4b89      	ldr	r3, [pc, #548]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80082d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082d4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	699a      	ldr	r2, [r3, #24]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d037      	beq.n	8008354 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d006      	beq.n	80082fc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e3f4      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d01b      	beq.n	800833e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8008306:	4b7b      	ldr	r3, [pc, #492]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800830c:	4a79      	ldr	r2, [pc, #484]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800830e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8008312:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8008316:	f7fb f9eb 	bl	80036f0 <HAL_GetTick>
 800831a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800831e:	f7fb f9e7 	bl	80036f0 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b05      	cmp	r3, #5
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e3da      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8008330:	4b70      	ldr	r3, [pc, #448]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1ef      	bne.n	800831e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800833e:	4b6d      	ldr	r3, [pc, #436]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008340:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008344:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	4969      	ldr	r1, [pc, #420]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800834e:	4313      	orrs	r3, r2
 8008350:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8008354:	4b67      	ldr	r3, [pc, #412]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008356:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800835a:	4a66      	ldr	r2, [pc, #408]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800835c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008360:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8008364:	f7fb f9c4 	bl	80036f0 <HAL_GetTick>
 8008368:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800836a:	e008      	b.n	800837e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800836c:	f7fb f9c0 	bl	80036f0 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b05      	cmp	r3, #5
 8008378:	d901      	bls.n	800837e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e3b3      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800837e:	4b5d      	ldr	r3, [pc, #372]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d0ef      	beq.n	800836c <HAL_RCC_OscConfig+0x630>
 800838c:	e01b      	b.n	80083c6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800838e:	4b59      	ldr	r3, [pc, #356]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008394:	4a57      	ldr	r2, [pc, #348]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008396:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800839a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800839e:	f7fb f9a7 	bl	80036f0 <HAL_GetTick>
 80083a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083a6:	f7fb f9a3 	bl	80036f0 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b05      	cmp	r3, #5
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e396      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80083b8:	4b4e      	ldr	r3, [pc, #312]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80083ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1ef      	bne.n	80083a6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d107      	bne.n	80083de <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ce:	4b49      	ldr	r3, [pc, #292]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80083d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083d4:	4a47      	ldr	r2, [pc, #284]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80083d6:	f023 0304 	bic.w	r3, r3, #4
 80083da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0304 	and.w	r3, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8111 	beq.w	800860e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80083ec:	2300      	movs	r3, #0
 80083ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083f2:	4b40      	ldr	r3, [pc, #256]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80083f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083f8:	f003 0304 	and.w	r3, r3, #4
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d111      	bne.n	8008424 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008400:	4b3c      	ldr	r3, [pc, #240]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008406:	4a3b      	ldr	r2, [pc, #236]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008408:	f043 0304 	orr.w	r3, r3, #4
 800840c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008410:	4b38      	ldr	r3, [pc, #224]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008416:	f003 0304 	and.w	r3, r3, #4
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008424:	4b34      	ldr	r3, [pc, #208]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d118      	bne.n	8008462 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008430:	4b31      	ldr	r3, [pc, #196]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008434:	4a30      	ldr	r2, [pc, #192]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008436:	f043 0301 	orr.w	r3, r3, #1
 800843a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800843c:	f7fb f958 	bl	80036f0 <HAL_GetTick>
 8008440:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008444:	f7fb f954 	bl	80036f0 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e347      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008456:	4b28      	ldr	r3, [pc, #160]	@ (80084f8 <HAL_RCC_OscConfig+0x7bc>)
 8008458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d0f0      	beq.n	8008444 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d01f      	beq.n	80084ae <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	2b00      	cmp	r3, #0
 8008478:	d010      	beq.n	800849c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800847a:	4b1e      	ldr	r3, [pc, #120]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800847c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008480:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008482:	f043 0304 	orr.w	r3, r3, #4
 8008486:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800848a:	4b1a      	ldr	r3, [pc, #104]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800848c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008490:	4a18      	ldr	r2, [pc, #96]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800849a:	e018      	b.n	80084ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800849c:	4b15      	ldr	r3, [pc, #84]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 800849e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a2:	4a14      	ldr	r2, [pc, #80]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80084a4:	f043 0301 	orr.w	r3, r3, #1
 80084a8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80084ac:	e00f      	b.n	80084ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80084ae:	4b11      	ldr	r3, [pc, #68]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80084b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084b4:	4a0f      	ldr	r2, [pc, #60]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80084be:	4b0d      	ldr	r3, [pc, #52]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80084c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084c4:	4a0b      	ldr	r2, [pc, #44]	@ (80084f4 <HAL_RCC_OscConfig+0x7b8>)
 80084c6:	f023 0304 	bic.w	r3, r3, #4
 80084ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d057      	beq.n	8008586 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80084d6:	f7fb f90b 	bl	80036f0 <HAL_GetTick>
 80084da:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084dc:	e00e      	b.n	80084fc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084de:	f7fb f907 	bl	80036f0 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d905      	bls.n	80084fc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e2f8      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
 80084f4:	46020c00 	.word	0x46020c00
 80084f8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084fc:	4b9c      	ldr	r3, [pc, #624]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80084fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d0e9      	beq.n	80084de <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d01b      	beq.n	800854e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008516:	4b96      	ldr	r3, [pc, #600]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800851c:	4a94      	ldr	r2, [pc, #592]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800851e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008522:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008526:	e00a      	b.n	800853e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008528:	f7fb f8e2 	bl	80036f0 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e2d3      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800853e:	4b8c      	ldr	r3, [pc, #560]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0ed      	beq.n	8008528 <HAL_RCC_OscConfig+0x7ec>
 800854c:	e053      	b.n	80085f6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800854e:	4b88      	ldr	r3, [pc, #544]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008554:	4a86      	ldr	r2, [pc, #536]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800855a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800855e:	e00a      	b.n	8008576 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008560:	f7fb f8c6 	bl	80036f0 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800856e:	4293      	cmp	r3, r2
 8008570:	d901      	bls.n	8008576 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e2b7      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008576:	4b7e      	ldr	r3, [pc, #504]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800857c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1ed      	bne.n	8008560 <HAL_RCC_OscConfig+0x824>
 8008584:	e037      	b.n	80085f6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8008586:	f7fb f8b3 	bl	80036f0 <HAL_GetTick>
 800858a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800858c:	e00a      	b.n	80085a4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858e:	f7fb f8af 	bl	80036f0 <HAL_GetTick>
 8008592:	4602      	mov	r2, r0
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859c:	4293      	cmp	r3, r2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e2a0      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085a4:	4b72      	ldr	r3, [pc, #456]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80085a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1ed      	bne.n	800858e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80085b2:	4b6f      	ldr	r3, [pc, #444]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80085b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d01a      	beq.n	80085f6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80085c0:	4b6b      	ldr	r3, [pc, #428]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80085c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085c6:	4a6a      	ldr	r2, [pc, #424]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80085c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80085d0:	e00a      	b.n	80085e8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085d2:	f7fb f88d 	bl	80036f0 <HAL_GetTick>
 80085d6:	4602      	mov	r2, r0
 80085d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e27e      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80085e8:	4b61      	ldr	r3, [pc, #388]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80085ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1ed      	bne.n	80085d2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80085f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d107      	bne.n	800860e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008600:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008604:	4a5a      	ldr	r2, [pc, #360]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008606:	f023 0304 	bic.w	r3, r3, #4
 800860a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d036      	beq.n	8008688 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d019      	beq.n	8008656 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8008622:	4b53      	ldr	r3, [pc, #332]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a52      	ldr	r2, [pc, #328]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008628:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800862c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800862e:	f7fb f85f 	bl	80036f0 <HAL_GetTick>
 8008632:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008636:	f7fb f85b 	bl	80036f0 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e24e      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8008648:	4b49      	ldr	r3, [pc, #292]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <HAL_RCC_OscConfig+0x8fa>
 8008654:	e018      	b.n	8008688 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8008656:	4b46      	ldr	r3, [pc, #280]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a45      	ldr	r2, [pc, #276]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800865c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008660:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008662:	f7fb f845 	bl	80036f0 <HAL_GetTick>
 8008666:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008668:	e008      	b.n	800867c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800866a:	f7fb f841 	bl	80036f0 <HAL_GetTick>
 800866e:	4602      	mov	r2, r0
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	1ad3      	subs	r3, r2, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d901      	bls.n	800867c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e234      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800867c:	4b3c      	ldr	r3, [pc, #240]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f0      	bne.n	800866a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008690:	2b00      	cmp	r3, #0
 8008692:	d036      	beq.n	8008702 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008698:	2b00      	cmp	r3, #0
 800869a:	d019      	beq.n	80086d0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800869c:	4b34      	ldr	r3, [pc, #208]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a33      	ldr	r2, [pc, #204]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80086a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80086a8:	f7fb f822 	bl	80036f0 <HAL_GetTick>
 80086ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80086b0:	f7fb f81e 	bl	80036f0 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e211      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80086c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <HAL_RCC_OscConfig+0x974>
 80086ce:	e018      	b.n	8008702 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80086d0:	4b27      	ldr	r3, [pc, #156]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a26      	ldr	r2, [pc, #152]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80086d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80086da:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80086dc:	f7fb f808 	bl	80036f0 <HAL_GetTick>
 80086e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80086e4:	f7fb f804 	bl	80036f0 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e1f7      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80086f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d07f      	beq.n	800880e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008712:	2b00      	cmp	r3, #0
 8008714:	d062      	beq.n	80087dc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8008716:	4b16      	ldr	r3, [pc, #88]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	4a15      	ldr	r2, [pc, #84]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800871c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008720:	6093      	str	r3, [r2, #8]
 8008722:	4b13      	ldr	r3, [pc, #76]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	4910      	ldr	r1, [pc, #64]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008730:	4313      	orrs	r3, r2
 8008732:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008738:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800873c:	d309      	bcc.n	8008752 <HAL_RCC_OscConfig+0xa16>
 800873e:	4b0c      	ldr	r3, [pc, #48]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f023 021f 	bic.w	r2, r3, #31
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	4909      	ldr	r1, [pc, #36]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800874c:	4313      	orrs	r3, r2
 800874e:	60cb      	str	r3, [r1, #12]
 8008750:	e02a      	b.n	80087a8 <HAL_RCC_OscConfig+0xa6c>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	da0c      	bge.n	8008774 <HAL_RCC_OscConfig+0xa38>
 800875a:	4b05      	ldr	r3, [pc, #20]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	015b      	lsls	r3, r3, #5
 8008768:	4901      	ldr	r1, [pc, #4]	@ (8008770 <HAL_RCC_OscConfig+0xa34>)
 800876a:	4313      	orrs	r3, r2
 800876c:	60cb      	str	r3, [r1, #12]
 800876e:	e01b      	b.n	80087a8 <HAL_RCC_OscConfig+0xa6c>
 8008770:	46020c00 	.word	0x46020c00
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877c:	d30a      	bcc.n	8008794 <HAL_RCC_OscConfig+0xa58>
 800877e:	4ba1      	ldr	r3, [pc, #644]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	499d      	ldr	r1, [pc, #628]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800878e:	4313      	orrs	r3, r2
 8008790:	60cb      	str	r3, [r1, #12]
 8008792:	e009      	b.n	80087a8 <HAL_RCC_OscConfig+0xa6c>
 8008794:	4b9b      	ldr	r3, [pc, #620]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	03db      	lsls	r3, r3, #15
 80087a2:	4998      	ldr	r1, [pc, #608]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80087a8:	4b96      	ldr	r3, [pc, #600]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a95      	ldr	r2, [pc, #596]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087ae:	f043 0310 	orr.w	r3, r3, #16
 80087b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80087b4:	f7fa ff9c 	bl	80036f0 <HAL_GetTick>
 80087b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80087bc:	f7fa ff98 	bl	80036f0 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e18b      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80087ce:	4b8d      	ldr	r3, [pc, #564]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0xa80>
 80087da:	e018      	b.n	800880e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80087dc:	4b89      	ldr	r3, [pc, #548]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a88      	ldr	r2, [pc, #544]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80087e2:	f023 0310 	bic.w	r3, r3, #16
 80087e6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80087e8:	f7fa ff82 	bl	80036f0 <HAL_GetTick>
 80087ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80087f0:	f7fa ff7e 	bl	80036f0 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e171      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008802:	4b80      	ldr	r3, [pc, #512]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0320 	and.w	r3, r3, #32
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f0      	bne.n	80087f0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 8166 	beq.w	8008ae4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800881e:	4b79      	ldr	r3, [pc, #484]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f003 030c 	and.w	r3, r3, #12
 8008826:	2b0c      	cmp	r3, #12
 8008828:	f000 80f2 	beq.w	8008a10 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008830:	2b02      	cmp	r3, #2
 8008832:	f040 80c5 	bne.w	80089c0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008836:	4b73      	ldr	r3, [pc, #460]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a72      	ldr	r2, [pc, #456]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800883c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008840:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008842:	f7fa ff55 	bl	80036f0 <HAL_GetTick>
 8008846:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800884a:	f7fa ff51 	bl	80036f0 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b02      	cmp	r3, #2
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e144      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800885c:	4b69      	ldr	r3, [pc, #420]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f0      	bne.n	800884a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008868:	4b66      	ldr	r3, [pc, #408]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800886a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b00      	cmp	r3, #0
 8008874:	d111      	bne.n	800889a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8008876:	4b63      	ldr	r3, [pc, #396]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800887c:	4a61      	ldr	r2, [pc, #388]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800887e:	f043 0304 	orr.w	r3, r3, #4
 8008882:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008886:	4b5f      	ldr	r3, [pc, #380]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008894:	2301      	movs	r3, #1
 8008896:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800889a:	4b5b      	ldr	r3, [pc, #364]	@ (8008a08 <HAL_RCC_OscConfig+0xccc>)
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80088a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088a6:	d102      	bne.n	80088ae <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80088ae:	4b56      	ldr	r3, [pc, #344]	@ (8008a08 <HAL_RCC_OscConfig+0xccc>)
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	4a55      	ldr	r2, [pc, #340]	@ (8008a08 <HAL_RCC_OscConfig+0xccc>)
 80088b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80088b8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80088ba:	4b52      	ldr	r3, [pc, #328]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80088bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80088ce:	3a01      	subs	r2, #1
 80088d0:	0212      	lsls	r2, r2, #8
 80088d2:	4311      	orrs	r1, r2
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80088d8:	430a      	orrs	r2, r1
 80088da:	494a      	ldr	r1, [pc, #296]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	628b      	str	r3, [r1, #40]	@ 0x28
 80088e0:	4b48      	ldr	r3, [pc, #288]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80088e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088e4:	4b49      	ldr	r3, [pc, #292]	@ (8008a0c <HAL_RCC_OscConfig+0xcd0>)
 80088e6:	4013      	ands	r3, r2
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80088ec:	3a01      	subs	r2, #1
 80088ee:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80088f6:	3a01      	subs	r2, #1
 80088f8:	0252      	lsls	r2, r2, #9
 80088fa:	b292      	uxth	r2, r2
 80088fc:	4311      	orrs	r1, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008902:	3a01      	subs	r2, #1
 8008904:	0412      	lsls	r2, r2, #16
 8008906:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800890a:	4311      	orrs	r1, r2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008910:	3a01      	subs	r2, #1
 8008912:	0612      	lsls	r2, r2, #24
 8008914:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8008918:	430a      	orrs	r2, r1
 800891a:	493a      	ldr	r1, [pc, #232]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800891c:	4313      	orrs	r3, r2
 800891e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008920:	4b38      	ldr	r3, [pc, #224]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008924:	4a37      	ldr	r2, [pc, #220]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008926:	f023 0310 	bic.w	r3, r3, #16
 800892a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008930:	4a34      	ldr	r2, [pc, #208]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008936:	4b33      	ldr	r3, [pc, #204]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893a:	4a32      	ldr	r2, [pc, #200]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 800893c:	f043 0310 	orr.w	r3, r3, #16
 8008940:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8008942:	4b30      	ldr	r3, [pc, #192]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008946:	f023 020c 	bic.w	r2, r3, #12
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800894e:	492d      	ldr	r1, [pc, #180]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008950:	4313      	orrs	r3, r2
 8008952:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8008954:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008958:	2b01      	cmp	r3, #1
 800895a:	d105      	bne.n	8008968 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800895c:	4b2a      	ldr	r3, [pc, #168]	@ (8008a08 <HAL_RCC_OscConfig+0xccc>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4a29      	ldr	r2, [pc, #164]	@ (8008a08 <HAL_RCC_OscConfig+0xccc>)
 8008962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008966:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8008968:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800896c:	2b01      	cmp	r3, #1
 800896e:	d107      	bne.n	8008980 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8008970:	4b24      	ldr	r3, [pc, #144]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008976:	4a23      	ldr	r2, [pc, #140]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008978:	f023 0304 	bic.w	r3, r3, #4
 800897c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008980:	4b20      	ldr	r3, [pc, #128]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1f      	ldr	r2, [pc, #124]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 8008986:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800898a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800898c:	f7fa feb0 	bl	80036f0 <HAL_GetTick>
 8008990:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008994:	f7fa feac 	bl	80036f0 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e09f      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80089a6:	4b17      	ldr	r3, [pc, #92]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d0f0      	beq.n	8008994 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80089b2:	4b14      	ldr	r3, [pc, #80]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b6:	4a13      	ldr	r2, [pc, #76]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089bc:	6293      	str	r3, [r2, #40]	@ 0x28
 80089be:	e091      	b.n	8008ae4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80089c0:	4b10      	ldr	r3, [pc, #64]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089ca:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80089cc:	f7fa fe90 	bl	80036f0 <HAL_GetTick>
 80089d0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80089d2:	e008      	b.n	80089e6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d4:	f7fa fe8c 	bl	80036f0 <HAL_GetTick>
 80089d8:	4602      	mov	r2, r0
 80089da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089dc:	1ad3      	subs	r3, r2, r3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d901      	bls.n	80089e6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80089e2:	2303      	movs	r3, #3
 80089e4:	e07f      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80089e6:	4b07      	ldr	r3, [pc, #28]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1f0      	bne.n	80089d4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80089f2:	4b04      	ldr	r3, [pc, #16]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f6:	4a03      	ldr	r2, [pc, #12]	@ (8008a04 <HAL_RCC_OscConfig+0xcc8>)
 80089f8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80089fc:	f023 0303 	bic.w	r3, r3, #3
 8008a00:	6293      	str	r3, [r2, #40]	@ 0x28
 8008a02:	e06f      	b.n	8008ae4 <HAL_RCC_OscConfig+0xda8>
 8008a04:	46020c00 	.word	0x46020c00
 8008a08:	46020800 	.word	0x46020800
 8008a0c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008a10:	4b37      	ldr	r3, [pc, #220]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a14:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008a16:	4b36      	ldr	r3, [pc, #216]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d039      	beq.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	f003 0203 	and.w	r2, r3, #3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d132      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	0a1b      	lsrs	r3, r3, #8
 8008a36:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d129      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d122      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a5c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d11a      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	0a5b      	lsrs	r3, r3, #9
 8008a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d111      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	0c1b      	lsrs	r3, r3, #16
 8008a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a80:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d108      	bne.n	8008a98 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	0e1b      	lsrs	r3, r3, #24
 8008a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a92:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d001      	beq.n	8008a9c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e024      	b.n	8008ae6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008a9c:	4b14      	ldr	r3, [pc, #80]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d01a      	beq.n	8008ae4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008aae:	4b10      	ldr	r3, [pc, #64]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008ab4:	f023 0310 	bic.w	r3, r3, #16
 8008ab8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fa fe19 	bl	80036f0 <HAL_GetTick>
 8008abe:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008ac0:	bf00      	nop
 8008ac2:	f7fa fe15 	bl	80036f0 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d0f9      	beq.n	8008ac2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad2:	4a07      	ldr	r2, [pc, #28]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8008ad8:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008adc:	4a04      	ldr	r2, [pc, #16]	@ (8008af0 <HAL_RCC_OscConfig+0xdb4>)
 8008ade:	f043 0310 	orr.w	r3, r3, #16
 8008ae2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3738      	adds	r7, #56	@ 0x38
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	46020c00 	.word	0x46020c00

08008af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e1d9      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b08:	4b9b      	ldr	r3, [pc, #620]	@ (8008d78 <HAL_RCC_ClockConfig+0x284>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 030f 	and.w	r3, r3, #15
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d910      	bls.n	8008b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b16:	4b98      	ldr	r3, [pc, #608]	@ (8008d78 <HAL_RCC_ClockConfig+0x284>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f023 020f 	bic.w	r2, r3, #15
 8008b1e:	4996      	ldr	r1, [pc, #600]	@ (8008d78 <HAL_RCC_ClockConfig+0x284>)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b26:	4b94      	ldr	r3, [pc, #592]	@ (8008d78 <HAL_RCC_ClockConfig+0x284>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d001      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e1c1      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695a      	ldr	r2, [r3, #20]
 8008b48:	4b8c      	ldr	r3, [pc, #560]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d908      	bls.n	8008b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8008b54:	4b89      	ldr	r3, [pc, #548]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	4986      	ldr	r1, [pc, #536]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0308 	and.w	r3, r3, #8
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d012      	beq.n	8008b98 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691a      	ldr	r2, [r3, #16]
 8008b76:	4b81      	ldr	r3, [pc, #516]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	091b      	lsrs	r3, r3, #4
 8008b7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d909      	bls.n	8008b98 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008b84:	4b7d      	ldr	r3, [pc, #500]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	497a      	ldr	r1, [pc, #488]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d010      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	4b74      	ldr	r3, [pc, #464]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d908      	bls.n	8008bc6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008bb4:	4b71      	ldr	r3, [pc, #452]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	496e      	ldr	r1, [pc, #440]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d010      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	4b69      	ldr	r3, [pc, #420]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d908      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008be2:	4b66      	ldr	r3, [pc, #408]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	f023 020f 	bic.w	r2, r3, #15
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	4963      	ldr	r1, [pc, #396]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0301 	and.w	r3, r3, #1
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80d2 	beq.w	8008da6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008c02:	2300      	movs	r3, #0
 8008c04:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d143      	bne.n	8008c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d110      	bne.n	8008c3e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008c1c:	4b57      	ldr	r3, [pc, #348]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c22:	4a56      	ldr	r2, [pc, #344]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c24:	f043 0304 	orr.w	r3, r3, #4
 8008c28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008c2c:	4b53      	ldr	r3, [pc, #332]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	60bb      	str	r3, [r7, #8]
 8008c38:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8008c3e:	f7fa fd57 	bl	80036f0 <HAL_GetTick>
 8008c42:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8008c44:	4b4e      	ldr	r3, [pc, #312]	@ (8008d80 <HAL_RCC_ClockConfig+0x28c>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00f      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008c50:	e008      	b.n	8008c64 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8008c52:	f7fa fd4d 	bl	80036f0 <HAL_GetTick>
 8008c56:	4602      	mov	r2, r0
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e12b      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8008c64:	4b46      	ldr	r3, [pc, #280]	@ (8008d80 <HAL_RCC_ClockConfig+0x28c>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d0f0      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008c70:	7dfb      	ldrb	r3, [r7, #23]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d107      	bne.n	8008c86 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008c76:	4b41      	ldr	r3, [pc, #260]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c7e:	f023 0304 	bic.w	r3, r3, #4
 8008c82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008c86:	4b3d      	ldr	r3, [pc, #244]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d121      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e112      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d107      	bne.n	8008cae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c9e:	4b37      	ldr	r3, [pc, #220]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d115      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e106      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d107      	bne.n	8008cc6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008cb6:	4b31      	ldr	r3, [pc, #196]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e0fa      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e0f2      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008cd6:	4b29      	ldr	r3, [pc, #164]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f023 0203 	bic.w	r2, r3, #3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	4926      	ldr	r1, [pc, #152]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008ce8:	f7fa fd02 	bl	80036f0 <HAL_GetTick>
 8008cec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d112      	bne.n	8008d1c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cf6:	e00a      	b.n	8008d0e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cf8:	f7fa fcfa 	bl	80036f0 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e0d6      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f003 030c 	and.w	r3, r3, #12
 8008d16:	2b0c      	cmp	r3, #12
 8008d18:	d1ee      	bne.n	8008cf8 <HAL_RCC_ClockConfig+0x204>
 8008d1a:	e044      	b.n	8008da6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d112      	bne.n	8008d4a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d24:	e00a      	b.n	8008d3c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d26:	f7fa fce3 	bl	80036f0 <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d901      	bls.n	8008d3c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	e0bf      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f003 030c 	and.w	r3, r3, #12
 8008d44:	2b08      	cmp	r3, #8
 8008d46:	d1ee      	bne.n	8008d26 <HAL_RCC_ClockConfig+0x232>
 8008d48:	e02d      	b.n	8008da6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d123      	bne.n	8008d9a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008d52:	e00a      	b.n	8008d6a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d54:	f7fa fccc 	bl	80036f0 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d901      	bls.n	8008d6a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e0a8      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8008d6a:	4b04      	ldr	r3, [pc, #16]	@ (8008d7c <HAL_RCC_ClockConfig+0x288>)
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1ee      	bne.n	8008d54 <HAL_RCC_ClockConfig+0x260>
 8008d76:	e016      	b.n	8008da6 <HAL_RCC_ClockConfig+0x2b2>
 8008d78:	40022000 	.word	0x40022000
 8008d7c:	46020c00 	.word	0x46020c00
 8008d80:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d84:	f7fa fcb4 	bl	80036f0 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e090      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 030c 	and.w	r3, r3, #12
 8008da2:	2b04      	cmp	r3, #4
 8008da4:	d1ee      	bne.n	8008d84 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0302 	and.w	r3, r3, #2
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d010      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	4b43      	ldr	r3, [pc, #268]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d208      	bcs.n	8008dd4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008dc2:	4b40      	ldr	r3, [pc, #256]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f023 020f 	bic.w	r2, r3, #15
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	493d      	ldr	r1, [pc, #244]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ec8 <HAL_RCC_ClockConfig+0x3d4>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 030f 	and.w	r3, r3, #15
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d210      	bcs.n	8008e04 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008de2:	4b39      	ldr	r3, [pc, #228]	@ (8008ec8 <HAL_RCC_ClockConfig+0x3d4>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f023 020f 	bic.w	r2, r3, #15
 8008dea:	4937      	ldr	r1, [pc, #220]	@ (8008ec8 <HAL_RCC_ClockConfig+0x3d4>)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008df2:	4b35      	ldr	r3, [pc, #212]	@ (8008ec8 <HAL_RCC_ClockConfig+0x3d4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 030f 	and.w	r3, r3, #15
 8008dfa:	683a      	ldr	r2, [r7, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d001      	beq.n	8008e04 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e05b      	b.n	8008ebc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d010      	beq.n	8008e32 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	4b2b      	ldr	r3, [pc, #172]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d208      	bcs.n	8008e32 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008e20:	4b28      	ldr	r3, [pc, #160]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	4925      	ldr	r1, [pc, #148]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d012      	beq.n	8008e64 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	4b20      	ldr	r3, [pc, #128]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	091b      	lsrs	r3, r3, #4
 8008e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d209      	bcs.n	8008e64 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008e50:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e52:	6a1b      	ldr	r3, [r3, #32]
 8008e54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	4919      	ldr	r1, [pc, #100]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d010      	beq.n	8008e92 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	4b13      	ldr	r3, [pc, #76]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d208      	bcs.n	8008e92 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008e80:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	490d      	ldr	r1, [pc, #52]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008e92:	f000 f859 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <HAL_RCC_ClockConfig+0x3d0>)
 8008e9a:	6a1b      	ldr	r3, [r3, #32]
 8008e9c:	f003 030f 	and.w	r3, r3, #15
 8008ea0:	490a      	ldr	r1, [pc, #40]	@ (8008ecc <HAL_RCC_ClockConfig+0x3d8>)
 8008ea2:	5ccb      	ldrb	r3, [r1, r3]
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	4a09      	ldr	r2, [pc, #36]	@ (8008ed0 <HAL_RCC_ClockConfig+0x3dc>)
 8008eaa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008eac:	4b09      	ldr	r3, [pc, #36]	@ (8008ed4 <HAL_RCC_ClockConfig+0x3e0>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fa fab3 	bl	800341c <HAL_InitTick>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73fb      	strb	r3, [r7, #15]

  return status;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	46020c00 	.word	0x46020c00
 8008ec8:	40022000 	.word	0x40022000
 8008ecc:	0800f6e0 	.word	0x0800f6e0
 8008ed0:	20177008 	.word	0x20177008
 8008ed4:	2017700c 	.word	0x2017700c

08008ed8 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_8  division by 8 applied to MCO clock
  *            @arg @ref RCC_MCODIV_16  division by 16 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	@ 0x28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

  /* MCO Clock Enable */
  MCO1_CLK_ENABLE();
 8008ee4:	4b16      	ldr	r3, [pc, #88]	@ (8008f40 <HAL_RCC_MCOConfig+0x68>)
 8008ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eea:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <HAL_RCC_MCOConfig+0x68>)
 8008eec:	f043 0301 	orr.w	r3, r3, #1
 8008ef0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008ef4:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <HAL_RCC_MCOConfig+0x68>)
 8008ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	613b      	str	r3, [r7, #16]
 8008f00:	693b      	ldr	r3, [r7, #16]

  /* Configure the MCO1 pin in alternate function mode */
  gpio_initstruct.Pin = MCO1_PIN;
 8008f02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f06:	617b      	str	r3, [r7, #20]
  gpio_initstruct.Mode = GPIO_MODE_AF_PP;
 8008f08:	2302      	movs	r3, #2
 8008f0a:	61bb      	str	r3, [r7, #24]
  gpio_initstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	623b      	str	r3, [r7, #32]
  gpio_initstruct.Pull = GPIO_NOPULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61fb      	str	r3, [r7, #28]
  gpio_initstruct.Alternate = GPIO_AF0_MCO;
 8008f14:	2300      	movs	r3, #0
 8008f16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio_initstruct);
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4809      	ldr	r0, [pc, #36]	@ (8008f44 <HAL_RCC_MCOConfig+0x6c>)
 8008f20:	f7fc fff6 	bl	8005f10 <HAL_GPIO_Init>

  /* Mask MCOSEL[] and MCOPRE[] bits then set MCO1 clock source and prescaler */
  MODIFY_REG(RCC->CFGR1, (RCC_CFGR1_MCOSEL | RCC_CFGR1_MCOPRE), (RCC_MCOSource | RCC_MCODiv));
 8008f24:	4b06      	ldr	r3, [pc, #24]	@ (8008f40 <HAL_RCC_MCOConfig+0x68>)
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	430b      	orrs	r3, r1
 8008f32:	4903      	ldr	r1, [pc, #12]	@ (8008f40 <HAL_RCC_MCOConfig+0x68>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	61cb      	str	r3, [r1, #28]
}
 8008f38:	bf00      	nop
 8008f3a:	3728      	adds	r7, #40	@ 0x28
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	46020c00 	.word	0x46020c00
 8008f44:	42020000 	.word	0x42020000

08008f48 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b08b      	sub	sp, #44	@ 0x2c
 8008f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008f52:	2300      	movs	r3, #0
 8008f54:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f56:	4b78      	ldr	r3, [pc, #480]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	f003 030c 	and.w	r3, r3, #12
 8008f5e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f60:	4b75      	ldr	r3, [pc, #468]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d005      	beq.n	8008f7c <HAL_RCC_GetSysClockFreq+0x34>
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	2b0c      	cmp	r3, #12
 8008f74:	d121      	bne.n	8008fba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d11e      	bne.n	8008fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008f88:	4b6b      	ldr	r3, [pc, #428]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008f8e:	0b1b      	lsrs	r3, r3, #12
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f96:	e005      	b.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008f98:	4b67      	ldr	r3, [pc, #412]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	0f1b      	lsrs	r3, r3, #28
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008fa4:	4a65      	ldr	r2, [pc, #404]	@ (800913c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8008fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d110      	bne.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008fb8:	e00d      	b.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fba:	4b5f      	ldr	r3, [pc, #380]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d102      	bne.n	8008fcc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008fc6:	4b5e      	ldr	r3, [pc, #376]	@ (8009140 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008fc8:	623b      	str	r3, [r7, #32]
 8008fca:	e004      	b.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b08      	cmp	r3, #8
 8008fd0:	d101      	bne.n	8008fd6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8009140 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8008fd4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	f040 80a5 	bne.w	8009128 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008fde:	4b56      	ldr	r3, [pc, #344]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8008fe8:	4b53      	ldr	r3, [pc, #332]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fec:	0a1b      	lsrs	r3, r3, #8
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008ff6:	4b50      	ldr	r3, [pc, #320]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009002:	4b4d      	ldr	r3, [pc, #308]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009006:	08db      	lsrs	r3, r3, #3
 8009008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	fb02 f303 	mul.w	r3, r2, r3
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b02      	cmp	r3, #2
 8009022:	d003      	beq.n	800902c <HAL_RCC_GetSysClockFreq+0xe4>
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	2b03      	cmp	r3, #3
 8009028:	d022      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x128>
 800902a:	e043      	b.n	80090b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	ee07 3a90 	vmov	s15, r3
 8009032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009036:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8009144 <HAL_RCC_GetSysClockFreq+0x1fc>
 800903a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800903e:	4b3e      	ldr	r3, [pc, #248]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800904e:	ed97 6a01 	vldr	s12, [r7, #4]
 8009052:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8009148 <HAL_RCC_GetSysClockFreq+0x200>
 8009056:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800905a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800905e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009062:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800906e:	e046      	b.n	80090fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8009144 <HAL_RCC_GetSysClockFreq+0x1fc>
 800907e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009082:	4b2d      	ldr	r3, [pc, #180]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908a:	ee07 3a90 	vmov	s15, r3
 800908e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009092:	ed97 6a01 	vldr	s12, [r7, #4]
 8009096:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8009148 <HAL_RCC_GetSysClockFreq+0x200>
 800909a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800909e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80090a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80090aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090b2:	e024      	b.n	80090fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	ee07 3a90 	vmov	s15, r3
 80090ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80090ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d4:	ee07 3a90 	vmov	s15, r3
 80090d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80090dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80090e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8009148 <HAL_RCC_GetSysClockFreq+0x200>
 80090e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80090e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80090ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80090f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80090fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009138 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009102:	0e1b      	lsrs	r3, r3, #24
 8009104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009108:	3301      	adds	r3, #1
 800910a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009116:	edd7 6a07 	vldr	s13, [r7, #28]
 800911a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800911e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009122:	ee17 3a90 	vmov	r3, s15
 8009126:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009128:	6a3b      	ldr	r3, [r7, #32]
}
 800912a:	4618      	mov	r0, r3
 800912c:	372c      	adds	r7, #44	@ 0x2c
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	46020c00 	.word	0x46020c00
 800913c:	0800f6f8 	.word	0x0800f6f8
 8009140:	00f42400 	.word	0x00f42400
 8009144:	4b742400 	.word	0x4b742400
 8009148:	46000000 	.word	0x46000000

0800914c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009150:	f7ff fefa 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 8009154:	4602      	mov	r2, r0
 8009156:	4b07      	ldr	r3, [pc, #28]	@ (8009174 <HAL_RCC_GetHCLKFreq+0x28>)
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	4906      	ldr	r1, [pc, #24]	@ (8009178 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009160:	5ccb      	ldrb	r3, [r1, r3]
 8009162:	fa22 f303 	lsr.w	r3, r2, r3
 8009166:	4a05      	ldr	r2, [pc, #20]	@ (800917c <HAL_RCC_GetHCLKFreq+0x30>)
 8009168:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800916a:	4b04      	ldr	r3, [pc, #16]	@ (800917c <HAL_RCC_GetHCLKFreq+0x30>)
 800916c:	681b      	ldr	r3, [r3, #0]
}
 800916e:	4618      	mov	r0, r3
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	46020c00 	.word	0x46020c00
 8009178:	0800f6e0 	.word	0x0800f6e0
 800917c:	20177008 	.word	0x20177008

08009180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009184:	f7ff ffe2 	bl	800914c <HAL_RCC_GetHCLKFreq>
 8009188:	4602      	mov	r2, r0
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	091b      	lsrs	r3, r3, #4
 8009190:	f003 0307 	and.w	r3, r3, #7
 8009194:	4903      	ldr	r1, [pc, #12]	@ (80091a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009196:	5ccb      	ldrb	r3, [r1, r3]
 8009198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800919c:	4618      	mov	r0, r3
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	46020c00 	.word	0x46020c00
 80091a4:	0800f6f0 	.word	0x0800f6f0

080091a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80091ac:	f7ff ffce 	bl	800914c <HAL_RCC_GetHCLKFreq>
 80091b0:	4602      	mov	r2, r0
 80091b2:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	0a1b      	lsrs	r3, r3, #8
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	4903      	ldr	r1, [pc, #12]	@ (80091cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091be:	5ccb      	ldrb	r3, [r1, r3]
 80091c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	46020c00 	.word	0x46020c00
 80091cc:	0800f6f0 	.word	0x0800f6f0

080091d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80091d4:	f7ff ffba 	bl	800914c <HAL_RCC_GetHCLKFreq>
 80091d8:	4602      	mov	r2, r0
 80091da:	4b05      	ldr	r3, [pc, #20]	@ (80091f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80091dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091de:	091b      	lsrs	r3, r3, #4
 80091e0:	f003 0307 	and.w	r3, r3, #7
 80091e4:	4903      	ldr	r1, [pc, #12]	@ (80091f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80091e6:	5ccb      	ldrb	r3, [r1, r3]
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	46020c00 	.word	0x46020c00
 80091f4:	0800f6f0 	.word	0x0800f6f0

080091f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	221f      	movs	r2, #31
 8009206:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8009208:	4b15      	ldr	r3, [pc, #84]	@ (8009260 <HAL_RCC_GetClockConfig+0x68>)
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	f003 0203 	and.w	r2, r3, #3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <HAL_RCC_GetClockConfig+0x68>)
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	f003 020f 	and.w	r2, r3, #15
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8009220:	4b0f      	ldr	r3, [pc, #60]	@ (8009260 <HAL_RCC_GetClockConfig+0x68>)
 8009222:	6a1b      	ldr	r3, [r3, #32]
 8009224:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800922c:	4b0c      	ldr	r3, [pc, #48]	@ (8009260 <HAL_RCC_GetClockConfig+0x68>)
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	091b      	lsrs	r3, r3, #4
 8009232:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800923a:	4b09      	ldr	r3, [pc, #36]	@ (8009260 <HAL_RCC_GetClockConfig+0x68>)
 800923c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800923e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009246:	4b07      	ldr	r3, [pc, #28]	@ (8009264 <HAL_RCC_GetClockConfig+0x6c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 020f 	and.w	r2, r3, #15
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	46020c00 	.word	0x46020c00
 8009264:	40022000 	.word	0x40022000

08009268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009270:	4b3e      	ldr	r3, [pc, #248]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800927e:	f7fe fccf 	bl	8007c20 <HAL_PWREx_GetVoltageRange>
 8009282:	6178      	str	r0, [r7, #20]
 8009284:	e019      	b.n	80092ba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009286:	4b39      	ldr	r3, [pc, #228]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009288:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800928c:	4a37      	ldr	r2, [pc, #220]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800928e:	f043 0304 	orr.w	r3, r3, #4
 8009292:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009296:	4b35      	ldr	r3, [pc, #212]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	60fb      	str	r3, [r7, #12]
 80092a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80092a4:	f7fe fcbc 	bl	8007c20 <HAL_PWREx_GetVoltageRange>
 80092a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80092aa:	4b30      	ldr	r3, [pc, #192]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80092ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092b0:	4a2e      	ldr	r2, [pc, #184]	@ (800936c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80092b2:	f023 0304 	bic.w	r3, r3, #4
 80092b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092c0:	d003      	beq.n	80092ca <RCC_SetFlashLatencyFromMSIRange+0x62>
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092c8:	d109      	bne.n	80092de <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092d0:	d202      	bcs.n	80092d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80092d2:	2301      	movs	r3, #1
 80092d4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80092d6:	e033      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80092dc:	e030      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092e4:	d208      	bcs.n	80092f8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092ec:	d102      	bne.n	80092f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80092ee:	2303      	movs	r3, #3
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	e025      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e035      	b.n	8009364 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092fe:	d90f      	bls.n	8009320 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d109      	bne.n	800931a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800930c:	d902      	bls.n	8009314 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	e015      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009314:	2301      	movs	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
 8009318:	e012      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	e00f      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009326:	d109      	bne.n	800933c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800932e:	d102      	bne.n	8009336 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009330:	2301      	movs	r3, #1
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	e004      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009336:	2302      	movs	r3, #2
 8009338:	613b      	str	r3, [r7, #16]
 800933a:	e001      	b.n	8009340 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800933c:	2301      	movs	r3, #1
 800933e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009340:	4b0b      	ldr	r3, [pc, #44]	@ (8009370 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f023 020f 	bic.w	r2, r3, #15
 8009348:	4909      	ldr	r1, [pc, #36]	@ (8009370 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009350:	4b07      	ldr	r3, [pc, #28]	@ (8009370 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	429a      	cmp	r2, r3
 800935c:	d001      	beq.n	8009362 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	46020c00 	.word	0x46020c00
 8009370:	40022000 	.word	0x40022000

08009374 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009378:	b0c8      	sub	sp, #288	@ 0x120
 800937a:	af00      	add	r7, sp, #0
 800937c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009380:	2300      	movs	r3, #0
 8009382:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009386:	2300      	movs	r3, #0
 8009388:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800938c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009394:	f002 0401 	and.w	r4, r2, #1
 8009398:	2500      	movs	r5, #0
 800939a:	ea54 0305 	orrs.w	r3, r4, r5
 800939e:	d00b      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80093a0:	4bd5      	ldr	r3, [pc, #852]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093a6:	f023 0103 	bic.w	r1, r3, #3
 80093aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b0:	4ad1      	ldr	r2, [pc, #836]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093b2:	430b      	orrs	r3, r1
 80093b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f002 0802 	and.w	r8, r2, #2
 80093c4:	f04f 0900 	mov.w	r9, #0
 80093c8:	ea58 0309 	orrs.w	r3, r8, r9
 80093cc:	d00b      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80093ce:	4bca      	ldr	r3, [pc, #808]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80093d4:	f023 010c 	bic.w	r1, r3, #12
 80093d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093de:	4ac6      	ldr	r2, [pc, #792]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093e0:	430b      	orrs	r3, r1
 80093e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	f002 0a04 	and.w	sl, r2, #4
 80093f2:	f04f 0b00 	mov.w	fp, #0
 80093f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80093fa:	d00b      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80093fc:	4bbe      	ldr	r3, [pc, #760]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80093fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009402:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009406:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800940a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940c:	4aba      	ldr	r2, [pc, #744]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800940e:	430b      	orrs	r3, r1
 8009410:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009414:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f002 0308 	and.w	r3, r2, #8
 8009420:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009424:	2300      	movs	r3, #0
 8009426:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800942a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800942e:	460b      	mov	r3, r1
 8009430:	4313      	orrs	r3, r2
 8009432:	d00b      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8009434:	4bb0      	ldr	r3, [pc, #704]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800943a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800943e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009444:	4aac      	ldr	r2, [pc, #688]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009446:	430b      	orrs	r3, r1
 8009448:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800944c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f002 0310 	and.w	r3, r2, #16
 8009458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800945c:	2300      	movs	r3, #0
 800945e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009462:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009466:	460b      	mov	r3, r1
 8009468:	4313      	orrs	r3, r2
 800946a:	d00b      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800946c:	4ba2      	ldr	r3, [pc, #648]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800946e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009472:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800947a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800947c:	4a9e      	ldr	r2, [pc, #632]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800947e:	430b      	orrs	r3, r1
 8009480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009484:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009490:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009494:	2300      	movs	r3, #0
 8009496:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800949a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800949e:	460b      	mov	r3, r1
 80094a0:	4313      	orrs	r3, r2
 80094a2:	d00b      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80094a4:	4b94      	ldr	r3, [pc, #592]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80094a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80094ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b4:	4a90      	ldr	r2, [pc, #576]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80094b6:	430b      	orrs	r3, r1
 80094b8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f002 0320 	and.w	r3, r2, #32
 80094c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80094d2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80094d6:	460b      	mov	r3, r1
 80094d8:	4313      	orrs	r3, r2
 80094da:	d00b      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80094dc:	4b86      	ldr	r3, [pc, #536]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80094de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80094e2:	f023 0107 	bic.w	r1, r3, #7
 80094e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094ec:	4a82      	ldr	r2, [pc, #520]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80094ee:	430b      	orrs	r3, r1
 80094f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009504:	2300      	movs	r3, #0
 8009506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800950a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800950e:	460b      	mov	r3, r1
 8009510:	4313      	orrs	r3, r2
 8009512:	d00b      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8009514:	4b78      	ldr	r3, [pc, #480]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800951a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800951e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009524:	4a74      	ldr	r2, [pc, #464]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009526:	430b      	orrs	r3, r1
 8009528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800952c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009546:	460b      	mov	r3, r1
 8009548:	4313      	orrs	r3, r2
 800954a:	d00b      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800954c:	4b6a      	ldr	r3, [pc, #424]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800954e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009552:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800955a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800955c:	4a66      	ldr	r2, [pc, #408]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800955e:	430b      	orrs	r3, r1
 8009560:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8009570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800957a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800957e:	460b      	mov	r3, r1
 8009580:	4313      	orrs	r3, r2
 8009582:	d00b      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8009584:	4b5c      	ldr	r3, [pc, #368]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800958a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800958e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009594:	4a58      	ldr	r2, [pc, #352]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009596:	430b      	orrs	r3, r1
 8009598:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800959c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80095a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095ac:	2300      	movs	r3, #0
 80095ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80095b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80095b6:	460b      	mov	r3, r1
 80095b8:	4313      	orrs	r3, r2
 80095ba:	d00b      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80095bc:	4b4e      	ldr	r3, [pc, #312]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095c2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80095c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095cc:	4a4a      	ldr	r2, [pc, #296]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095ce:	430b      	orrs	r3, r1
 80095d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 80095d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80095e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80095ee:	460b      	mov	r3, r1
 80095f0:	4313      	orrs	r3, r2
 80095f2:	d00b      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 80095f4:	4b40      	ldr	r3, [pc, #256]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80095f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095fa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80095fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009602:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009604:	4a3c      	ldr	r2, [pc, #240]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009606:	430b      	orrs	r3, r1
 8009608:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 800960c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009614:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009622:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009626:	460b      	mov	r3, r1
 8009628:	4313      	orrs	r3, r2
 800962a:	d00c      	beq.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 800962c:	4b32      	ldr	r3, [pc, #200]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800962e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009632:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009636:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800963a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800963e:	4a2e      	ldr	r2, [pc, #184]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009640:	430b      	orrs	r3, r1
 8009642:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009646:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8009652:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009656:	2300      	movs	r3, #0
 8009658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800965c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009660:	460b      	mov	r3, r1
 8009662:	4313      	orrs	r3, r2
 8009664:	d00c      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8009666:	4b24      	ldr	r3, [pc, #144]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8009668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800966c:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8009670:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009678:	4a1f      	ldr	r2, [pc, #124]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800967a:	430b      	orrs	r3, r1
 800967c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009688:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800968c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009690:	2300      	movs	r3, #0
 8009692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009696:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d00c      	beq.n	80096ba <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80096a0:	4b15      	ldr	r3, [pc, #84]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096a6:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80096aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b2:	4a11      	ldr	r2, [pc, #68]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096b4:	430b      	orrs	r3, r1
 80096b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80096ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80096c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096ca:	2300      	movs	r3, #0
 80096cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4313      	orrs	r3, r2
 80096d8:	d010      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80096da:	4b07      	ldr	r3, [pc, #28]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096e0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80096e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80096e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ec:	4a02      	ldr	r2, [pc, #8]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80096ee:	430b      	orrs	r3, r1
 80096f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80096f4:	e002      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x388>
 80096f6:	bf00      	nop
 80096f8:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80096fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009708:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800970c:	2300      	movs	r3, #0
 800970e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009712:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009716:	460b      	mov	r3, r1
 8009718:	4313      	orrs	r3, r2
 800971a:	d04c      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800971c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009720:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009724:	2b80      	cmp	r3, #128	@ 0x80
 8009726:	d02d      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009728:	2b80      	cmp	r3, #128	@ 0x80
 800972a:	d827      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800972c:	2b60      	cmp	r3, #96	@ 0x60
 800972e:	d02b      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009730:	2b60      	cmp	r3, #96	@ 0x60
 8009732:	d823      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8009734:	2b40      	cmp	r3, #64	@ 0x40
 8009736:	d006      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8009738:	2b40      	cmp	r3, #64	@ 0x40
 800973a:	d81f      	bhi.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009740:	2b20      	cmp	r3, #32
 8009742:	d011      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009744:	e01a      	b.n	800977c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009746:	4bc0      	ldr	r3, [pc, #768]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974a:	4abf      	ldr	r2, [pc, #764]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800974c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009750:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009752:	e01a      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009758:	3308      	adds	r3, #8
 800975a:	4618      	mov	r0, r3
 800975c:	f002 fce8 	bl	800c130 <RCCEx_PLL2_Config>
 8009760:	4603      	mov	r3, r0
 8009762:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009766:	e010      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800976c:	332c      	adds	r3, #44	@ 0x2c
 800976e:	4618      	mov	r0, r3
 8009770:	f002 fd76 	bl	800c260 <RCCEx_PLL3_Config>
 8009774:	4603      	mov	r3, r0
 8009776:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800977a:	e006      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009782:	e002      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009784:	bf00      	nop
 8009786:	e000      	b.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8009788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800978a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10d      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009792:	4bad      	ldr	r3, [pc, #692]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009798:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800979c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097a4:	4aa8      	ldr	r2, [pc, #672]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80097a6:	430b      	orrs	r3, r1
 80097a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80097ac:	e003      	b.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80097b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80097b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80097c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097c6:	2300      	movs	r3, #0
 80097c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80097d0:	460b      	mov	r3, r1
 80097d2:	4313      	orrs	r3, r2
 80097d4:	d053      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80097d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80097da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e2:	d033      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 80097e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097e8:	d82c      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80097ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097ee:	d02f      	beq.n	8009850 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80097f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097f4:	d826      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097fa:	d008      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x49a>
 80097fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009800:	d820      	bhi.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8009802:	2b00      	cmp	r3, #0
 8009804:	d00a      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800980a:	d011      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800980c:	e01a      	b.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800980e:	4b8e      	ldr	r3, [pc, #568]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009812:	4a8d      	ldr	r2, [pc, #564]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009818:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800981a:	e01a      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800981c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009820:	3308      	adds	r3, #8
 8009822:	4618      	mov	r0, r3
 8009824:	f002 fc84 	bl	800c130 <RCCEx_PLL2_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800982e:	e010      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009830:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009834:	332c      	adds	r3, #44	@ 0x2c
 8009836:	4618      	mov	r0, r3
 8009838:	f002 fd12 	bl	800c260 <RCCEx_PLL3_Config>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009842:	e006      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800984a:	e002      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 800984c:	bf00      	nop
 800984e:	e000      	b.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8009850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009852:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10d      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800985a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800985c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009860:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800986c:	4a76      	ldr	r2, [pc, #472]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800986e:	430b      	orrs	r3, r1
 8009870:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009874:	e003      	b.n	800987e <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009876:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800987a:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800987e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009886:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800988a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800988e:	2300      	movs	r3, #0
 8009890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009894:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009898:	460b      	mov	r3, r1
 800989a:	4313      	orrs	r3, r2
 800989c:	d046      	beq.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800989e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80098a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80098aa:	d028      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80098ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80098b0:	d821      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80098b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098b6:	d022      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80098b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80098bc:	d81b      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80098be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c2:	d01c      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80098c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80098c8:	d815      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ce:	d008      	beq.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80098d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d4:	d80f      	bhi.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d011      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80098da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098de:	d00e      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80098e0:	e009      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80098e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80098e6:	3308      	adds	r3, #8
 80098e8:	4618      	mov	r0, r3
 80098ea:	f002 fc21 	bl	800c130 <RCCEx_PLL2_Config>
 80098ee:	4603      	mov	r3, r0
 80098f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80098f4:	e004      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 80098fc:	e000      	b.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x58c>
        break;
 80098fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009900:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10d      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8009908:	4b4f      	ldr	r3, [pc, #316]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800990a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800990e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800991a:	4a4b      	ldr	r2, [pc, #300]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800991c:	430b      	orrs	r3, r1
 800991e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009922:	e003      	b.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009928:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800992c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800993c:	2300      	movs	r3, #0
 800993e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009942:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009946:	460b      	mov	r3, r1
 8009948:	4313      	orrs	r3, r2
 800994a:	d03f      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x658>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800994c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009954:	2b04      	cmp	r3, #4
 8009956:	d81e      	bhi.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8009958:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800995a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995e:	bf00      	nop
 8009960:	0800999f 	.word	0x0800999f
 8009964:	08009975 	.word	0x08009975
 8009968:	08009983 	.word	0x08009983
 800996c:	0800999f 	.word	0x0800999f
 8009970:	0800999f 	.word	0x0800999f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009974:	4b34      	ldr	r3, [pc, #208]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009978:	4a33      	ldr	r2, [pc, #204]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 800997a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800997e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009980:	e00e      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009986:	332c      	adds	r3, #44	@ 0x2c
 8009988:	4618      	mov	r0, r3
 800998a:	f002 fc69 	bl	800c260 <RCCEx_PLL3_Config>
 800998e:	4603      	mov	r3, r0
 8009990:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009994:	e004      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800999c:	e000      	b.n	80099a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
        break;
 800999e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80099a0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10d      	bne.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80099a8:	4b27      	ldr	r3, [pc, #156]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80099aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80099ae:	f023 0107 	bic.w	r1, r3, #7
 80099b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80099ba:	4a23      	ldr	r2, [pc, #140]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 80099bc:	430b      	orrs	r3, r1
 80099be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80099c2:	e003      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x658>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 80099c8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80099cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80099d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099da:	2300      	movs	r3, #0
 80099dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099de:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099e2:	460b      	mov	r3, r1
 80099e4:	4313      	orrs	r3, r2
 80099e6:	d04c      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x70e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80099e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80099ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80099f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099f4:	d02a      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80099f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80099fa:	d821      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80099fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a00:	d026      	beq.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 8009a02:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009a06:	d81b      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009a08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a0c:	d00e      	beq.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009a0e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a12:	d815      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d01d      	beq.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a1c:	d110      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a22:	4a09      	ldr	r2, [pc, #36]	@ (8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>)
 8009a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a28:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009a2a:	e014      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a30:	332c      	adds	r3, #44	@ 0x2c
 8009a32:	4618      	mov	r0, r3
 8009a34:	f002 fc14 	bl	800c260 <RCCEx_PLL3_Config>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009a3e:	e00a      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009a46:	e006      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8009a48:	46020c00 	.word	0x46020c00
        break;
 8009a4c:	bf00      	nop
 8009a4e:	e002      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009a50:	bf00      	nop
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        break;
 8009a54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009a56:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10d      	bne.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x706>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8009a5e:	4baf      	ldr	r3, [pc, #700]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a64:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009a70:	4aaa      	ldr	r2, [pc, #680]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009a72:	430b      	orrs	r3, r1
 8009a74:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009a78:	e003      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a7a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009a7e:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a90:	2300      	movs	r3, #0
 8009a92:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	f000 80b5 	beq.w	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x896>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009aa6:	4b9d      	ldr	r3, [pc, #628]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d113      	bne.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x768>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ab4:	4b99      	ldr	r3, [pc, #612]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aba:	4a98      	ldr	r2, [pc, #608]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009abc:	f043 0304 	orr.w	r3, r3, #4
 8009ac0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009ac4:	4b95      	ldr	r3, [pc, #596]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8009ad2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
      pwrclkchanged = SET;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009adc:	4b90      	ldr	r3, [pc, #576]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae0:	4a8f      	ldr	r2, [pc, #572]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ae8:	f7f9 fe02 	bl	80036f0 <HAL_GetTick>
 8009aec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009af0:	e00b      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x796>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009af2:	f7f9 fdfd 	bl	80036f0 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d903      	bls.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x796>
      {
        ret = HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009b08:	e005      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x7a2>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009b0a:	4b85      	ldr	r3, [pc, #532]	@ (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8009b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d0ed      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
      }
    }

    if (ret == HAL_OK)
 8009b16:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d165      	bne.n	8009bea <HAL_RCCEx_PeriphCLKConfig+0x876>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8009b2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d023      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x808>
 8009b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b38:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8009b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d01b      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x808>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009b44:	4b75      	ldr	r3, [pc, #468]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009b52:	4b72      	ldr	r3, [pc, #456]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b58:	4a70      	ldr	r2, [pc, #448]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009b62:	4b6e      	ldr	r3, [pc, #440]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b68:	4a6c      	ldr	r2, [pc, #432]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b72:	4a6a      	ldr	r2, [pc, #424]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d019      	beq.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x848>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b88:	f7f9 fdb2 	bl	80036f0 <HAL_GetTick>
 8009b8c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b90:	e00d      	b.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b92:	f7f9 fdad 	bl	80036f0 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9c:	1ad2      	subs	r2, r2, r3
 8009b9e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d903      	bls.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0x83a>
          {
            ret = HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
            break;
 8009bac:	e006      	b.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x848>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bae:	4b5b      	ldr	r3, [pc, #364]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d0ea      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x81e>
          }
        }
      }

      if (ret == HAL_OK)
 8009bbc:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d10d      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009bc4:	4b55      	ldr	r3, [pc, #340]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009bca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009bd2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8009bd6:	4a51      	ldr	r2, [pc, #324]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009bd8:	430b      	orrs	r3, r1
 8009bda:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8009bde:	e008      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009be0:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009be4:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
 8009be8:	e003      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bea:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009bee:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009bf2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d107      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x896>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bfa:	4b48      	ldr	r3, [pc, #288]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c00:	4a46      	ldr	r2, [pc, #280]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c02:	f023 0304 	bic.w	r3, r3, #4
 8009c06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8009c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c18:	2300      	movs	r3, #0
 8009c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009c20:	460b      	mov	r3, r1
 8009c22:	4313      	orrs	r3, r2
 8009c24:	d042      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x938>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009c2e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c32:	d022      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x906>
 8009c34:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c38:	d81b      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c3e:	d011      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c44:	d815      	bhi.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d019      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8009c4a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c4e:	d110      	bne.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c54:	3308      	adds	r3, #8
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 fa6a 	bl	800c130 <RCCEx_PLL2_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c62:	e00d      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c64:	4b2d      	ldr	r3, [pc, #180]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c68:	4a2c      	ldr	r2, [pc, #176]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c6e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8009c70:	e006      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009c78:	e002      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8009c7a:	bf00      	nop
 8009c7c:	e000      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x90c>
        break;
 8009c7e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009c80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10d      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x930>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8009c88:	4b24      	ldr	r3, [pc, #144]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c8e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009c9a:	4a20      	ldr	r2, [pc, #128]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009c9c:	430b      	orrs	r3, r1
 8009c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009ca2:	e003      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x938>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ca4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ca8:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009cb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cba:	2300      	movs	r3, #0
 8009cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cbe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	d031      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cd4:	d00b      	beq.n	8009cee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8009cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cda:	d804      	bhi.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d008      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce4:	d007      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x982>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009cec:	e004      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009cee:	bf00      	nop
 8009cf0:	e002      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009cf2:	bf00      	nop
 8009cf4:	e000      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x984>
        break;
 8009cf6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009cf8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d111      	bne.n	8009d24 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009d00:	4b06      	ldr	r3, [pc, #24]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d12:	4a02      	ldr	r2, [pc, #8]	@ (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009d1a:	e007      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
 8009d1c:	46020c00 	.word	0x46020c00
 8009d20:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d24:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009d28:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8009d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009d42:	460b      	mov	r3, r1
 8009d44:	4313      	orrs	r3, r2
 8009d46:	d00c      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8009d48:	4bb2      	ldr	r3, [pc, #712]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d4e:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8009d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009d5a:	4aae      	ldr	r2, [pc, #696]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8009d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009d6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d70:	2300      	movs	r3, #0
 8009d72:	657b      	str	r3, [r7, #84]	@ 0x54
 8009d74:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	d019      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8009d7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d8a:	d105      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009d8c:	4ba1      	ldr	r3, [pc, #644]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d90:	4aa0      	ldr	r2, [pc, #640]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d96:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8009d98:	4b9e      	ldr	r3, [pc, #632]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009d9a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d9e:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009daa:	4a9a      	ldr	r2, [pc, #616]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dac:	430b      	orrs	r3, r1
 8009dae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8009db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	d00c      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009dce:	4b91      	ldr	r3, [pc, #580]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dd4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ddc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009de0:	4a8c      	ldr	r2, [pc, #560]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009de2:	430b      	orrs	r3, r1
 8009de4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009df6:	2300      	movs	r3, #0
 8009df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dfa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009dfe:	460b      	mov	r3, r1
 8009e00:	4313      	orrs	r3, r2
 8009e02:	d00c      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8009e04:	4b83      	ldr	r3, [pc, #524]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009e16:	4a7f      	ldr	r2, [pc, #508]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e26:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e30:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009e34:	460b      	mov	r3, r1
 8009e36:	4313      	orrs	r3, r2
 8009e38:	d00c      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009e3a:	4b76      	ldr	r3, [pc, #472]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e40:	f023 0118 	bic.w	r1, r3, #24
 8009e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e48:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009e4c:	4a71      	ldr	r2, [pc, #452]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8009e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e62:	2300      	movs	r3, #0
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	d032      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8009e70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e7c:	d105      	bne.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e7e:	4b65      	ldr	r3, [pc, #404]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e82:	4a64      	ldr	r2, [pc, #400]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e88:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009e92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e96:	d108      	bne.n	8009eaa <HAL_RCCEx_PeriphCLKConfig+0xb36>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f002 f946 	bl	800c130 <RCCEx_PLL2_Config>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }
    if (ret == HAL_OK)
 8009eaa:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10d      	bne.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8009eb2:	4b58      	ldr	r3, [pc, #352]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009eb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009eb8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009ebc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ec0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ec4:	4a53      	ldr	r2, [pc, #332]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009ecc:	e003      	b.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0xb62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ece:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ed2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8009ed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	2100      	movs	r1, #0
 8009ee0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ee8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009eec:	460b      	mov	r3, r1
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	d04a      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc14>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8009ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ef6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009efa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009efe:	d01e      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0xbca>
 8009f00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009f04:	d825      	bhi.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009f06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f0a:	d00e      	beq.n	8009f2a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
 8009f0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f10:	d81f      	bhi.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d021      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8009f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f1a:	d11a      	bne.n	8009f52 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f1c:	4b3d      	ldr	r3, [pc, #244]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f20:	4a3c      	ldr	r2, [pc, #240]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f26:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009f28:	e018      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2e:	3308      	adds	r3, #8
 8009f30:	4618      	mov	r0, r3
 8009f32:	f002 f8fd 	bl	800c130 <RCCEx_PLL2_Config>
 8009f36:	4603      	mov	r3, r0
 8009f38:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009f3c:	e00e      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8009f3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f42:	332c      	adds	r3, #44	@ 0x2c
 8009f44:	4618      	mov	r0, r3
 8009f46:	f002 f98b 	bl	800c260 <RCCEx_PLL3_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8009f50:	e004      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>

      default:
        ret = HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009f58:	e000      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        break;
 8009f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5c:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10d      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8009f64:	4b2b      	ldr	r3, [pc, #172]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f76:	4927      	ldr	r1, [pc, #156]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009f7e:	e003      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009f84:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8009f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8009f94:	623b      	str	r3, [r7, #32]
 8009f96:	2300      	movs	r3, #0
 8009f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	d03d      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8009fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb0:	d00e      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8009fb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb6:	d815      	bhi.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d017      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fc0:	d110      	bne.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc2:	4b14      	ldr	r3, [pc, #80]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc6:	4a13      	ldr	r2, [pc, #76]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fcc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009fce:	e00e      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f002 f8aa 	bl	800c130 <RCCEx_PLL2_Config>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009fe2:	e004      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      default:
        ret = HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 8009fea:	e000      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009fec:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009fee:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d110      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8009ff6:	4b07      	ldr	r3, [pc, #28]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8009ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ffc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a004:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a008:	4902      	ldr	r1, [pc, #8]	@ (800a014 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a00a:	4313      	orrs	r3, r2
 800a00c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800a010:	e006      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a012:	bf00      	nop
 800a014:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a018:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a01c:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800a020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
 800a032:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a036:	460b      	mov	r3, r1
 800a038:	4313      	orrs	r3, r2
 800a03a:	d00c      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0xce2>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800a03c:	4b68      	ldr	r3, [pc, #416]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a03e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a042:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a046:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a04a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a04e:	4964      	ldr	r1, [pc, #400]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a050:	4313      	orrs	r3, r2
 800a052:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05e:	2100      	movs	r1, #0
 800a060:	6139      	str	r1, [r7, #16]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	617b      	str	r3, [r7, #20]
 800a068:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a06c:	460b      	mov	r3, r1
 800a06e:	4313      	orrs	r3, r2
 800a070:	d036      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(pPeriphClkInit->LtdcClockSelection));

    switch (pPeriphClkInit->LtdcClockSelection)
 800a072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a076:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a07e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a082:	d113      	bne.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2 is used as clock source for LTDC clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a088:	3308      	adds	r3, #8
 800a08a:	4618      	mov	r0, r3
 800a08c:	f002 f850 	bl	800c130 <RCCEx_PLL2_Config>
 800a090:	4603      	mov	r3, r0
 800a092:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a096:	e00d      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for LTDC clock*/
        /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09c:	332c      	adds	r3, #44	@ 0x2c
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f002 f8de 	bl	800c260 <RCCEx_PLL3_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        /* LTDC clock source config set later after clock selection check */
        break;
 800a0aa:	e003      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd40>

      default:
        ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a0b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10d      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    {
      /* Set the source of LTDC clock*/
      __HAL_RCC_LTDC_CONFIG(pPeriphClkInit->LtdcClockSelection);
 800a0bc:	4b48      	ldr	r3, [pc, #288]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a0be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a0c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800a0ce:	4944      	ldr	r1, [pc, #272]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a0dc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(LTDC) */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a0e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	d024      	beq.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(pPeriphClkInit->DsiClockSelection));

    if (pPeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL3)
 800a0fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a100:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a104:	2b00      	cmp	r3, #0
 800a106:	d108      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* PLL3 is used as clock source for DSI clock*/
      /* PLL3 input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
      ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a10c:	332c      	adds	r3, #44	@ 0x2c
 800a10e:	4618      	mov	r0, r3
 800a110:	f002 f8a6 	bl	800c260 <RCCEx_PLL3_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
    }

    if (ret == HAL_OK)
 800a11a:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10d      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0xdca>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(pPeriphClkInit->DsiClockSelection);
 800a122:	4b2f      	ldr	r3, [pc, #188]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a124:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a128:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800a12c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a134:	492a      	ldr	r1, [pc, #168]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a136:	4313      	orrs	r3, r2
 800a138:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a13c:	e003      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a142:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800a146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14e:	2100      	movs	r1, #0
 800a150:	6039      	str	r1, [r7, #0]
 800a152:	f003 0308 	and.w	r3, r3, #8
 800a156:	607b      	str	r3, [r7, #4]
 800a158:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a15c:	460b      	mov	r3, r1
 800a15e:	4313      	orrs	r3, r2
 800a160:	d036      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800a162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a166:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a16a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a16e:	d00d      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 800a170:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800a174:	d811      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a176:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a17a:	d012      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a17c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a180:	d80b      	bhi.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00d      	beq.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a18a:	d106      	bne.n	800a19a <HAL_RCCEx_PeriphCLKConfig+0xe26>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a18c:	4b14      	ldr	r3, [pc, #80]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a190:	4a13      	ldr	r2, [pc, #76]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a192:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a196:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 800a198:	e004      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>

      default:
        ret = HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
        break;
 800a1a0:	e000      	b.n	800a1a4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
        break;
 800a1a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1a4:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10d      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800a1ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a1ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1ba:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a1be:	4908      	ldr	r1, [pc, #32]	@ (800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800a1c6:	e003      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c8:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800a1cc:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800a1d0:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1e0:	46020c00 	.word	0x46020c00

0800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b089      	sub	sp, #36	@ 0x24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800a1ec:	4ba6      	ldr	r3, [pc, #664]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a1f6:	4ba4      	ldr	r3, [pc, #656]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	f003 0303 	and.w	r3, r3, #3
 800a1fe:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a200:	4ba1      	ldr	r3, [pc, #644]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a204:	0a1b      	lsrs	r3, r3, #8
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	3301      	adds	r3, #1
 800a20c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a20e:	4b9e      	ldr	r3, [pc, #632]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	091b      	lsrs	r3, r3, #4
 800a214:	f003 0301 	and.w	r3, r3, #1
 800a218:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a21a:	4b9b      	ldr	r3, [pc, #620]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21e:	08db      	lsrs	r3, r3, #3
 800a220:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	fb02 f303 	mul.w	r3, r2, r3
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a232:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b03      	cmp	r3, #3
 800a23a:	d062      	beq.n	800a302 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2b03      	cmp	r3, #3
 800a240:	f200 8081 	bhi.w	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d024      	beq.n	800a294 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d17a      	bne.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a25a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a262:	4b89      	ldr	r3, [pc, #548]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a26a:	ee07 3a90 	vmov	s15, r3
 800a26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a272:	ed97 6a02 	vldr	s12, [r7, #8]
 800a276:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a286:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a292:	e08f      	b.n	800a3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a294:	4b7c      	ldr	r3, [pc, #496]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800a2a0:	4b79      	ldr	r3, [pc, #484]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	0f1b      	lsrs	r3, r3, #28
 800a2a6:	f003 030f 	and.w	r3, r3, #15
 800a2aa:	e006      	b.n	800a2ba <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800a2ac:	4b76      	ldr	r3, [pc, #472]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a2ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	0f1b      	lsrs	r3, r3, #28
 800a2b6:	f003 030f 	and.w	r3, r3, #15
 800a2ba:	4a76      	ldr	r2, [pc, #472]	@ (800a494 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c0:	ee07 3a90 	vmov	s15, r3
 800a2c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	ee07 3a90 	vmov	s15, r3
 800a2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a2e4:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a300:	e058      	b.n	800a3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	ee07 3a90 	vmov	s15, r3
 800a308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a48c <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800a310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a314:	4b5c      	ldr	r3, [pc, #368]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a324:	ed97 6a02 	vldr	s12, [r7, #8]
 800a328:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a330:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800a334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a338:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a340:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a344:	e036      	b.n	800a3b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a346:	4b50      	ldr	r3, [pc, #320]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800a352:	4b4d      	ldr	r3, [pc, #308]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	0f1b      	lsrs	r3, r3, #28
 800a358:	f003 030f 	and.w	r3, r3, #15
 800a35c:	e006      	b.n	800a36c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800a35e:	4b4a      	ldr	r3, [pc, #296]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a364:	041b      	lsls	r3, r3, #16
 800a366:	0f1b      	lsrs	r3, r3, #28
 800a368:	f003 030f 	and.w	r3, r3, #15
 800a36c:	4a49      	ldr	r2, [pc, #292]	@ (800a494 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800a36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a372:	ee07 3a90 	vmov	s15, r3
 800a376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	ee07 3a90 	vmov	s15, r3
 800a380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	ee07 3a90 	vmov	s15, r3
 800a38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a392:	ed97 6a02 	vldr	s12, [r7, #8]
 800a396:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a490 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800a39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800a3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a3b2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800a3b4:	4b34      	ldr	r3, [pc, #208]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d017      	beq.n	800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a3c0:	4b31      	ldr	r3, [pc, #196]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a3c4:	0a5b      	lsrs	r3, r3, #9
 800a3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ca:	ee07 3a90 	vmov	s15, r3
 800a3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800a3d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3e6:	ee17 2a90 	vmov	r2, s15
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e002      	b.n	800a3f6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800a3f6:	4b24      	ldr	r3, [pc, #144]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d017      	beq.n	800a432 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a402:	4b21      	ldr	r3, [pc, #132]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a406:	0c1b      	lsrs	r3, r3, #16
 800a408:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a40c:	ee07 3a90 	vmov	s15, r3
 800a410:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800a414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a418:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a41c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a428:	ee17 2a90 	vmov	r2, s15
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
 800a430:	e002      	b.n	800a438 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800a438:	4b13      	ldr	r3, [pc, #76]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d017      	beq.n	800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a444:	4b10      	ldr	r3, [pc, #64]	@ (800a488 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800a446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a448:	0e1b      	lsrs	r3, r3, #24
 800a44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800a456:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a45a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800a45e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a46a:	ee17 2a90 	vmov	r2, s15
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a472:	e002      	b.n	800a47a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	609a      	str	r2, [r3, #8]
}
 800a47a:	bf00      	nop
 800a47c:	3724      	adds	r7, #36	@ 0x24
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	46020c00 	.word	0x46020c00
 800a48c:	4b742400 	.word	0x4b742400
 800a490:	46000000 	.word	0x46000000
 800a494:	0800f6f8 	.word	0x0800f6f8

0800a498 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a498:	b480      	push	{r7}
 800a49a:	b089      	sub	sp, #36	@ 0x24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800a4a0:	4ba6      	ldr	r3, [pc, #664]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a4a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800a4aa:	4ba4      	ldr	r3, [pc, #656]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800a4b4:	4ba1      	ldr	r3, [pc, #644]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b8:	0a1b      	lsrs	r3, r3, #8
 800a4ba:	f003 030f 	and.w	r3, r3, #15
 800a4be:	3301      	adds	r3, #1
 800a4c0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800a4c2:	4b9e      	ldr	r3, [pc, #632]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4c6:	091b      	lsrs	r3, r3, #4
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800a4ce:	4b9b      	ldr	r3, [pc, #620]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4d2:	08db      	lsrs	r3, r3, #3
 800a4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	ee07 3a90 	vmov	s15, r3
 800a4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	2b03      	cmp	r3, #3
 800a4ee:	d062      	beq.n	800a5b6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	f200 8081 	bhi.w	800a5fa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d024      	beq.n	800a548 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d17a      	bne.n	800a5fa <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a516:	4b89      	ldr	r3, [pc, #548]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	ee07 3a90 	vmov	s15, r3
 800a522:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a526:	ed97 6a02 	vldr	s12, [r7, #8]
 800a52a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a532:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a546:	e08f      	b.n	800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a548:	4b7c      	ldr	r3, [pc, #496]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800a554:	4b79      	ldr	r3, [pc, #484]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	0f1b      	lsrs	r3, r3, #28
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	e006      	b.n	800a56e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 800a560:	4b76      	ldr	r3, [pc, #472]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a566:	041b      	lsls	r3, r3, #16
 800a568:	0f1b      	lsrs	r3, r3, #28
 800a56a:	f003 030f 	and.w	r3, r3, #15
 800a56e:	4a76      	ldr	r2, [pc, #472]	@ (800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	ee07 3a90 	vmov	s15, r3
 800a582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	ee07 3a90 	vmov	s15, r3
 800a590:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a594:	ed97 6a02 	vldr	s12, [r7, #8]
 800a598:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a59c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800a5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5b4:	e058      	b.n	800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c0:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800a5c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c8:	4b5c      	ldr	r3, [pc, #368]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d0:	ee07 3a90 	vmov	s15, r3
 800a5d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5d8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a5e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a5e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800a5f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a5f8:	e036      	b.n	800a668 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a5fa:	4b50      	ldr	r3, [pc, #320]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d005      	beq.n	800a612 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800a606:	4b4d      	ldr	r3, [pc, #308]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	0f1b      	lsrs	r3, r3, #28
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	e006      	b.n	800a620 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 800a612:	4b4a      	ldr	r3, [pc, #296]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a618:	041b      	lsls	r3, r3, #16
 800a61a:	0f1b      	lsrs	r3, r3, #28
 800a61c:	f003 030f 	and.w	r3, r3, #15
 800a620:	4a49      	ldr	r2, [pc, #292]	@ (800a748 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 800a622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a646:	ed97 6a02 	vldr	s12, [r7, #8]
 800a64a:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a744 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800a64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a656:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800a65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a662:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a666:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800a668:	4b34      	ldr	r3, [pc, #208]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d017      	beq.n	800a6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a674:	4b31      	ldr	r3, [pc, #196]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a678:	0a5b      	lsrs	r3, r3, #9
 800a67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800a686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a68a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a68e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a69a:	ee17 2a90 	vmov	r2, s15
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	e002      	b.n	800a6aa <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800a6aa:	4b24      	ldr	r3, [pc, #144]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d017      	beq.n	800a6e6 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a6b6:	4b21      	ldr	r3, [pc, #132]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	0c1b      	lsrs	r3, r3, #16
 800a6bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6c0:	ee07 3a90 	vmov	s15, r3
 800a6c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800a6c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6cc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a6d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6dc:	ee17 2a90 	vmov	r2, s15
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	605a      	str	r2, [r3, #4]
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800a6ec:	4b13      	ldr	r3, [pc, #76]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d017      	beq.n	800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a6f8:	4b10      	ldr	r3, [pc, #64]	@ (800a73c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800a6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6fc:	0e1b      	lsrs	r3, r3, #24
 800a6fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a702:	ee07 3a90 	vmov	s15, r3
 800a706:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800a70a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a70e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800a712:	edd7 6a07 	vldr	s13, [r7, #28]
 800a716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a71a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a71e:	ee17 2a90 	vmov	r2, s15
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a726:	e002      	b.n	800a72e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	609a      	str	r2, [r3, #8]
}
 800a72e:	bf00      	nop
 800a730:	3724      	adds	r7, #36	@ 0x24
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	46020c00 	.word	0x46020c00
 800a740:	4b742400 	.word	0x4b742400
 800a744:	46000000 	.word	0x46000000
 800a748:	0800f6f8 	.word	0x0800f6f8

0800a74c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	@ 0x24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800a754:	4ba6      	ldr	r3, [pc, #664]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800a75e:	4ba4      	ldr	r3, [pc, #656]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a762:	f003 0303 	and.w	r3, r3, #3
 800a766:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800a768:	4ba1      	ldr	r3, [pc, #644]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a76c:	0a1b      	lsrs	r3, r3, #8
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	3301      	adds	r3, #1
 800a774:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800a776:	4b9e      	ldr	r3, [pc, #632]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a77a:	091b      	lsrs	r3, r3, #4
 800a77c:	f003 0301 	and.w	r3, r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800a782:	4b9b      	ldr	r3, [pc, #620]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a786:	08db      	lsrs	r3, r3, #3
 800a788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	fb02 f303 	mul.w	r3, r2, r3
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d062      	beq.n	800a86a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	f200 8081 	bhi.w	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d024      	beq.n	800a7fc <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d17a      	bne.n	800a8ae <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ca:	4b89      	ldr	r3, [pc, #548]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d2:	ee07 3a90 	vmov	s15, r3
 800a7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7de:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800a9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7f6:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800a7fa:	e08f      	b.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a7fc:	4b7c      	ldr	r3, [pc, #496]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a804:	2b00      	cmp	r3, #0
 800a806:	d005      	beq.n	800a814 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800a808:	4b79      	ldr	r3, [pc, #484]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	0f1b      	lsrs	r3, r3, #28
 800a80e:	f003 030f 	and.w	r3, r3, #15
 800a812:	e006      	b.n	800a822 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 800a814:	4b76      	ldr	r3, [pc, #472]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a816:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	0f1b      	lsrs	r3, r3, #28
 800a81e:	f003 030f 	and.w	r3, r3, #15
 800a822:	4a76      	ldr	r2, [pc, #472]	@ (800a9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	ee07 3a90 	vmov	s15, r3
 800a844:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a848:	ed97 6a02 	vldr	s12, [r7, #8]
 800a84c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800a9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a850:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a854:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a858:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a85c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a860:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a864:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a868:	e058      	b.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	ee07 3a90 	vmov	s15, r3
 800a870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a874:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800a878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a87c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a880:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a884:	ee07 3a90 	vmov	s15, r3
 800a888:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a88c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a890:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a894:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a898:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800a89c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800a8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a8ac:	e036      	b.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a8ae:	4b50      	ldr	r3, [pc, #320]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800a8ba:	4b4d      	ldr	r3, [pc, #308]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	0f1b      	lsrs	r3, r3, #28
 800a8c0:	f003 030f 	and.w	r3, r3, #15
 800a8c4:	e006      	b.n	800a8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800a8c6:	4b4a      	ldr	r3, [pc, #296]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a8c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a8cc:	041b      	lsls	r3, r3, #16
 800a8ce:	0f1b      	lsrs	r3, r3, #28
 800a8d0:	f003 030f 	and.w	r3, r3, #15
 800a8d4:	4a49      	ldr	r2, [pc, #292]	@ (800a9fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800a8d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8da:	ee07 3a90 	vmov	s15, r3
 800a8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	ee07 3a90 	vmov	s15, r3
 800a8e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8f0:	69bb      	ldr	r3, [r7, #24]
 800a8f2:	ee07 3a90 	vmov	s15, r3
 800a8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8fe:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800a9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800a902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a90a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a91a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a91c:	4b34      	ldr	r3, [pc, #208]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d017      	beq.n	800a958 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a928:	4b31      	ldr	r3, [pc, #196]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a92c:	0a5b      	lsrs	r3, r3, #9
 800a92e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a932:	ee07 3a90 	vmov	s15, r3
 800a936:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a93a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a93e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a942:	edd7 6a07 	vldr	s13, [r7, #28]
 800a946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a94e:	ee17 2a90 	vmov	r2, s15
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	e002      	b.n	800a95e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a95e:	4b24      	ldr	r3, [pc, #144]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d017      	beq.n	800a99a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a96a:	4b21      	ldr	r3, [pc, #132]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a96e:	0c1b      	lsrs	r3, r3, #16
 800a970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a97c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a980:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a984:	edd7 6a07 	vldr	s13, [r7, #28]
 800a988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a98c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a990:	ee17 2a90 	vmov	r2, s15
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	605a      	str	r2, [r3, #4]
 800a998:	e002      	b.n	800a9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a9a0:	4b13      	ldr	r3, [pc, #76]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d017      	beq.n	800a9dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a9ac:	4b10      	ldr	r3, [pc, #64]	@ (800a9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800a9ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b0:	0e1b      	lsrs	r3, r3, #24
 800a9b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9b6:	ee07 3a90 	vmov	s15, r3
 800a9ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a9be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a9c2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a9c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9d2:	ee17 2a90 	vmov	r2, s15
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a9da:	e002      	b.n	800a9e2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	609a      	str	r2, [r3, #8]
}
 800a9e2:	bf00      	nop
 800a9e4:	3724      	adds	r7, #36	@ 0x24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	46020c00 	.word	0x46020c00
 800a9f4:	4b742400 	.word	0x4b742400
 800a9f8:	46000000 	.word	0x46000000
 800a9fc:	0800f6f8 	.word	0x0800f6f8

0800aa00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08e      	sub	sp, #56	@ 0x38
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800aa0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa0e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800aa12:	430b      	orrs	r3, r1
 800aa14:	d145      	bne.n	800aaa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800aa16:	4ba7      	ldr	r3, [pc, #668]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aa18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa20:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800aa22:	4ba4      	ldr	r3, [pc, #656]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aa24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d108      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800aa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa36:	d104      	bne.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800aa38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa3e:	f001 bb5a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800aa42:	4b9c      	ldr	r3, [pc, #624]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aa44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa50:	d114      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa58:	d110      	bne.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa5a:	4b96      	ldr	r3, [pc, #600]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aa5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aa60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa68:	d103      	bne.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800aa6a:	23fa      	movs	r3, #250	@ 0xfa
 800aa6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa6e:	f001 bb42 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800aa72:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aa78:	f001 bb3d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800aa7c:	4b8d      	ldr	r3, [pc, #564]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa88:	d107      	bne.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa90:	d103      	bne.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800aa92:	4b89      	ldr	r3, [pc, #548]	@ (800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800aa94:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa96:	f001 bb2e 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa9e:	f001 bb2a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aaa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaa6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800aaaa:	430b      	orrs	r3, r1
 800aaac:	d151      	bne.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800aaae:	4b81      	ldr	r3, [pc, #516]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800aab0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aab4:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800aab8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	2b80      	cmp	r3, #128	@ 0x80
 800aabe:	d035      	beq.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800aac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac2:	2b80      	cmp	r3, #128	@ 0x80
 800aac4:	d841      	bhi.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	2b60      	cmp	r3, #96	@ 0x60
 800aaca:	d02a      	beq.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800aacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aace:	2b60      	cmp	r3, #96	@ 0x60
 800aad0:	d83b      	bhi.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800aad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad4:	2b40      	cmp	r3, #64	@ 0x40
 800aad6:	d009      	beq.n	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800aad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aada:	2b40      	cmp	r3, #64	@ 0x40
 800aadc:	d835      	bhi.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00c      	beq.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	2b20      	cmp	r3, #32
 800aae8:	d012      	beq.n	800ab10 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800aaea:	e02e      	b.n	800ab4a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fb77 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aafa:	f001 bafc 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aafe:	f107 0318 	add.w	r3, r7, #24
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff fcc8 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab0c:	f001 baf3 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fe19 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab1e:	f001 baea 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800ab22:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab28:	f001 bae5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab2c:	4b61      	ldr	r3, [pc, #388]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab38:	d103      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800ab3a:	4b60      	ldr	r3, [pc, #384]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ab3c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab3e:	f001 bada 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab46:	f001 bad6 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :
      {
        frequency = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab4e:	f001 bad2 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ab52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab56:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ab5a:	430b      	orrs	r3, r1
 800ab5c:	d158      	bne.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800ab5e:	4b55      	ldr	r3, [pc, #340]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ab60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab70:	d03b      	beq.n	800abea <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ab72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab78:	d846      	bhi.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ab7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab80:	d02e      	beq.n	800abe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800ab82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab88:	d83e      	bhi.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d00b      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab98:	d836      	bhi.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00d      	beq.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aba6:	d012      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800aba8:	e02e      	b.n	800ac08 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fb18 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abb8:	f001 ba9d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abbc:	f107 0318 	add.w	r3, r7, #24
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fc69 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abca:	f001 ba94 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abce:	f107 030c 	add.w	r3, r7, #12
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff fdba 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abdc:	f001 ba8b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800abe0:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800abe4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abe6:	f001 ba86 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abea:	4b32      	ldr	r3, [pc, #200]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf6:	d103      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800abf8:	4b30      	ldr	r3, [pc, #192]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800abfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800abfc:	f001 ba7b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac04:	f001 ba77 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac0c:	f001 ba73 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800ac10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac14:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	d126      	bne.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800ac1c:	4b25      	ldr	r3, [pc, #148]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac26:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800ac28:	4b22      	ldr	r3, [pc, #136]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac34:	d106      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d103      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800ac3c:	4b1f      	ldr	r3, [pc, #124]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ac3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac40:	f001 ba59 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800ac44:	4b1b      	ldr	r3, [pc, #108]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac50:	d107      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac58:	d103      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800ac5a:	4b19      	ldr	r3, [pc, #100]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ac5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac5e:	f001 ba4a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800ac62:	2300      	movs	r3, #0
 800ac64:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac66:	f001 ba46 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800ac6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6e:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800ac72:	430b      	orrs	r3, r1
 800ac74:	d16e      	bne.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ac76:	4b0f      	ldr	r3, [pc, #60]	@ (800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800ac78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ac7c:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ac80:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ac82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac84:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac88:	d03d      	beq.n	800ad06 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ac90:	d85c      	bhi.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac98:	d014      	beq.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aca0:	d854      	bhi.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800aca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d01f      	beq.n	800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800acae:	d012      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800acb0:	e04c      	b.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800acb2:	bf00      	nop
 800acb4:	46020c00 	.word	0x46020c00
 800acb8:	0007a120 	.word	0x0007a120
 800acbc:	00f42400 	.word	0x00f42400
 800acc0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fa8b 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800acce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acd2:	f001 ba10 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd6:	f107 0318 	add.w	r3, r7, #24
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fbdc 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800ace0:	69fb      	ldr	r3, [r7, #28]
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ace4:	f001 ba07 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800ace8:	4ba7      	ldr	r3, [pc, #668]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acf4:	d103      	bne.n	800acfe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800acf6:	4ba5      	ldr	r3, [pc, #660]	@ (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800acf8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800acfa:	f001 b9fc 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800acfe:	2300      	movs	r3, #0
 800ad00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad02:	f001 b9f8 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad06:	4ba0      	ldr	r3, [pc, #640]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f003 0320 	and.w	r3, r3, #32
 800ad0e:	2b20      	cmp	r3, #32
 800ad10:	d118      	bne.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad12:	4b9d      	ldr	r3, [pc, #628]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d005      	beq.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ad1e:	4b9a      	ldr	r3, [pc, #616]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad20:	689b      	ldr	r3, [r3, #8]
 800ad22:	0e1b      	lsrs	r3, r3, #24
 800ad24:	f003 030f 	and.w	r3, r3, #15
 800ad28:	e006      	b.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800ad2a:	4b97      	ldr	r3, [pc, #604]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad30:	041b      	lsls	r3, r3, #16
 800ad32:	0e1b      	lsrs	r3, r3, #24
 800ad34:	f003 030f 	and.w	r3, r3, #15
 800ad38:	4a95      	ldr	r2, [pc, #596]	@ (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ad3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ad40:	f001 b9d9 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800ad44:	2300      	movs	r3, #0
 800ad46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad48:	f001 b9d5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default :

        frequency = 0U;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad50:	f001 b9d1 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ad54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad58:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800ad5c:	430b      	orrs	r3, r1
 800ad5e:	d17f      	bne.n	800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ad60:	4b89      	ldr	r3, [pc, #548]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800ad6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d165      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800ad72:	4b85      	ldr	r3, [pc, #532]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ad74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ad78:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800ad7c:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800ad7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad80:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad84:	d034      	beq.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800ad8c:	d853      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad94:	d00b      	beq.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800ad96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad9c:	d84b      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d016      	beq.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800ada4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800adaa:	d009      	beq.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800adac:	e043      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fa16 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adba:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800adbc:	f001 b99b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adc0:	f107 0318 	add.w	r3, r7, #24
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fb67 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800adce:	f001 b992 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800add2:	4b6d      	ldr	r3, [pc, #436]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800adda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800adde:	d103      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800ade0:	4b6a      	ldr	r3, [pc, #424]	@ (800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800ade2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ade4:	f001 b987 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800adec:	f001 b983 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800adf0:	4b65      	ldr	r3, [pc, #404]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0320 	and.w	r3, r3, #32
 800adf8:	2b20      	cmp	r3, #32
 800adfa:	d118      	bne.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800adfc:	4b62      	ldr	r3, [pc, #392]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d005      	beq.n	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800ae08:	4b5f      	ldr	r3, [pc, #380]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	0e1b      	lsrs	r3, r3, #24
 800ae0e:	f003 030f 	and.w	r3, r3, #15
 800ae12:	e006      	b.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ae14:	4b5c      	ldr	r3, [pc, #368]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae1a:	041b      	lsls	r3, r3, #16
 800ae1c:	0e1b      	lsrs	r3, r3, #24
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	4a5b      	ldr	r2, [pc, #364]	@ (800af90 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800ae24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae28:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800ae2a:	f001 b964 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            frequency = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ae32:	f001 b960 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
        default :
        {
          frequency = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800ae3a:	f001 b95c 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae44:	d108      	bne.n	800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff f9ca 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae54:	f001 b94f 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else
    {
      frequency = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae5c:	f001 b94b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800ae60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae64:	1e51      	subs	r1, r2, #1
 800ae66:	430b      	orrs	r3, r1
 800ae68:	d136      	bne.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ae6a:	4b47      	ldr	r3, [pc, #284]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ae70:	f003 0303 	and.w	r3, r3, #3
 800ae74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ae76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800ae7c:	f7fe f994 	bl	80091a8 <HAL_RCC_GetPCLK2Freq>
 800ae80:	6378      	str	r0, [r7, #52]	@ 0x34
 800ae82:	f001 b938 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d104      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ae8c:	f7fe f85c 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800ae90:	6378      	str	r0, [r7, #52]	@ 0x34
 800ae92:	f001 b930 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ae96:	4b3c      	ldr	r3, [pc, #240]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aea2:	d106      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d103      	bne.n	800aeb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800aeaa:	4b3a      	ldr	r3, [pc, #232]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800aeac:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeae:	f001 b922 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800aeb2:	4b35      	ldr	r3, [pc, #212]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aeb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d107      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800aec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec2:	2b03      	cmp	r3, #3
 800aec4:	d104      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800aec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aeca:	637b      	str	r3, [r7, #52]	@ 0x34
 800aecc:	f001 b913 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aed4:	f001 b90f 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800aed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aedc:	1e91      	subs	r1, r2, #2
 800aede:	430b      	orrs	r3, r1
 800aee0:	d136      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800aee2:	4b29      	ldr	r3, [pc, #164]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800aee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aee8:	f003 030c 	and.w	r3, r3, #12
 800aeec:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aef4:	f7fe f944 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800aef8:	6378      	str	r0, [r7, #52]	@ 0x34
 800aefa:	f001 b8fc 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800aefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af00:	2b04      	cmp	r3, #4
 800af02:	d104      	bne.n	800af0e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af04:	f7fe f820 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800af08:	6378      	str	r0, [r7, #52]	@ 0x34
 800af0a:	f001 b8f4 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800af0e:	4b1e      	ldr	r3, [pc, #120]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af1a:	d106      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800af1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1e:	2b08      	cmp	r3, #8
 800af20:	d103      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800af22:	4b1c      	ldr	r3, [pc, #112]	@ (800af94 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800af24:	637b      	str	r3, [r7, #52]	@ 0x34
 800af26:	f001 b8e6 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800af2a:	4b17      	ldr	r3, [pc, #92]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b02      	cmp	r3, #2
 800af36:	d107      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	2b0c      	cmp	r3, #12
 800af3c:	d104      	bne.n	800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af42:	637b      	str	r3, [r7, #52]	@ 0x34
 800af44:	f001 b8d7 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af4c:	f001 b8d3 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800af50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af54:	1f11      	subs	r1, r2, #4
 800af56:	430b      	orrs	r3, r1
 800af58:	d13f      	bne.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800af5a:	4b0b      	ldr	r3, [pc, #44]	@ (800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800af5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af64:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800af66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d104      	bne.n	800af76 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af6c:	f7fe f908 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800af70:	6378      	str	r0, [r7, #52]	@ 0x34
 800af72:	f001 b8c0 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	2b10      	cmp	r3, #16
 800af7a:	d10d      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800af7c:	f7fd ffe4 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800af80:	6378      	str	r0, [r7, #52]	@ 0x34
 800af82:	f001 b8b8 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800af86:	bf00      	nop
 800af88:	46020c00 	.word	0x46020c00
 800af8c:	02dc6c00 	.word	0x02dc6c00
 800af90:	0800f6f8 	.word	0x0800f6f8
 800af94:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800af98:	4ba8      	ldr	r3, [pc, #672]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afa4:	d106      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa8:	2b20      	cmp	r3, #32
 800afaa:	d103      	bne.n	800afb4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800afac:	4ba4      	ldr	r3, [pc, #656]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800afae:	637b      	str	r3, [r7, #52]	@ 0x34
 800afb0:	f001 b8a1 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800afb4:	4ba1      	ldr	r3, [pc, #644]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800afb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d107      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800afc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc4:	2b30      	cmp	r3, #48	@ 0x30
 800afc6:	d104      	bne.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800afc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afce:	f001 b892 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800afd2:	2300      	movs	r3, #0
 800afd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800afd6:	f001 b88e 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800afda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afde:	f1a2 0108 	sub.w	r1, r2, #8
 800afe2:	430b      	orrs	r3, r1
 800afe4:	d136      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800afe6:	4b95      	ldr	r3, [pc, #596]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800afe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aff0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800aff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d104      	bne.n	800b002 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aff8:	f7fe f8c2 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800affc:	6378      	str	r0, [r7, #52]	@ 0x34
 800affe:	f001 b87a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b004:	2b40      	cmp	r3, #64	@ 0x40
 800b006:	d104      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b008:	f7fd ff9e 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b00c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b00e:	f001 b872 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b012:	4b8a      	ldr	r3, [pc, #552]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b01a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b01e:	d106      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b022:	2b80      	cmp	r3, #128	@ 0x80
 800b024:	d103      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b026:	4b86      	ldr	r3, [pc, #536]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02a:	f001 b864 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b02e:	4b83      	ldr	r3, [pc, #524]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d107      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b040:	d104      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b046:	637b      	str	r3, [r7, #52]	@ 0x34
 800b048:	f001 b855 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800b04c:	2300      	movs	r3, #0
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b050:	f001 b851 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800b054:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b058:	f1a2 0110 	sub.w	r1, r2, #16
 800b05c:	430b      	orrs	r3, r1
 800b05e:	d139      	bne.n	800b0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800b060:	4b76      	ldr	r3, [pc, #472]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b066:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b06a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d104      	bne.n	800b07c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b072:	f7fe f885 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b076:	6378      	str	r0, [r7, #52]	@ 0x34
 800b078:	f001 b83d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800b07c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b07e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b082:	d104      	bne.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b084:	f7fd ff60 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b088:	6378      	str	r0, [r7, #52]	@ 0x34
 800b08a:	f001 b834 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800b08e:	4b6b      	ldr	r3, [pc, #428]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b09a:	d107      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800b09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0a2:	d103      	bne.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800b0a4:	4b66      	ldr	r3, [pc, #408]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0a8:	f001 b825 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800b0ac:	4b63      	ldr	r3, [pc, #396]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b0ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	d108      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0c0:	d104      	bne.n	800b0cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800b0c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0c8:	f001 b815 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0d0:	f001 b811 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 800b0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0d8:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	d139      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800b0e0:	4b56      	ldr	r3, [pc, #344]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b0e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b0e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b0ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d104      	bne.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b0f2:	f7fe f845 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b0f6:	6378      	str	r0, [r7, #52]	@ 0x34
 800b0f8:	f000 bffd 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b102:	d104      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b104:	f7fd ff20 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b108:	6378      	str	r0, [r7, #52]	@ 0x34
 800b10a:	f000 bff4 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800b10e:	4b4b      	ldr	r3, [pc, #300]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b11a:	d107      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b122:	d103      	bne.n	800b12c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 800b124:	4b46      	ldr	r3, [pc, #280]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b126:	637b      	str	r3, [r7, #52]	@ 0x34
 800b128:	f000 bfe5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 800b12c:	4b43      	ldr	r3, [pc, #268]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b12e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b132:	f003 0302 	and.w	r3, r3, #2
 800b136:	2b02      	cmp	r3, #2
 800b138:	d108      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800b13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b140:	d104      	bne.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 800b142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b146:	637b      	str	r3, [r7, #52]	@ 0x34
 800b148:	f000 bfd5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b150:	f000 bfd1 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800b154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b158:	f1a2 0120 	sub.w	r1, r2, #32
 800b15c:	430b      	orrs	r3, r1
 800b15e:	d158      	bne.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800b160:	4b36      	ldr	r3, [pc, #216]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800b16c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800b172:	f7fe f82d 	bl	80091d0 <HAL_RCC_GetPCLK3Freq>
 800b176:	6378      	str	r0, [r7, #52]	@ 0x34
 800b178:	f000 bfbd 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800b17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d104      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b182:	f7fd fee1 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b186:	6378      	str	r0, [r7, #52]	@ 0x34
 800b188:	f000 bfb5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800b18c:	4b2b      	ldr	r3, [pc, #172]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b198:	d106      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800b19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	d103      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 800b1a0:	4b27      	ldr	r3, [pc, #156]	@ (800b240 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b1a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a4:	f000 bfa7 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800b1a8:	4b24      	ldr	r3, [pc, #144]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d107      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800b1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d104      	bne.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 800b1bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c2:	f000 bf98 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800b1c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d11b      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d118      	bne.n	800b20a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b1d8:	4b18      	ldr	r3, [pc, #96]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 800b1e4:	4b15      	ldr	r3, [pc, #84]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	0e1b      	lsrs	r3, r3, #24
 800b1ea:	f003 030f 	and.w	r3, r3, #15
 800b1ee:	e006      	b.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 800b1f0:	4b12      	ldr	r3, [pc, #72]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b1f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b1f6:	041b      	lsls	r3, r3, #16
 800b1f8:	0e1b      	lsrs	r3, r3, #24
 800b1fa:	f003 030f 	and.w	r3, r3, #15
 800b1fe:	4a11      	ldr	r2, [pc, #68]	@ (800b244 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b204:	637b      	str	r3, [r7, #52]	@ 0x34
 800b206:	f000 bf76 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800b20a:	2300      	movs	r3, #0
 800b20c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b20e:	f000 bf72 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800b212:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b216:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b21a:	430b      	orrs	r3, r1
 800b21c:	d172      	bne.n	800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800b21e:	4b07      	ldr	r3, [pc, #28]	@ (800b23c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800b220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b224:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b228:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b230:	d10a      	bne.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b232:	f7fd fe89 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b236:	6378      	str	r0, [r7, #52]	@ 0x34
 800b238:	f000 bf5d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b23c:	46020c00 	.word	0x46020c00
 800b240:	00f42400 	.word	0x00f42400
 800b244:	0800f6f8 	.word	0x0800f6f8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b24e:	d108      	bne.n	800b262 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b250:	f107 0318 	add.w	r3, r7, #24
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff f91f 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800b25a:	6a3b      	ldr	r3, [r7, #32]
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b25e:	f000 bf4a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	2b00      	cmp	r3, #0
 800b266:	d104      	bne.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800b268:	f7fd ff70 	bl	800914c <HAL_RCC_GetHCLKFreq>
 800b26c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b26e:	f000 bf42 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b278:	d122      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b27a:	4bb0      	ldr	r3, [pc, #704]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0320 	and.w	r3, r3, #32
 800b282:	2b20      	cmp	r3, #32
 800b284:	d118      	bne.n	800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b286:	4bad      	ldr	r3, [pc, #692]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d005      	beq.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 800b292:	4baa      	ldr	r3, [pc, #680]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	0e1b      	lsrs	r3, r3, #24
 800b298:	f003 030f 	and.w	r3, r3, #15
 800b29c:	e006      	b.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 800b29e:	4ba7      	ldr	r3, [pc, #668]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b2a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b2a4:	041b      	lsls	r3, r3, #16
 800b2a6:	0e1b      	lsrs	r3, r3, #24
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	4aa4      	ldr	r2, [pc, #656]	@ (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b2ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2b4:	f000 bf1f 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2bc:	f000 bf1b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800b2c0:	4b9e      	ldr	r3, [pc, #632]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2cc:	d107      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b2d4:	d103      	bne.n	800b2de <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800b2d6:	4b9b      	ldr	r3, [pc, #620]	@ (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2da:	f000 bf0c 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800b2de:	4b97      	ldr	r3, [pc, #604]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ea:	d107      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2f2:	d103      	bne.n	800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 800b2f4:	4b93      	ldr	r3, [pc, #588]	@ (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b2f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2f8:	f000 befd 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b300:	f000 bef9 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800b304:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b308:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b30c:	430b      	orrs	r3, r1
 800b30e:	d158      	bne.n	800b3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800b310:	4b8a      	ldr	r3, [pc, #552]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b316:	f003 0307 	and.w	r3, r3, #7
 800b31a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31e:	2b04      	cmp	r3, #4
 800b320:	d84b      	bhi.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 800b322:	a201      	add	r2, pc, #4	@ (adr r2, 800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 800b324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b328:	0800b361 	.word	0x0800b361
 800b32c:	0800b33d 	.word	0x0800b33d
 800b330:	0800b34f 	.word	0x0800b34f
 800b334:	0800b36b 	.word	0x0800b36b
 800b338:	0800b375 	.word	0x0800b375
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b33c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe ff4f 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b348:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b34a:	f000 bed4 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b34e:	f107 030c 	add.w	r3, r7, #12
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff f9fa 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b35c:	f000 becb 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b360:	f7fd fef4 	bl	800914c <HAL_RCC_GetHCLKFreq>
 800b364:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b366:	f000 bec6 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b36a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b36e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b370:	f000 bec1 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b374:	4b71      	ldr	r3, [pc, #452]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f003 0320 	and.w	r3, r3, #32
 800b37c:	2b20      	cmp	r3, #32
 800b37e:	d118      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b380:	4b6e      	ldr	r3, [pc, #440]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 800b38c:	4b6b      	ldr	r3, [pc, #428]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	0e1b      	lsrs	r3, r3, #24
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	e006      	b.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800b398:	4b68      	ldr	r3, [pc, #416]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b39a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b39e:	041b      	lsls	r3, r3, #16
 800b3a0:	0e1b      	lsrs	r3, r3, #24
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	4a66      	ldr	r2, [pc, #408]	@ (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b3ae:	f000 bea2 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3b6:	f000 be9e 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b3be:	f000 be9a 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800b3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3c6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800b3ca:	430b      	orrs	r3, r1
 800b3cc:	d167      	bne.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800b3ce:	4b5b      	ldr	r3, [pc, #364]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b3d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b3d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b3e0:	d036      	beq.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b3e8:	d855      	bhi.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b3f0:	d029      	beq.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b3f8:	d84d      	bhi.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b400:	d013      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b408:	d845      	bhi.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d015      	beq.n	800b43c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b416:	d13e      	bne.n	800b496 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b418:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fe fee1 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b424:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b426:	f000 be66 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	4618      	mov	r0, r3
 800b430:	f7ff f98c 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b438:	f000 be5d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800b43c:	f7fd fe86 	bl	800914c <HAL_RCC_GetHCLKFreq>
 800b440:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b442:	f000 be58 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b446:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b44a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b44c:	f000 be53 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b450:	4b3a      	ldr	r3, [pc, #232]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b20      	cmp	r3, #32
 800b45a:	d118      	bne.n	800b48e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b45c:	4b37      	ldr	r3, [pc, #220]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800b468:	4b34      	ldr	r3, [pc, #208]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	0e1b      	lsrs	r3, r3, #24
 800b46e:	f003 030f 	and.w	r3, r3, #15
 800b472:	e006      	b.n	800b482 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b474:	4b31      	ldr	r3, [pc, #196]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b47a:	041b      	lsls	r3, r3, #16
 800b47c:	0e1b      	lsrs	r3, r3, #24
 800b47e:	f003 030f 	and.w	r3, r3, #15
 800b482:	4a2f      	ldr	r2, [pc, #188]	@ (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b48a:	f000 be34 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b492:	f000 be30 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b49a:	f000 be2c 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800b49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	d152      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800b4aa:	4b24      	ldr	r3, [pc, #144]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b4b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b4b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d104      	bne.n	800b4c6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b4bc:	f7fd fe60 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b4c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4c2:	f000 be18 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4cc:	d104      	bne.n	800b4d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b4ce:	f7fd fd3b 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b4d2:	6378      	str	r0, [r7, #52]	@ 0x34
 800b4d4:	f000 be0f 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800b4d8:	4b18      	ldr	r3, [pc, #96]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e4:	d107      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4ec:	d103      	bne.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 800b4ee:	4b15      	ldr	r3, [pc, #84]	@ (800b544 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800b4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4f2:	f000 be00 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800b4f6:	4b11      	ldr	r3, [pc, #68]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0320 	and.w	r3, r3, #32
 800b4fe:	2b20      	cmp	r3, #32
 800b500:	d122      	bne.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 800b502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b508:	d11e      	bne.n	800b548 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b50a:	4b0c      	ldr	r3, [pc, #48]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d005      	beq.n	800b522 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800b516:	4b09      	ldr	r3, [pc, #36]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	0e1b      	lsrs	r3, r3, #24
 800b51c:	f003 030f 	and.w	r3, r3, #15
 800b520:	e006      	b.n	800b530 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 800b522:	4b06      	ldr	r3, [pc, #24]	@ (800b53c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800b524:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b528:	041b      	lsls	r3, r3, #16
 800b52a:	0e1b      	lsrs	r3, r3, #24
 800b52c:	f003 030f 	and.w	r3, r3, #15
 800b530:	4a03      	ldr	r2, [pc, #12]	@ (800b540 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 800b532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b536:	637b      	str	r3, [r7, #52]	@ 0x34
 800b538:	f000 bddd 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b53c:	46020c00 	.word	0x46020c00
 800b540:	0800f6f8 	.word	0x0800f6f8
 800b544:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b54c:	f000 bdd3 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800b550:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b554:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800b558:	430b      	orrs	r3, r1
 800b55a:	d14c      	bne.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800b55c:	4ba8      	ldr	r3, [pc, #672]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b55e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b562:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b566:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800b568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d104      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b56e:	f7fd fe07 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b572:	6378      	str	r0, [r7, #52]	@ 0x34
 800b574:	f000 bdbf 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b57e:	d104      	bne.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b580:	f7fd fce2 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b584:	6378      	str	r0, [r7, #52]	@ 0x34
 800b586:	f000 bdb6 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800b58a:	4b9d      	ldr	r3, [pc, #628]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b596:	d107      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b59e:	d103      	bne.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 800b5a0:	4b98      	ldr	r3, [pc, #608]	@ (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b5a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5a4:	f000 bda7 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800b5a8:	4b95      	ldr	r3, [pc, #596]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0320 	and.w	r3, r3, #32
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d11c      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5ba:	d118      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b5bc:	4b90      	ldr	r3, [pc, #576]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d005      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800b5c8:	4b8d      	ldr	r3, [pc, #564]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	0e1b      	lsrs	r3, r3, #24
 800b5ce:	f003 030f 	and.w	r3, r3, #15
 800b5d2:	e006      	b.n	800b5e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 800b5d4:	4b8a      	ldr	r3, [pc, #552]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b5d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b5da:	041b      	lsls	r3, r3, #16
 800b5dc:	0e1b      	lsrs	r3, r3, #24
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	4a89      	ldr	r2, [pc, #548]	@ (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5ea:	f000 bd84 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5f2:	f000 bd80 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800b5f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b5fe:	430b      	orrs	r3, r1
 800b600:	d158      	bne.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800b602:	4b7f      	ldr	r3, [pc, #508]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b608:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b60c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b610:	2bc0      	cmp	r3, #192	@ 0xc0
 800b612:	d028      	beq.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800b614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b616:	2bc0      	cmp	r3, #192	@ 0xc0
 800b618:	d848      	bhi.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	2b80      	cmp	r3, #128	@ 0x80
 800b61e:	d00e      	beq.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b622:	2b80      	cmp	r3, #128	@ 0x80
 800b624:	d842      	bhi.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d003      	beq.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 800b62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62e:	2b40      	cmp	r3, #64	@ 0x40
 800b630:	d014      	beq.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800b632:	e03b      	b.n	800b6ac <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800b634:	f7fd fdcc 	bl	80091d0 <HAL_RCC_GetPCLK3Freq>
 800b638:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b63a:	f000 bd5c 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b63e:	4b70      	ldr	r3, [pc, #448]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b64a:	d103      	bne.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 800b64c:	4b6d      	ldr	r3, [pc, #436]	@ (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b64e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b650:	f000 bd51 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b658:	f000 bd4d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800b65c:	f7fd fc74 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b660:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b662:	f000 bd48 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b666:	4b66      	ldr	r3, [pc, #408]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d118      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b672:	4b63      	ldr	r3, [pc, #396]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 800b67e:	4b60      	ldr	r3, [pc, #384]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	0e1b      	lsrs	r3, r3, #24
 800b684:	f003 030f 	and.w	r3, r3, #15
 800b688:	e006      	b.n	800b698 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800b68a:	4b5d      	ldr	r3, [pc, #372]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b68c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b690:	041b      	lsls	r3, r3, #16
 800b692:	0e1b      	lsrs	r3, r3, #24
 800b694:	f003 030f 	and.w	r3, r3, #15
 800b698:	4a5b      	ldr	r2, [pc, #364]	@ (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6a0:	f000 bd29 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6a8:	f000 bd25 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      default:
      {
        frequency = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6b0:	f000 bd21 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800b6b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6b8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	d14c      	bne.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800b6c0:	4b4f      	ldr	r3, [pc, #316]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b6c6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b6ca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d104      	bne.n	800b6dc <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b6d2:	f7fd fd55 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b6d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6d8:	f000 bd0d 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800b6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b6e2:	d104      	bne.n	800b6ee <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b6e4:	f7fd fc30 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b6e8:	6378      	str	r0, [r7, #52]	@ 0x34
 800b6ea:	f000 bd04 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800b6ee:	4b44      	ldr	r3, [pc, #272]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b6f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6fa:	d107      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b702:	d103      	bne.n	800b70c <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 800b704:	4b3f      	ldr	r3, [pc, #252]	@ (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b706:	637b      	str	r3, [r7, #52]	@ 0x34
 800b708:	f000 bcf5 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800b70c:	4b3c      	ldr	r3, [pc, #240]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f003 0320 	and.w	r3, r3, #32
 800b714:	2b20      	cmp	r3, #32
 800b716:	d11c      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 800b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b71e:	d118      	bne.n	800b752 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b720:	4b37      	ldr	r3, [pc, #220]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 800b72c:	4b34      	ldr	r3, [pc, #208]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	0e1b      	lsrs	r3, r3, #24
 800b732:	f003 030f 	and.w	r3, r3, #15
 800b736:	e006      	b.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800b738:	4b31      	ldr	r3, [pc, #196]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b73a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	0e1b      	lsrs	r3, r3, #24
 800b742:	f003 030f 	and.w	r3, r3, #15
 800b746:	4a30      	ldr	r2, [pc, #192]	@ (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b74e:	f000 bcd2 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	637b      	str	r3, [r7, #52]	@ 0x34
 800b756:	f000 bcce 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 800b75a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b75e:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 800b762:	430b      	orrs	r3, r1
 800b764:	d152      	bne.n	800b80c <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 800b766:	4b26      	ldr	r3, [pc, #152]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b768:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b76c:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800b770:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 800b772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b778:	f7fd fd02 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b77c:	6378      	str	r0, [r7, #52]	@ 0x34
 800b77e:	f000 bcba 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b788:	d104      	bne.n	800b794 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b78a:	f7fd fbdd 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b78e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b790:	f000 bcb1 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 800b794:	4b1a      	ldr	r3, [pc, #104]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b79c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7a0:	d107      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 800b7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7a8:	d103      	bne.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 800b7aa:	4b16      	ldr	r3, [pc, #88]	@ (800b804 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 800b7ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ae:	f000 bca2 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 800b7b2:	4b13      	ldr	r3, [pc, #76]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 0320 	and.w	r3, r3, #32
 800b7ba:	2b20      	cmp	r3, #32
 800b7bc:	d11c      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800b7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7c4:	d118      	bne.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d005      	beq.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 800b7d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	0e1b      	lsrs	r3, r3, #24
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	e006      	b.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 800b7de:	4b08      	ldr	r3, [pc, #32]	@ (800b800 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800b7e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b7e4:	041b      	lsls	r3, r3, #16
 800b7e6:	0e1b      	lsrs	r3, r3, #24
 800b7e8:	f003 030f 	and.w	r3, r3, #15
 800b7ec:	4a06      	ldr	r2, [pc, #24]	@ (800b808 <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 800b7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f4:	f000 bc7f 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7fc:	f000 bc7b 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800b800:	46020c00 	.word	0x46020c00
 800b804:	00f42400 	.word	0x00f42400
 800b808:	0800f6f8 	.word	0x0800f6f8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 800b80c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b810:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 800b814:	430b      	orrs	r3, r1
 800b816:	d14c      	bne.n	800b8b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 800b818:	4ba6      	ldr	r3, [pc, #664]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b81a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b81e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800b822:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 800b824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b826:	2b00      	cmp	r3, #0
 800b828:	d104      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b82a:	f7fd fca9 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800b82e:	6378      	str	r0, [r7, #52]	@ 0x34
 800b830:	f000 bc61 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 800b834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b836:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b83a:	d104      	bne.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b83c:	f7fd fb84 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800b840:	6378      	str	r0, [r7, #52]	@ 0x34
 800b842:	f000 bc58 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 800b846:	4b9b      	ldr	r3, [pc, #620]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b84e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b852:	d107      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b85a:	d103      	bne.n	800b864 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 800b85c:	4b96      	ldr	r3, [pc, #600]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b860:	f000 bc49 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 800b864:	4b93      	ldr	r3, [pc, #588]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f003 0320 	and.w	r3, r3, #32
 800b86c:	2b20      	cmp	r3, #32
 800b86e:	d11c      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
 800b870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b872:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800b876:	d118      	bne.n	800b8aa <HAL_RCCEx_GetPeriphCLKFreq+0xeaa>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b878:	4b8e      	ldr	r3, [pc, #568]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d005      	beq.n	800b890 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 800b884:	4b8b      	ldr	r3, [pc, #556]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	0e1b      	lsrs	r3, r3, #24
 800b88a:	f003 030f 	and.w	r3, r3, #15
 800b88e:	e006      	b.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800b890:	4b88      	ldr	r3, [pc, #544]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b896:	041b      	lsls	r3, r3, #16
 800b898:	0e1b      	lsrs	r3, r3, #24
 800b89a:	f003 030f 	and.w	r3, r3, #15
 800b89e:	4a87      	ldr	r2, [pc, #540]	@ (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b8a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8a6:	f000 bc26 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8ae:	f000 bc22 	b.w	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800b8b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8b6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b8ba:	430b      	orrs	r3, r1
 800b8bc:	d164      	bne.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800b8be:	4b7d      	ldr	r3, [pc, #500]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b8c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b8c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8c8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d120      	bne.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b8d0:	4b78      	ldr	r3, [pc, #480]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0320 	and.w	r3, r3, #32
 800b8d8:	2b20      	cmp	r3, #32
 800b8da:	d117      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b8dc:	4b75      	ldr	r3, [pc, #468]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800b8e8:	4b72      	ldr	r3, [pc, #456]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	0e1b      	lsrs	r3, r3, #24
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	e006      	b.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800b8f4:	4b6f      	ldr	r3, [pc, #444]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b8f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b8fa:	041b      	lsls	r3, r3, #16
 800b8fc:	0e1b      	lsrs	r3, r3, #24
 800b8fe:	f003 030f 	and.w	r3, r3, #15
 800b902:	4a6e      	ldr	r2, [pc, #440]	@ (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b908:	637b      	str	r3, [r7, #52]	@ 0x34
 800b90a:	e3f4      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b90c:	2300      	movs	r3, #0
 800b90e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b910:	e3f1      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800b912:	4b68      	ldr	r3, [pc, #416]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b91c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b920:	d112      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b928:	d10e      	bne.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b92a:	4b62      	ldr	r3, [pc, #392]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b92c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b938:	d102      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>
      {
        frequency = LSI_VALUE / 128U;
 800b93a:	23fa      	movs	r3, #250	@ 0xfa
 800b93c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b93e:	e3da      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b940:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b944:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b946:	e3d6      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800b948:	4b5a      	ldr	r3, [pc, #360]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b954:	d106      	bne.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
 800b956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b95c:	d102      	bne.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0xf64>
    {
      frequency = HSI_VALUE;
 800b95e:	4b56      	ldr	r3, [pc, #344]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800b960:	637b      	str	r3, [r7, #52]	@ 0x34
 800b962:	e3c8      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800b964:	4b53      	ldr	r3, [pc, #332]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d107      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b978:	d103      	bne.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
    {
      frequency = LSE_VALUE;
 800b97a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b97e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b980:	e3b9      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800b982:	2300      	movs	r3, #0
 800b984:	637b      	str	r3, [r7, #52]	@ 0x34
 800b986:	e3b6      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800b988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b98c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b990:	430b      	orrs	r3, r1
 800b992:	d164      	bne.n	800ba5e <HAL_RCCEx_GetPeriphCLKFreq+0x105e>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800b994:	4b47      	ldr	r3, [pc, #284]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b996:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b99a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b99e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d120      	bne.n	800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b9a6:	4b43      	ldr	r3, [pc, #268]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0320 	and.w	r3, r3, #32
 800b9ae:	2b20      	cmp	r3, #32
 800b9b0:	d117      	bne.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9b2:	4b40      	ldr	r3, [pc, #256]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b9b4:	689b      	ldr	r3, [r3, #8]
 800b9b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d005      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
 800b9be:	4b3d      	ldr	r3, [pc, #244]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	0e1b      	lsrs	r3, r3, #24
 800b9c4:	f003 030f 	and.w	r3, r3, #15
 800b9c8:	e006      	b.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800b9ca:	4b3a      	ldr	r3, [pc, #232]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b9cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b9d0:	041b      	lsls	r3, r3, #16
 800b9d2:	0e1b      	lsrs	r3, r3, #24
 800b9d4:	f003 030f 	and.w	r3, r3, #15
 800b9d8:	4a38      	ldr	r2, [pc, #224]	@ (800babc <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>)
 800b9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e0:	e389      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9e6:	e386      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800b9e8:	4b32      	ldr	r3, [pc, #200]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800b9ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b9ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9f6:	d112      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9fe:	d10e      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba00:	4b2c      	ldr	r3, [pc, #176]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ba0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba0e:	d102      	bne.n	800ba16 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
      {
        frequency = LSI_VALUE / 128U;
 800ba10:	23fa      	movs	r3, #250	@ 0xfa
 800ba12:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba14:	e36f      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800ba16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba1c:	e36b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800ba1e:	4b25      	ldr	r3, [pc, #148]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba2a:	d106      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba32:	d102      	bne.n	800ba3a <HAL_RCCEx_GetPeriphCLKFreq+0x103a>
    {
      frequency = HSI_VALUE;
 800ba34:	4b20      	ldr	r3, [pc, #128]	@ (800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba38:	e35d      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800ba3a:	4b1e      	ldr	r3, [pc, #120]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d107      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800ba48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ba4e:	d103      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
    {
      frequency = LSE_VALUE;
 800ba50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba54:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba56:	e34e      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba5c:	e34b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800ba5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba62:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ba66:	430b      	orrs	r3, r1
 800ba68:	d14e      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x1108>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800ba6a:	4b12      	ldr	r3, [pc, #72]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ba70:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800ba74:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800ba76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d103      	bne.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x1084>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba7c:	f7fd fb80 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800ba80:	6378      	str	r0, [r7, #52]	@ 0x34
 800ba82:	e338      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800ba84:	4b0b      	ldr	r3, [pc, #44]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ba8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba92:	d119      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
 800ba94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba9a:	d115      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ba9c:	4b05      	ldr	r3, [pc, #20]	@ (800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 800ba9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800baa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800baa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baaa:	d109      	bne.n	800bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x10c0>
      {
        frequency = LSI_VALUE / 128U;
 800baac:	23fa      	movs	r3, #250	@ 0xfa
 800baae:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bab0:	e321      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800bab2:	bf00      	nop
 800bab4:	46020c00 	.word	0x46020c00
 800bab8:	00f42400 	.word	0x00f42400
 800babc:	0800f6f8 	.word	0x0800f6f8
      }
      else
      {
        frequency = LSI_VALUE;
 800bac0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bac6:	e316      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800bac8:	4ba8      	ldr	r3, [pc, #672]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bad4:	d106      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
 800bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800badc:	d102      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
    {
      frequency = HSI_VALUE;
 800bade:	4ba4      	ldr	r3, [pc, #656]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800bae2:	e308      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800bae4:	4ba1      	ldr	r3, [pc, #644]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d107      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800baf8:	d103      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
    {
      frequency = LSE_VALUE;
 800bafa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb00:	e2f9      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb06:	e2f6      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800bb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800bb10:	430b      	orrs	r3, r1
 800bb12:	d12d      	bne.n	800bb70 <HAL_RCCEx_GetPeriphCLKFreq+0x1170>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800bb14:	4b95      	ldr	r3, [pc, #596]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bb16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb1a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800bb1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800bb20:	4b92      	ldr	r3, [pc, #584]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb2c:	d105      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d102      	bne.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
    {
      frequency = HSE_VALUE;
 800bb34:	4b8e      	ldr	r3, [pc, #568]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bb36:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb38:	e2dd      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bb40:	d107      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fb4c 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb50:	e2d1      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800bb52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb58:	d107      	bne.n	800bb6a <HAL_RCCEx_GetPeriphCLKFreq+0x116a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb5a:	f107 0318 	add.w	r3, r7, #24
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f7fe fc9a 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb68:	e2c5      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb6e:	e2c2      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800bb70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb74:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	d156      	bne.n	800bc2a <HAL_RCCEx_GetPeriphCLKFreq+0x122a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800bb7c:	4b7b      	ldr	r3, [pc, #492]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bb7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb82:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bb86:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800bb88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb8e:	d028      	beq.n	800bbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bb96:	d845      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb9e:	d013      	beq.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800bba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bba6:	d83d      	bhi.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 800bba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d004      	beq.n	800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b8>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbb4:	d004      	beq.n	800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 800bbb6:	e035      	b.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800bbb8:	f7fd faf6 	bl	80091a8 <HAL_RCC_GetPCLK2Freq>
 800bbbc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bbbe:	e29a      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bbc0:	f7fd f9c2 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800bbc4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bbc6:	e296      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bbc8:	4b68      	ldr	r3, [pc, #416]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbd4:	d102      	bne.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
        {
          frequency = HSI_VALUE;
 800bbd6:	4b66      	ldr	r3, [pc, #408]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bbd8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bbda:	e28c      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bbe0:	e289      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bbe2:	4b62      	ldr	r3, [pc, #392]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0320 	and.w	r3, r3, #32
 800bbea:	2b20      	cmp	r3, #32
 800bbec:	d117      	bne.n	800bc1e <HAL_RCCEx_GetPeriphCLKFreq+0x121e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbee:	4b5f      	ldr	r3, [pc, #380]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bbf0:	689b      	ldr	r3, [r3, #8]
 800bbf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d005      	beq.n	800bc06 <HAL_RCCEx_GetPeriphCLKFreq+0x1206>
 800bbfa:	4b5c      	ldr	r3, [pc, #368]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	0e1b      	lsrs	r3, r3, #24
 800bc00:	f003 030f 	and.w	r3, r3, #15
 800bc04:	e006      	b.n	800bc14 <HAL_RCCEx_GetPeriphCLKFreq+0x1214>
 800bc06:	4b59      	ldr	r3, [pc, #356]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bc08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bc0c:	041b      	lsls	r3, r3, #16
 800bc0e:	0e1b      	lsrs	r3, r3, #24
 800bc10:	f003 030f 	and.w	r3, r3, #15
 800bc14:	4a57      	ldr	r2, [pc, #348]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800bc16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bc1c:	e26b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc22:	e268      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc28:	e265      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800bc2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc2e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800bc32:	430b      	orrs	r3, r1
 800bc34:	d156      	bne.n	800bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e4>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800bc36:	4b4d      	ldr	r3, [pc, #308]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bc38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bc3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bc40:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc48:	d028      	beq.n	800bc9c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bc50:	d845      	bhi.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800bc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc58:	d013      	beq.n	800bc82 <HAL_RCCEx_GetPeriphCLKFreq+0x1282>
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bc60:	d83d      	bhi.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d004      	beq.n	800bc72 <HAL_RCCEx_GetPeriphCLKFreq+0x1272>
 800bc68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc6e:	d004      	beq.n	800bc7a <HAL_RCCEx_GetPeriphCLKFreq+0x127a>
 800bc70:	e035      	b.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x12de>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800bc72:	f7fd fa85 	bl	8009180 <HAL_RCC_GetPCLK1Freq>
 800bc76:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bc78:	e23d      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bc7a:	f7fd f965 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800bc7e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bc80:	e239      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bc82:	4b3a      	ldr	r3, [pc, #232]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bc8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc8e:	d102      	bne.n	800bc96 <HAL_RCCEx_GetPeriphCLKFreq+0x1296>
        {
          frequency = HSI_VALUE;
 800bc90:	4b37      	ldr	r3, [pc, #220]	@ (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 800bc92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bc94:	e22f      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bc9a:	e22c      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bc9c:	4b33      	ldr	r3, [pc, #204]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0320 	and.w	r3, r3, #32
 800bca4:	2b20      	cmp	r3, #32
 800bca6:	d117      	bne.n	800bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x12d8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bca8:	4b30      	ldr	r3, [pc, #192]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d005      	beq.n	800bcc0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c0>
 800bcb4:	4b2d      	ldr	r3, [pc, #180]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	0e1b      	lsrs	r3, r3, #24
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	e006      	b.n	800bcce <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800bcc0:	4b2a      	ldr	r3, [pc, #168]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bcc6:	041b      	lsls	r3, r3, #16
 800bcc8:	0e1b      	lsrs	r3, r3, #24
 800bcca:	f003 030f 	and.w	r3, r3, #15
 800bcce:	4a29      	ldr	r2, [pc, #164]	@ (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x1374>)
 800bcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bcd6:	e20e      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bcdc:	e20b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bce2:	e208      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800bce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce8:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800bcec:	430b      	orrs	r3, r1
 800bcee:	d17c      	bne.n	800bdea <HAL_RCCEx_GetPeriphCLKFreq+0x13ea>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800bcf0:	4b1e      	ldr	r3, [pc, #120]	@ (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 800bcf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bcf6:	f003 0318 	and.w	r3, r3, #24
 800bcfa:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcfe:	2b18      	cmp	r3, #24
 800bd00:	d870      	bhi.n	800bde4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800bd02:	a201      	add	r2, pc, #4	@ (adr r2, 800bd08 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>)
 800bd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd08:	0800bd79 	.word	0x0800bd79
 800bd0c:	0800bde5 	.word	0x0800bde5
 800bd10:	0800bde5 	.word	0x0800bde5
 800bd14:	0800bde5 	.word	0x0800bde5
 800bd18:	0800bde5 	.word	0x0800bde5
 800bd1c:	0800bde5 	.word	0x0800bde5
 800bd20:	0800bde5 	.word	0x0800bde5
 800bd24:	0800bde5 	.word	0x0800bde5
 800bd28:	0800bd81 	.word	0x0800bd81
 800bd2c:	0800bde5 	.word	0x0800bde5
 800bd30:	0800bde5 	.word	0x0800bde5
 800bd34:	0800bde5 	.word	0x0800bde5
 800bd38:	0800bde5 	.word	0x0800bde5
 800bd3c:	0800bde5 	.word	0x0800bde5
 800bd40:	0800bde5 	.word	0x0800bde5
 800bd44:	0800bde5 	.word	0x0800bde5
 800bd48:	0800bd89 	.word	0x0800bd89
 800bd4c:	0800bde5 	.word	0x0800bde5
 800bd50:	0800bde5 	.word	0x0800bde5
 800bd54:	0800bde5 	.word	0x0800bde5
 800bd58:	0800bde5 	.word	0x0800bde5
 800bd5c:	0800bde5 	.word	0x0800bde5
 800bd60:	0800bde5 	.word	0x0800bde5
 800bd64:	0800bde5 	.word	0x0800bde5
 800bd68:	0800bda3 	.word	0x0800bda3
 800bd6c:	46020c00 	.word	0x46020c00
 800bd70:	00f42400 	.word	0x00f42400
 800bd74:	0800f6f8 	.word	0x0800f6f8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800bd78:	f7fd fa2a 	bl	80091d0 <HAL_RCC_GetPCLK3Freq>
 800bd7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bd7e:	e1ba      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800bd80:	f7fd f8e2 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800bd84:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bd86:	e1b6      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bd88:	4b9f      	ldr	r3, [pc, #636]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd94:	d102      	bne.n	800bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x139c>
        {
          frequency = HSI_VALUE;
 800bd96:	4b9d      	ldr	r3, [pc, #628]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bd98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bd9a:	e1ac      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bda0:	e1a9      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bda2:	4b99      	ldr	r3, [pc, #612]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0320 	and.w	r3, r3, #32
 800bdaa:	2b20      	cmp	r3, #32
 800bdac:	d117      	bne.n	800bdde <HAL_RCCEx_GetPeriphCLKFreq+0x13de>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bdae:	4b96      	ldr	r3, [pc, #600]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
 800bdba:	4b93      	ldr	r3, [pc, #588]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	0e1b      	lsrs	r3, r3, #24
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	e006      	b.n	800bdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800bdc6:	4b90      	ldr	r3, [pc, #576]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bdc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800bdcc:	041b      	lsls	r3, r3, #16
 800bdce:	0e1b      	lsrs	r3, r3, #24
 800bdd0:	f003 030f 	and.w	r3, r3, #15
 800bdd4:	4a8e      	ldr	r2, [pc, #568]	@ (800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800bdd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdda:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bddc:	e18b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bde2:	e188      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bde8:	e185      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800bdea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdee:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800bdf2:	430b      	orrs	r3, r1
 800bdf4:	d155      	bne.n	800bea2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a2>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800bdf6:	4b84      	ldr	r3, [pc, #528]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bdf8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bdfc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800be00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800be02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be08:	d013      	beq.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0x1432>
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800be10:	d844      	bhi.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be18:	d013      	beq.n	800be42 <HAL_RCCEx_GetPeriphCLKFreq+0x1442>
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be20:	d83c      	bhi.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
 800be22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be24:	2b00      	cmp	r3, #0
 800be26:	d014      	beq.n	800be52 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800be28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be2e:	d014      	beq.n	800be5a <HAL_RCCEx_GetPeriphCLKFreq+0x145a>
 800be30:	e034      	b.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x149c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be32:	f107 0318 	add.w	r3, r7, #24
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fb2e 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be40:	e159      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be46:	4618      	mov	r0, r3
 800be48:	f7fe f9cc 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800be4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be50:	e151      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800be52:	f7fd f879 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800be56:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800be58:	e14d      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800be5a:	4b6b      	ldr	r3, [pc, #428]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f003 0320 	and.w	r3, r3, #32
 800be62:	2b20      	cmp	r3, #32
 800be64:	d117      	bne.n	800be96 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be66:	4b68      	ldr	r3, [pc, #416]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <HAL_RCCEx_GetPeriphCLKFreq+0x147e>
 800be72:	4b65      	ldr	r3, [pc, #404]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800be74:	689b      	ldr	r3, [r3, #8]
 800be76:	0e1b      	lsrs	r3, r3, #24
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	e006      	b.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800be7e:	4b62      	ldr	r3, [pc, #392]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800be80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800be84:	041b      	lsls	r3, r3, #16
 800be86:	0e1b      	lsrs	r3, r3, #24
 800be88:	f003 030f 	and.w	r3, r3, #15
 800be8c:	4a60      	ldr	r2, [pc, #384]	@ (800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 800be8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be92:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800be94:	e12f      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
          frequency = 0U;
 800be96:	2300      	movs	r3, #0
 800be98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800be9a:	e12c      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bea0:	e129      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 800bea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bea6:	1e59      	subs	r1, r3, #1
 800bea8:	ea52 0301 	orrs.w	r3, r2, r1
 800beac:	d13c      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x1528>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 800beae:	4b56      	ldr	r3, [pc, #344]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800beb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800beb4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800beb8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bec0:	d027      	beq.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0x1512>
 800bec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bec8:	d82b      	bhi.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800beca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800becc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bed0:	d017      	beq.n	800bf02 <HAL_RCCEx_GetPeriphCLKFreq+0x1502>
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bed8:	d823      	bhi.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
 800beda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d004      	beq.n	800beea <HAL_RCCEx_GetPeriphCLKFreq+0x14ea>
 800bee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bee6:	d004      	beq.n	800bef2 <HAL_RCCEx_GetPeriphCLKFreq+0x14f2>
 800bee8:	e01b      	b.n	800bf22 <HAL_RCCEx_GetPeriphCLKFreq+0x1522>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800beea:	f7fd f82d 	bl	8008f48 <HAL_RCC_GetSysClockFreq>
 800beee:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800bef0:	e101      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe f974 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800befc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800befe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf00:	e0f9      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf02:	f107 0318 	add.w	r3, r7, #24
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7fe fac6 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf10:	e0f1      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf12:	f107 030c 	add.w	r3, r7, #12
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fc18 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf20:	e0e9      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800bf26:	e0e6      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800bf28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf2c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800bf30:	430b      	orrs	r3, r1
 800bf32:	d131      	bne.n	800bf98 <HAL_RCCEx_GetPeriphCLKFreq+0x1598>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800bf34:	4b34      	ldr	r3, [pc, #208]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800bf3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800bf40:	4b31      	ldr	r3, [pc, #196]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d106      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d103      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x155c>
    {
      frequency = LSE_VALUE;
 800bf54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf58:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf5a:	e0cc      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800bf5c:	4b2a      	ldr	r3, [pc, #168]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bf6a:	d112      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bf72:	d10e      	bne.n	800bf92 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf74:	4b24      	ldr	r3, [pc, #144]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bf76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800bf7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf82:	d102      	bne.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
      {
        frequency = LSI_VALUE / 128U;
 800bf84:	23fa      	movs	r3, #250	@ 0xfa
 800bf86:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf88:	e0b5      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
      else
      {
        frequency = LSI_VALUE;
 800bf8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800bf8e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800bf90:	e0b1      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf96:	e0ae      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800bf98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf9c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	d13b      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x161c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800bfa4:	4b18      	ldr	r3, [pc, #96]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bfaa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bfae:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800bfb0:	4b15      	ldr	r3, [pc, #84]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfbc:	d105      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d102      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
    {
      frequency = HSI48_VALUE;
 800bfc4:	4b13      	ldr	r3, [pc, #76]	@ (800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 800bfc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfc8:	e095      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800bfca:	4b0f      	ldr	r3, [pc, #60]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfd6:	d106      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
 800bfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfde:	d102      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
    {
      frequency = HSI48_VALUE >> 1U ;
 800bfe0:	4b0d      	ldr	r3, [pc, #52]	@ (800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x1618>)
 800bfe2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe4:	e087      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800bfe6:	4b08      	ldr	r3, [pc, #32]	@ (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bfee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bff2:	d106      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
 800bff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
    {
      frequency = HSI_VALUE;
 800bffc:	4b03      	ldr	r3, [pc, #12]	@ (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 800bffe:	637b      	str	r3, [r7, #52]	@ 0x34
 800c000:	e079      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c002:	2300      	movs	r3, #0
 800c004:	637b      	str	r3, [r7, #52]	@ 0x34
 800c006:	e076      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
 800c008:	46020c00 	.word	0x46020c00
 800c00c:	00f42400 	.word	0x00f42400
 800c010:	0800f6f8 	.word	0x0800f6f8
 800c014:	02dc6c00 	.word	0x02dc6c00
 800c018:	016e3600 	.word	0x016e3600
    }
  }
#if defined(LTDC)
  else if (PeriphClk == RCC_PERIPHCLK_LTDC)
 800c01c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c020:	1e99      	subs	r1, r3, #2
 800c022:	ea52 0301 	orrs.w	r3, r2, r1
 800c026:	d120      	bne.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
  {
    /* Get the current LTDC kernel source */
    srcclk = __HAL_RCC_GET_LTDC_SOURCE();
 800c028:	4b35      	ldr	r3, [pc, #212]	@ (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c02a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c02e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c032:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800c034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c036:	2b00      	cmp	r3, #0
 800c038:	d004      	beq.n	800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x1644>
 800c03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c03c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c040:	d008      	beq.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
 800c042:	e00f      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x1664>
    {
      case RCC_LTDCCLKSOURCE_PLL3:  /* PLL3R is the clock source for LTDC */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c044:	f107 030c 	add.w	r3, r7, #12
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fb7f 	bl	800a74c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c052:	e050      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      case RCC_LTDCCLKSOURCE_PLL2:  /* PLL2R is the clock source for LTDC */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c054:	f107 0318 	add.w	r3, r7, #24
 800c058:	4618      	mov	r0, r3
 800c05a:	f7fe fa1d 	bl	800a498 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_R_Frequency;
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c062:	e048      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>

      default:

        frequency = 0U;
 800c064:	2300      	movs	r3, #0
 800c066:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c068:	e045      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800c06a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c06e:	f1a3 0108 	sub.w	r1, r3, #8
 800c072:	ea52 0301 	orrs.w	r3, r2, r1
 800c076:	d13c      	bne.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800c078:	4b21      	ldr	r3, [pc, #132]	@ (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c07a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800c07e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c082:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 800c084:	4b1e      	ldr	r3, [pc, #120]	@ (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c090:	d105      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	2b00      	cmp	r3, #0
 800c096:	d102      	bne.n	800c09e <HAL_RCCEx_GetPeriphCLKFreq+0x169e>
    {
      frequency = HSE_VALUE;
 800c098:	4b1a      	ldr	r3, [pc, #104]	@ (800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>)
 800c09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c09c:	e02b      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 800c09e:	4b18      	ldr	r3, [pc, #96]	@ (800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c0aa:	d106      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c0b2:	d102      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x16ba>
    {
      frequency = HSE_VALUE >> 1U ;
 800c0b4:	4b14      	ldr	r3, [pc, #80]	@ (800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>)
 800c0b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0b8:	e01d      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c0:	d107      	bne.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16d2>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe f88c 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0d0:	e011      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800c0d8:	d108      	bne.n	800c0ec <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7fe f880 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e6:	085b      	lsrs	r3, r3, #1
 800c0e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ea:	e004      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0f0:	e001      	b.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3738      	adds	r7, #56	@ 0x38
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	46020c00 	.word	0x46020c00
 800c104:	00f42400 	.word	0x00f42400
 800c108:	007a1200 	.word	0x007a1200

0800c10c <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 800c10c:	b480      	push	{r7}
 800c10e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 800c110:	4b06      	ldr	r3, [pc, #24]	@ (800c12c <HAL_RCCEx_EnableLSECSS+0x20>)
 800c112:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800c116:	4a05      	ldr	r2, [pc, #20]	@ (800c12c <HAL_RCCEx_EnableLSECSS+0x20>)
 800c118:	f043 0320 	orr.w	r3, r3, #32
 800c11c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 800c120:	bf00      	nop
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	46020c00 	.word	0x46020c00

0800c130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b084      	sub	sp, #16
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c138:	4b47      	ldr	r3, [pc, #284]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4a46      	ldr	r2, [pc, #280]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c13e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c142:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c144:	f7f7 fad4 	bl	80036f0 <HAL_GetTick>
 800c148:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c14a:	e008      	b.n	800c15e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c14c:	f7f7 fad0 	bl	80036f0 <HAL_GetTick>
 800c150:	4602      	mov	r2, r0
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	2b02      	cmp	r3, #2
 800c158:	d901      	bls.n	800c15e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c15a:	2303      	movs	r3, #3
 800c15c:	e077      	b.n	800c24e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c15e:	4b3e      	ldr	r3, [pc, #248]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f0      	bne.n	800c14c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c16a:	4b3b      	ldr	r3, [pc, #236]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c16e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c172:	f023 0303 	bic.w	r3, r3, #3
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	6811      	ldr	r1, [r2, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	6852      	ldr	r2, [r2, #4]
 800c17e:	3a01      	subs	r2, #1
 800c180:	0212      	lsls	r2, r2, #8
 800c182:	430a      	orrs	r2, r1
 800c184:	4934      	ldr	r1, [pc, #208]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c186:	4313      	orrs	r3, r2
 800c188:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800c18a:	4b33      	ldr	r3, [pc, #204]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c18c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c18e:	4b33      	ldr	r3, [pc, #204]	@ (800c25c <RCCEx_PLL2_Config+0x12c>)
 800c190:	4013      	ands	r3, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	6892      	ldr	r2, [r2, #8]
 800c196:	3a01      	subs	r2, #1
 800c198:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	68d2      	ldr	r2, [r2, #12]
 800c1a0:	3a01      	subs	r2, #1
 800c1a2:	0252      	lsls	r2, r2, #9
 800c1a4:	b292      	uxth	r2, r2
 800c1a6:	4311      	orrs	r1, r2
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	6912      	ldr	r2, [r2, #16]
 800c1ac:	3a01      	subs	r2, #1
 800c1ae:	0412      	lsls	r2, r2, #16
 800c1b0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c1b4:	4311      	orrs	r1, r2
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6952      	ldr	r2, [r2, #20]
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	0612      	lsls	r2, r2, #24
 800c1be:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	4924      	ldr	r1, [pc, #144]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c1ca:	4b23      	ldr	r3, [pc, #140]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ce:	f023 020c 	bic.w	r2, r3, #12
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	699b      	ldr	r3, [r3, #24]
 800c1d6:	4920      	ldr	r1, [pc, #128]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c1dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a1b      	ldr	r3, [r3, #32]
 800c1e4:	491c      	ldr	r1, [pc, #112]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1f0:	f023 0310 	bic.w	r3, r3, #16
 800c1f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1f6:	4b18      	ldr	r3, [pc, #96]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c1fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	69d2      	ldr	r2, [r2, #28]
 800c206:	00d2      	lsls	r2, r2, #3
 800c208:	4913      	ldr	r1, [pc, #76]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c20e:	4b12      	ldr	r3, [pc, #72]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c212:	4a11      	ldr	r2, [pc, #68]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c214:	f043 0310 	orr.w	r3, r3, #16
 800c218:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c21a:	4b0f      	ldr	r3, [pc, #60]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a0e      	ldr	r2, [pc, #56]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c224:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c226:	f7f7 fa63 	bl	80036f0 <HAL_GetTick>
 800c22a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c22c:	e008      	b.n	800c240 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c22e:	f7f7 fa5f 	bl	80036f0 <HAL_GetTick>
 800c232:	4602      	mov	r2, r0
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	1ad3      	subs	r3, r2, r3
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d901      	bls.n	800c240 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e006      	b.n	800c24e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c240:	4b05      	ldr	r3, [pc, #20]	@ (800c258 <RCCEx_PLL2_Config+0x128>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d0f0      	beq.n	800c22e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c24c:	2300      	movs	r3, #0

}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	46020c00 	.word	0x46020c00
 800c25c:	80800000 	.word	0x80800000

0800c260 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c268:	4b47      	ldr	r3, [pc, #284]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	4a46      	ldr	r2, [pc, #280]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c26e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c272:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c274:	f7f7 fa3c 	bl	80036f0 <HAL_GetTick>
 800c278:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c27a:	e008      	b.n	800c28e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c27c:	f7f7 fa38 	bl	80036f0 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b02      	cmp	r3, #2
 800c288:	d901      	bls.n	800c28e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e077      	b.n	800c37e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c28e:	4b3e      	ldr	r3, [pc, #248]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d1f0      	bne.n	800c27c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c29a:	4b3b      	ldr	r3, [pc, #236]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c29e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c2a2:	f023 0303 	bic.w	r3, r3, #3
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	6811      	ldr	r1, [r2, #0]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6852      	ldr	r2, [r2, #4]
 800c2ae:	3a01      	subs	r2, #1
 800c2b0:	0212      	lsls	r2, r2, #8
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	4934      	ldr	r1, [pc, #208]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	630b      	str	r3, [r1, #48]	@ 0x30
 800c2ba:	4b33      	ldr	r3, [pc, #204]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c2bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2be:	4b33      	ldr	r3, [pc, #204]	@ (800c38c <RCCEx_PLL3_Config+0x12c>)
 800c2c0:	4013      	ands	r3, r2
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6892      	ldr	r2, [r2, #8]
 800c2c6:	3a01      	subs	r2, #1
 800c2c8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	68d2      	ldr	r2, [r2, #12]
 800c2d0:	3a01      	subs	r2, #1
 800c2d2:	0252      	lsls	r2, r2, #9
 800c2d4:	b292      	uxth	r2, r2
 800c2d6:	4311      	orrs	r1, r2
 800c2d8:	687a      	ldr	r2, [r7, #4]
 800c2da:	6912      	ldr	r2, [r2, #16]
 800c2dc:	3a01      	subs	r2, #1
 800c2de:	0412      	lsls	r2, r2, #16
 800c2e0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800c2e4:	4311      	orrs	r1, r2
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6952      	ldr	r2, [r2, #20]
 800c2ea:	3a01      	subs	r2, #1
 800c2ec:	0612      	lsls	r2, r2, #24
 800c2ee:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800c2f2:	430a      	orrs	r2, r1
 800c2f4:	4924      	ldr	r1, [pc, #144]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c2fa:	4b23      	ldr	r3, [pc, #140]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fe:	f023 020c 	bic.w	r2, r3, #12
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	4920      	ldr	r1, [pc, #128]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c308:	4313      	orrs	r3, r2
 800c30a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c30c:	4b1e      	ldr	r3, [pc, #120]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c30e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6a1b      	ldr	r3, [r3, #32]
 800c314:	491c      	ldr	r1, [pc, #112]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c316:	4313      	orrs	r3, r2
 800c318:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c31a:	4b1b      	ldr	r3, [pc, #108]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c31e:	4a1a      	ldr	r2, [pc, #104]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c320:	f023 0310 	bic.w	r3, r3, #16
 800c324:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c326:	4b18      	ldr	r3, [pc, #96]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c32a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c32e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	69d2      	ldr	r2, [r2, #28]
 800c336:	00d2      	lsls	r2, r2, #3
 800c338:	4913      	ldr	r1, [pc, #76]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c33e:	4b12      	ldr	r3, [pc, #72]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c342:	4a11      	ldr	r2, [pc, #68]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c344:	f043 0310 	orr.w	r3, r3, #16
 800c348:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c34a:	4b0f      	ldr	r3, [pc, #60]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a0e      	ldr	r2, [pc, #56]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c354:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c356:	f7f7 f9cb 	bl	80036f0 <HAL_GetTick>
 800c35a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c35c:	e008      	b.n	800c370 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c35e:	f7f7 f9c7 	bl	80036f0 <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d901      	bls.n	800c370 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c36c:	2303      	movs	r3, #3
 800c36e:	e006      	b.n	800c37e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c370:	4b05      	ldr	r3, [pc, #20]	@ (800c388 <RCCEx_PLL3_Config+0x128>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d0f0      	beq.n	800c35e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	46020c00 	.word	0x46020c00
 800c38c:	80800000 	.word	0x80800000

0800c390 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d078      	beq.n	800c494 <HAL_RTC_Init+0x104>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c3a8:	b2db      	uxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7f6 fbc6 	bl	8002b48 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2202      	movs	r2, #2
 800c3c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c3c4:	4b36      	ldr	r3, [pc, #216]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	f003 0310 	and.w	r3, r3, #16
 800c3cc:	2b10      	cmp	r3, #16
 800c3ce:	d058      	beq.n	800c482 <HAL_RTC_Init+0xf2>
    {
      /* Check that the RTC mode is not 'binary only' */
      if (__HAL_RTC_GET_BINARY_MODE(hrtc) != RTC_BINARY_ONLY)
 800c3d0:	4b33      	ldr	r3, [pc, #204]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3dc:	d053      	beq.n	800c486 <HAL_RTC_Init+0xf6>
      {
        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c3de:	4b30      	ldr	r3, [pc, #192]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c3e0:	22ca      	movs	r2, #202	@ 0xca
 800c3e2:	625a      	str	r2, [r3, #36]	@ 0x24
 800c3e4:	4b2e      	ldr	r3, [pc, #184]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c3e6:	2253      	movs	r2, #83	@ 0x53
 800c3e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enter Initialization mode */
        status = RTC_EnterInitMode(hrtc);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f9ae 	bl	800c74c <RTC_EnterInitMode>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	73fb      	strb	r3, [r7, #15]

        if (status == HAL_OK)
 800c3f4:	7bfb      	ldrb	r3, [r7, #15]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d13f      	bne.n	800c47a <HAL_RTC_Init+0xea>
        {
          /* Clear RTC_CR FMT, OSEL and POL Bits */
          CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c3fa:	4b29      	ldr	r3, [pc, #164]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c3fc:	699b      	ldr	r3, [r3, #24]
 800c3fe:	4a28      	ldr	r2, [pc, #160]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c400:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800c404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c408:	6193      	str	r3, [r2, #24]
          /* Set RTC_CR register */
          SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c40a:	4b25      	ldr	r3, [pc, #148]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c40c:	699a      	ldr	r2, [r3, #24]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6859      	ldr	r1, [r3, #4]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	691b      	ldr	r3, [r3, #16]
 800c416:	4319      	orrs	r1, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	699b      	ldr	r3, [r3, #24]
 800c41c:	430b      	orrs	r3, r1
 800c41e:	4920      	ldr	r1, [pc, #128]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c420:	4313      	orrs	r3, r2
 800c422:	618b      	str	r3, [r1, #24]

          /* Configure the RTC PRER */
          WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	041b      	lsls	r3, r3, #16
 800c42e:	491c      	ldr	r1, [pc, #112]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c430:	4313      	orrs	r3, r2
 800c432:	610b      	str	r3, [r1, #16]

          /* Configure the Binary mode */
          MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c434:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c444:	430b      	orrs	r3, r1
 800c446:	4916      	ldr	r1, [pc, #88]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	60cb      	str	r3, [r1, #12]

          /* Exit Initialization mode */
          status = RTC_ExitInitMode(hrtc);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f9b9 	bl	800c7c4 <RTC_ExitInitMode>
 800c452:	4603      	mov	r3, r0
 800c454:	73fb      	strb	r3, [r7, #15]

          if (status == HAL_OK)
 800c456:	7bfb      	ldrb	r3, [r7, #15]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d10e      	bne.n	800c47a <HAL_RTC_Init+0xea>
          {
            MODIFY_REG(RTC->CR, \
 800c45c:	4b10      	ldr	r3, [pc, #64]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6a19      	ldr	r1, [r3, #32]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	69db      	ldr	r3, [r3, #28]
 800c46c:	4319      	orrs	r1, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	430b      	orrs	r3, r1
 800c474:	490a      	ldr	r1, [pc, #40]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c476:	4313      	orrs	r3, r2
 800c478:	618b      	str	r3, [r1, #24]
                       hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
          }
        }

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c47a:	4b09      	ldr	r3, [pc, #36]	@ (800c4a0 <HAL_RTC_Init+0x110>)
 800c47c:	22ff      	movs	r2, #255	@ 0xff
 800c47e:	625a      	str	r2, [r3, #36]	@ 0x24
 800c480:	e001      	b.n	800c486 <HAL_RTC_Init+0xf6>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <HAL_RTC_Init+0x104>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800c494:	7bfb      	ldrb	r3, [r7, #15]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	46007800 	.word	0x46007800

0800c4a4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c4a4:	b590      	push	{r4, r7, lr}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d101      	bne.n	800c4be <HAL_RTC_SetTime+0x1a>
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	e088      	b.n	800c5d0 <HAL_RTC_SetTime+0x12c>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4ce:	4b42      	ldr	r3, [pc, #264]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c4d0:	22ca      	movs	r2, #202	@ 0xca
 800c4d2:	625a      	str	r2, [r3, #36]	@ 0x24
 800c4d4:	4b40      	ldr	r3, [pc, #256]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c4d6:	2253      	movs	r2, #83	@ 0x53
 800c4d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f000 f936 	bl	800c74c <RTC_EnterInitMode>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c4e4:	7cfb      	ldrb	r3, [r7, #19]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d163      	bne.n	800c5b2 <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c4ea:	4b3b      	ldr	r3, [pc, #236]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4f6:	d057      	beq.n	800c5a8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d125      	bne.n	800c54a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c4fe:	4b36      	ldr	r3, [pc, #216]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c500:	699b      	ldr	r3, [r3, #24]
 800c502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c506:	2b00      	cmp	r3, #0
 800c508:	d102      	bne.n	800c510 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f993 	bl	800c840 <RTC_ByteToBcd2>
 800c51a:	4603      	mov	r3, r0
 800c51c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	4618      	mov	r0, r3
 800c524:	f000 f98c 	bl	800c840 <RTC_ByteToBcd2>
 800c528:	4603      	mov	r3, r0
 800c52a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c52c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	789b      	ldrb	r3, [r3, #2]
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f984 	bl	800c840 <RTC_ByteToBcd2>
 800c538:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c53a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	78db      	ldrb	r3, [r3, #3]
 800c542:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c544:	4313      	orrs	r3, r2
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e017      	b.n	800c57a <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c54a:	4b23      	ldr	r3, [pc, #140]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d102      	bne.n	800c55c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2200      	movs	r2, #0
 800c55a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	785b      	ldrb	r3, [r3, #1]
 800c566:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c568:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c56e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	78db      	ldrb	r3, [r3, #3]
 800c574:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c57a:	4a17      	ldr	r2, [pc, #92]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c582:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c586:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c588:	4b13      	ldr	r3, [pc, #76]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	4a12      	ldr	r2, [pc, #72]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c58e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c592:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800c594:	4b10      	ldr	r3, [pc, #64]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c596:	699a      	ldr	r2, [r3, #24]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	68d9      	ldr	r1, [r3, #12]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	490d      	ldr	r1, [pc, #52]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 f90b 	bl	800c7c4 <RTC_ExitInitMode>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5b2:	4b09      	ldr	r3, [pc, #36]	@ (800c5d8 <HAL_RTC_SetTime+0x134>)
 800c5b4:	22ff      	movs	r2, #255	@ 0xff
 800c5b6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c5b8:	7cfb      	ldrb	r3, [r7, #19]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d103      	bne.n	800c5c6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c5ce:	7cfb      	ldrb	r3, [r7, #19]
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd90      	pop	{r4, r7, pc}
 800c5d8:	46007800 	.word	0x46007800

0800c5dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d101      	bne.n	800c5f6 <HAL_RTC_SetDate+0x1a>
 800c5f2:	2302      	movs	r3, #2
 800c5f4:	e071      	b.n	800c6da <HAL_RTC_SetDate+0xfe>
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2202      	movs	r2, #2
 800c602:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10e      	bne.n	800c62a <HAL_RTC_SetDate+0x4e>
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	785b      	ldrb	r3, [r3, #1]
 800c610:	f003 0310 	and.w	r3, r3, #16
 800c614:	2b00      	cmp	r3, #0
 800c616:	d008      	beq.n	800c62a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	f023 0310 	bic.w	r3, r3, #16
 800c620:	b2db      	uxtb	r3, r3
 800c622:	330a      	adds	r3, #10
 800c624:	b2da      	uxtb	r2, r3
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d11c      	bne.n	800c66a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	78db      	ldrb	r3, [r3, #3]
 800c634:	4618      	mov	r0, r3
 800c636:	f000 f903 	bl	800c840 <RTC_ByteToBcd2>
 800c63a:	4603      	mov	r3, r0
 800c63c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	785b      	ldrb	r3, [r3, #1]
 800c642:	4618      	mov	r0, r3
 800c644:	f000 f8fc 	bl	800c840 <RTC_ByteToBcd2>
 800c648:	4603      	mov	r3, r0
 800c64a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c64c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	789b      	ldrb	r3, [r3, #2]
 800c652:	4618      	mov	r0, r3
 800c654:	f000 f8f4 	bl	800c840 <RTC_ByteToBcd2>
 800c658:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c65a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	e00e      	b.n	800c688 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	78db      	ldrb	r3, [r3, #3]
 800c66e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	785b      	ldrb	r3, [r3, #1]
 800c674:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c676:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c67c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c684:	4313      	orrs	r3, r2
 800c686:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c688:	4b16      	ldr	r3, [pc, #88]	@ (800c6e4 <HAL_RTC_SetDate+0x108>)
 800c68a:	22ca      	movs	r2, #202	@ 0xca
 800c68c:	625a      	str	r2, [r3, #36]	@ 0x24
 800c68e:	4b15      	ldr	r3, [pc, #84]	@ (800c6e4 <HAL_RTC_SetDate+0x108>)
 800c690:	2253      	movs	r2, #83	@ 0x53
 800c692:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 f859 	bl	800c74c <RTC_EnterInitMode>
 800c69a:	4603      	mov	r3, r0
 800c69c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c69e:	7cfb      	ldrb	r3, [r7, #19]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10b      	bne.n	800c6bc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c6a4:	4a0f      	ldr	r2, [pc, #60]	@ (800c6e4 <HAL_RTC_SetDate+0x108>)
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c6ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c6b0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c6b2:	68f8      	ldr	r0, [r7, #12]
 800c6b4:	f000 f886 	bl	800c7c4 <RTC_ExitInitMode>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6bc:	4b09      	ldr	r3, [pc, #36]	@ (800c6e4 <HAL_RTC_SetDate+0x108>)
 800c6be:	22ff      	movs	r2, #255	@ 0xff
 800c6c0:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c6c2:	7cfb      	ldrb	r3, [r7, #19]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d103      	bne.n	800c6d0 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c6d8:	7cfb      	ldrb	r3, [r7, #19]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	371c      	adds	r7, #28
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd90      	pop	{r4, r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	46007800 	.word	0x46007800

0800c6e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c6f0:	4b15      	ldr	r3, [pc, #84]	@ (800c748 <HAL_RTC_WaitForSynchro+0x60>)
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	4a14      	ldr	r2, [pc, #80]	@ (800c748 <HAL_RTC_WaitForSynchro+0x60>)
 800c6f6:	f023 0320 	bic.w	r3, r3, #32
 800c6fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c6fc:	f7f6 fff8 	bl	80036f0 <HAL_GetTick>
 800c700:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c702:	e013      	b.n	800c72c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c704:	f7f6 fff4 	bl	80036f0 <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c712:	d90b      	bls.n	800c72c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c714:	4b0c      	ldr	r3, [pc, #48]	@ (800c748 <HAL_RTC_WaitForSynchro+0x60>)
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0320 	and.w	r3, r3, #32
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10c      	bne.n	800c73a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2203      	movs	r2, #3
 800c724:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c728:	2303      	movs	r3, #3
 800c72a:	e008      	b.n	800c73e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c72c:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <HAL_RTC_WaitForSynchro+0x60>)
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f003 0320 	and.w	r3, r3, #32
 800c734:	2b00      	cmp	r3, #0
 800c736:	d0e5      	beq.n	800c704 <HAL_RTC_WaitForSynchro+0x1c>
 800c738:	e000      	b.n	800c73c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c73a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	46007800 	.word	0x46007800

0800c74c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c754:	2300      	movs	r3, #0
 800c756:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c758:	4b19      	ldr	r3, [pc, #100]	@ (800c7c0 <RTC_EnterInitMode+0x74>)
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c760:	2b00      	cmp	r3, #0
 800c762:	d128      	bne.n	800c7b6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c764:	4b16      	ldr	r3, [pc, #88]	@ (800c7c0 <RTC_EnterInitMode+0x74>)
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	4a15      	ldr	r2, [pc, #84]	@ (800c7c0 <RTC_EnterInitMode+0x74>)
 800c76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c76e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c770:	f7f6 ffbe 	bl	80036f0 <HAL_GetTick>
 800c774:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c776:	e013      	b.n	800c7a0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c778:	f7f6 ffba 	bl	80036f0 <HAL_GetTick>
 800c77c:	4602      	mov	r2, r0
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	1ad3      	subs	r3, r2, r3
 800c782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c786:	d90b      	bls.n	800c7a0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c788:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c0 <RTC_EnterInitMode+0x74>)
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10f      	bne.n	800c7b4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2203      	movs	r2, #3
 800c79c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c7a0:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <RTC_EnterInitMode+0x74>)
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d104      	bne.n	800c7b6 <RTC_EnterInitMode+0x6a>
 800c7ac:	7bfb      	ldrb	r3, [r7, #15]
 800c7ae:	2b03      	cmp	r3, #3
 800c7b0:	d1e2      	bne.n	800c778 <RTC_EnterInitMode+0x2c>
 800c7b2:	e000      	b.n	800c7b6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c7b4:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	46007800 	.word	0x46007800

0800c7c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	4a19      	ldr	r2, [pc, #100]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c7d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7da:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c7dc:	4b17      	ldr	r3, [pc, #92]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	f003 0320 	and.w	r3, r3, #32
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10c      	bne.n	800c802 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff ff7d 	bl	800c6e8 <HAL_RTC_WaitForSynchro>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d01e      	beq.n	800c832 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2203      	movs	r2, #3
 800c7f8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	73fb      	strb	r3, [r7, #15]
 800c800:	e017      	b.n	800c832 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c802:	4b0e      	ldr	r3, [pc, #56]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	4a0d      	ldr	r2, [pc, #52]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c808:	f023 0320 	bic.w	r3, r3, #32
 800c80c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff ff6a 	bl	800c6e8 <HAL_RTC_WaitForSynchro>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2203      	movs	r2, #3
 800c81e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c826:	4b05      	ldr	r3, [pc, #20]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	4a04      	ldr	r2, [pc, #16]	@ (800c83c <RTC_ExitInitMode+0x78>)
 800c82c:	f043 0320 	orr.w	r3, r3, #32
 800c830:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c832:	7bfb      	ldrb	r3, [r7, #15]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3710      	adds	r7, #16
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	46007800 	.word	0x46007800

0800c840 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c84a:	2300      	movs	r3, #0
 800c84c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800c84e:	79fb      	ldrb	r3, [r7, #7]
 800c850:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800c852:	e005      	b.n	800c860 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3301      	adds	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800c85a:	7afb      	ldrb	r3, [r7, #11]
 800c85c:	3b0a      	subs	r3, #10
 800c85e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800c860:	7afb      	ldrb	r3, [r7, #11]
 800c862:	2b09      	cmp	r3, #9
 800c864:	d8f6      	bhi.n	800c854 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	7afb      	ldrb	r3, [r7, #11]
 800c870:	4313      	orrs	r3, r2
 800c872:	b2db      	uxtb	r3, r3
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	4910      	ldr	r1, [pc, #64]	@ (800c8d4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c894:	4313      	orrs	r3, r2
 800c896:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	689a      	ldr	r2, [r3, #8]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	431a      	orrs	r2, r3
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	490c      	ldr	r1, [pc, #48]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	624b      	str	r3, [r1, #36]	@ 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8ae:	6a1b      	ldr	r3, [r3, #32]
 800c8b0:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	6919      	ldr	r1, [r3, #16]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	041b      	lsls	r3, r3, #16
 800c8be:	430b      	orrs	r3, r1
 800c8c0:	4905      	ldr	r1, [pc, #20]	@ (800c8d8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr
 800c8d4:	46007800 	.word	0x46007800
 800c8d8:	46007c00 	.word	0x46007c00

0800c8dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b084      	sub	sp, #16
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e0fb      	b.n	800cae6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a7f      	ldr	r2, [pc, #508]	@ (800caf0 <HAL_SPI_Init+0x214>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d004      	beq.n	800c902 <HAL_SPI_Init+0x26>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a7d      	ldr	r2, [pc, #500]	@ (800caf4 <HAL_SPI_Init+0x218>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	e000      	b.n	800c904 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c902:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2200      	movs	r2, #0
 800c908:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a78      	ldr	r2, [pc, #480]	@ (800caf0 <HAL_SPI_Init+0x214>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d004      	beq.n	800c91e <HAL_SPI_Init+0x42>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a76      	ldr	r2, [pc, #472]	@ (800caf4 <HAL_SPI_Init+0x218>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d105      	bne.n	800c92a <HAL_SPI_Init+0x4e>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	2b0f      	cmp	r3, #15
 800c924:	d901      	bls.n	800c92a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e0dd      	b.n	800cae6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8ec 	bl	800cb08 <SPI_GetPacketSize>
 800c930:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a6e      	ldr	r2, [pc, #440]	@ (800caf0 <HAL_SPI_Init+0x214>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d004      	beq.n	800c946 <HAL_SPI_Init+0x6a>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a6c      	ldr	r2, [pc, #432]	@ (800caf4 <HAL_SPI_Init+0x218>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d102      	bne.n	800c94c <HAL_SPI_Init+0x70>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2b08      	cmp	r3, #8
 800c94a:	d816      	bhi.n	800c97a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c950:	4a69      	ldr	r2, [pc, #420]	@ (800caf8 <HAL_SPI_Init+0x21c>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d00e      	beq.n	800c974 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4a68      	ldr	r2, [pc, #416]	@ (800cafc <HAL_SPI_Init+0x220>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d009      	beq.n	800c974 <HAL_SPI_Init+0x98>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4a66      	ldr	r2, [pc, #408]	@ (800cb00 <HAL_SPI_Init+0x224>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d004      	beq.n	800c974 <HAL_SPI_Init+0x98>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a65      	ldr	r2, [pc, #404]	@ (800cb04 <HAL_SPI_Init+0x228>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d104      	bne.n	800c97e <HAL_SPI_Init+0xa2>
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2b10      	cmp	r3, #16
 800c978:	d901      	bls.n	800c97e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e0b3      	b.n	800cae6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d106      	bne.n	800c998 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7f6 f924 	bl	8002be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2202      	movs	r2, #2
 800c99c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0201 	bic.w	r2, r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c9ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	699b      	ldr	r3, [r3, #24]
 800c9c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c9c4:	d119      	bne.n	800c9fa <HAL_SPI_Init+0x11e>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c9ce:	d103      	bne.n	800c9d8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d008      	beq.n	800c9ea <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d10c      	bne.n	800c9fa <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9e8:	d107      	bne.n	800c9fa <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c9f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00f      	beq.n	800ca26 <HAL_SPI_Init+0x14a>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	2b06      	cmp	r3, #6
 800ca0c:	d90b      	bls.n	800ca26 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	430a      	orrs	r2, r1
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	e007      	b.n	800ca36 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	69da      	ldr	r2, [r3, #28]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca3e:	431a      	orrs	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	431a      	orrs	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca48:	ea42 0103 	orr.w	r1, r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	430a      	orrs	r2, r1
 800ca56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca60:	431a      	orrs	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca66:	431a      	orrs	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	699b      	ldr	r3, [r3, #24]
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6a1b      	ldr	r3, [r3, #32]
 800ca7e:	431a      	orrs	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	431a      	orrs	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca8a:	431a      	orrs	r2, r3
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	431a      	orrs	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca96:	431a      	orrs	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800caa2:	ea42 0103 	orr.w	r1, r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	430a      	orrs	r2, r1
 800cab0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00a      	beq.n	800cad4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	430a      	orrs	r2, r1
 800cad2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	46002000 	.word	0x46002000
 800caf4:	56002000 	.word	0x56002000
 800caf8:	40013000 	.word	0x40013000
 800cafc:	50013000 	.word	0x50013000
 800cb00:	40003800 	.word	0x40003800
 800cb04:	50003800 	.word	0x50003800

0800cb08 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb14:	095b      	lsrs	r3, r3, #5
 800cb16:	3301      	adds	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	3307      	adds	r3, #7
 800cb26:	08db      	lsrs	r3, r3, #3
 800cb28:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	fb02 f303 	mul.w	r3, r2, r3
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b083      	sub	sp, #12
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d12e      	bne.n	800cbb2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d101      	bne.n	800cb62 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800cb5e:	2302      	movs	r3, #2
 800cb60:	e028      	b.n	800cbb4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2202      	movs	r2, #2
 800cb6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	681a      	ldr	r2, [r3, #0]
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f022 0201 	bic.w	r2, r2, #1
 800cb80:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800cb8e:	ea42 0103 	orr.w	r1, r2, r3
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	430a      	orrs	r2, r1
 800cb9c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2201      	movs	r2, #1
 800cba2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e000      	b.n	800cbb4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
  }
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	e049      	b.n	800cc66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f7f6 f9a2 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	f000 feca 	bl	800d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2201      	movs	r2, #1
 800cc10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2201      	movs	r2, #1
 800cc48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d001      	beq.n	800cc88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e072      	b.n	800cd6e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2202      	movs	r2, #2
 800cc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f042 0201 	orr.w	r2, r2, #1
 800cc9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	4a35      	ldr	r2, [pc, #212]	@ (800cd7c <HAL_TIM_Base_Start_IT+0x10c>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d040      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a34      	ldr	r2, [pc, #208]	@ (800cd80 <HAL_TIM_Base_Start_IT+0x110>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d03b      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccbc:	d036      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ccc6:	d031      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a2d      	ldr	r2, [pc, #180]	@ (800cd84 <HAL_TIM_Base_Start_IT+0x114>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d02c      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4a2c      	ldr	r2, [pc, #176]	@ (800cd88 <HAL_TIM_Base_Start_IT+0x118>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d027      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a2a      	ldr	r2, [pc, #168]	@ (800cd8c <HAL_TIM_Base_Start_IT+0x11c>)
 800cce2:	4293      	cmp	r3, r2
 800cce4:	d022      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a29      	ldr	r2, [pc, #164]	@ (800cd90 <HAL_TIM_Base_Start_IT+0x120>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d01d      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	4a27      	ldr	r2, [pc, #156]	@ (800cd94 <HAL_TIM_Base_Start_IT+0x124>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d018      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a26      	ldr	r2, [pc, #152]	@ (800cd98 <HAL_TIM_Base_Start_IT+0x128>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d013      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a24      	ldr	r2, [pc, #144]	@ (800cd9c <HAL_TIM_Base_Start_IT+0x12c>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d00e      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4a23      	ldr	r2, [pc, #140]	@ (800cda0 <HAL_TIM_Base_Start_IT+0x130>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d009      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a21      	ldr	r2, [pc, #132]	@ (800cda4 <HAL_TIM_Base_Start_IT+0x134>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d004      	beq.n	800cd2c <HAL_TIM_Base_Start_IT+0xbc>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a20      	ldr	r2, [pc, #128]	@ (800cda8 <HAL_TIM_Base_Start_IT+0x138>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d115      	bne.n	800cd58 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689a      	ldr	r2, [r3, #8]
 800cd32:	4b1e      	ldr	r3, [pc, #120]	@ (800cdac <HAL_TIM_Base_Start_IT+0x13c>)
 800cd34:	4013      	ands	r3, r2
 800cd36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b06      	cmp	r3, #6
 800cd3c:	d015      	beq.n	800cd6a <HAL_TIM_Base_Start_IT+0xfa>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd44:	d011      	beq.n	800cd6a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f042 0201 	orr.w	r2, r2, #1
 800cd54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd56:	e008      	b.n	800cd6a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f042 0201 	orr.w	r2, r2, #1
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	e000      	b.n	800cd6c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cd6c:	2300      	movs	r3, #0
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3714      	adds	r7, #20
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	40012c00 	.word	0x40012c00
 800cd80:	50012c00 	.word	0x50012c00
 800cd84:	40000400 	.word	0x40000400
 800cd88:	50000400 	.word	0x50000400
 800cd8c:	40000800 	.word	0x40000800
 800cd90:	50000800 	.word	0x50000800
 800cd94:	40000c00 	.word	0x40000c00
 800cd98:	50000c00 	.word	0x50000c00
 800cd9c:	40013400 	.word	0x40013400
 800cda0:	50013400 	.word	0x50013400
 800cda4:	40014000 	.word	0x40014000
 800cda8:	50014000 	.word	0x50014000
 800cdac:	00010007 	.word	0x00010007

0800cdb0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	e049      	b.n	800ce56 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d106      	bne.n	800cddc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7f6 f83e 	bl	8002e58 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2202      	movs	r2, #2
 800cde0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3304      	adds	r3, #4
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f000 fdd2 	bl	800d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2201      	movs	r2, #1
 800ce38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3708      	adds	r7, #8
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b082      	sub	sp, #8
 800ce62:	af00      	add	r7, sp, #0
 800ce64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e049      	b.n	800cf04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d106      	bne.n	800ce8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f841 	bl	800cf0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2202      	movs	r2, #2
 800ce8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f000 fd7b 	bl	800d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2201      	movs	r2, #1
 800cece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2201      	movs	r2, #1
 800cef6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e049      	b.n	800cfc6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d106      	bne.n	800cf4c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7f5 ffa8 	bl	8002e9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	f000 fd1a 	bl	800d998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cfc4:	2300      	movs	r3, #0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	f003 0302 	and.w	r3, r3, #2
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d020      	beq.n	800d032 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f003 0302 	and.w	r3, r3, #2
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d01b      	beq.n	800d032 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f06f 0202 	mvn.w	r2, #2
 800d002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2201      	movs	r2, #1
 800d008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	699b      	ldr	r3, [r3, #24]
 800d010:	f003 0303 	and.w	r3, r3, #3
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fc9f 	bl	800d95c <HAL_TIM_IC_CaptureCallback>
 800d01e:	e005      	b.n	800d02c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fc91 	bl	800d948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fca2 	bl	800d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2200      	movs	r2, #0
 800d030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f003 0304 	and.w	r3, r3, #4
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d020      	beq.n	800d07e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f003 0304 	and.w	r3, r3, #4
 800d042:	2b00      	cmp	r3, #0
 800d044:	d01b      	beq.n	800d07e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f06f 0204 	mvn.w	r2, #4
 800d04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2202      	movs	r2, #2
 800d054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d060:	2b00      	cmp	r3, #0
 800d062:	d003      	beq.n	800d06c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fc79 	bl	800d95c <HAL_TIM_IC_CaptureCallback>
 800d06a:	e005      	b.n	800d078 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 fc6b 	bl	800d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fc7c 	bl	800d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	f003 0308 	and.w	r3, r3, #8
 800d084:	2b00      	cmp	r3, #0
 800d086:	d020      	beq.n	800d0ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f003 0308 	and.w	r3, r3, #8
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d01b      	beq.n	800d0ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f06f 0208 	mvn.w	r2, #8
 800d09a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2204      	movs	r2, #4
 800d0a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	69db      	ldr	r3, [r3, #28]
 800d0a8:	f003 0303 	and.w	r3, r3, #3
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f000 fc53 	bl	800d95c <HAL_TIM_IC_CaptureCallback>
 800d0b6:	e005      	b.n	800d0c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 fc45 	bl	800d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fc56 	bl	800d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f003 0310 	and.w	r3, r3, #16
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d020      	beq.n	800d116 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f003 0310 	and.w	r3, r3, #16
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d01b      	beq.n	800d116 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f06f 0210 	mvn.w	r2, #16
 800d0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2208      	movs	r2, #8
 800d0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	69db      	ldr	r3, [r3, #28]
 800d0f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d003      	beq.n	800d104 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fc2d 	bl	800d95c <HAL_TIM_IC_CaptureCallback>
 800d102:	e005      	b.n	800d110 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fc1f 	bl	800d948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fc30 	bl	800d970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00c      	beq.n	800d13a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d007      	beq.n	800d13a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f06f 0201 	mvn.w	r2, #1
 800d132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f7f4 ff5b 	bl	8001ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00c      	beq.n	800d168 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d154:	2b00      	cmp	r3, #0
 800d156:	d007      	beq.n	800d168 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f001 fd08 	bl	800eb78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00c      	beq.n	800d18c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 fd00 	bl	800eb8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00c      	beq.n	800d1b0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d007      	beq.n	800d1b0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 fbea 	bl	800d984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	f003 0320 	and.w	r3, r3, #32
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d00c      	beq.n	800d1d4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f003 0320 	and.w	r3, r3, #32
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d007      	beq.n	800d1d4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f06f 0220 	mvn.w	r2, #32
 800d1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 fcc8 	bl	800eb64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00c      	beq.n	800d1f8 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d007      	beq.n	800d1f8 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800d1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 fcd4 	bl	800eba0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00c      	beq.n	800d21c <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d007      	beq.n	800d21c <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800d214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f001 fccc 	bl	800ebb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00c      	beq.n	800d240 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800d238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f001 fcc4 	bl	800ebc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00c      	beq.n	800d264 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d007      	beq.n	800d264 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800d25c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f001 fcbc 	bl	800ebdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d264:	bf00      	nop
 800d266:	3710      	adds	r7, #16
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}

0800d26c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d278:	2300      	movs	r3, #0
 800d27a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d282:	2b01      	cmp	r3, #1
 800d284:	d101      	bne.n	800d28a <HAL_TIM_OC_ConfigChannel+0x1e>
 800d286:	2302      	movs	r3, #2
 800d288:	e066      	b.n	800d358 <HAL_TIM_OC_ConfigChannel+0xec>
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2b14      	cmp	r3, #20
 800d296:	d857      	bhi.n	800d348 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d298:	a201      	add	r2, pc, #4	@ (adr r2, 800d2a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800d29a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d29e:	bf00      	nop
 800d2a0:	0800d2f5 	.word	0x0800d2f5
 800d2a4:	0800d349 	.word	0x0800d349
 800d2a8:	0800d349 	.word	0x0800d349
 800d2ac:	0800d349 	.word	0x0800d349
 800d2b0:	0800d303 	.word	0x0800d303
 800d2b4:	0800d349 	.word	0x0800d349
 800d2b8:	0800d349 	.word	0x0800d349
 800d2bc:	0800d349 	.word	0x0800d349
 800d2c0:	0800d311 	.word	0x0800d311
 800d2c4:	0800d349 	.word	0x0800d349
 800d2c8:	0800d349 	.word	0x0800d349
 800d2cc:	0800d349 	.word	0x0800d349
 800d2d0:	0800d31f 	.word	0x0800d31f
 800d2d4:	0800d349 	.word	0x0800d349
 800d2d8:	0800d349 	.word	0x0800d349
 800d2dc:	0800d349 	.word	0x0800d349
 800d2e0:	0800d32d 	.word	0x0800d32d
 800d2e4:	0800d349 	.word	0x0800d349
 800d2e8:	0800d349 	.word	0x0800d349
 800d2ec:	0800d349 	.word	0x0800d349
 800d2f0:	0800d33b 	.word	0x0800d33b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 fc4c 	bl	800db98 <TIM_OC1_SetConfig>
      break;
 800d300:	e025      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68b9      	ldr	r1, [r7, #8]
 800d308:	4618      	mov	r0, r3
 800d30a:	f000 fd07 	bl	800dd1c <TIM_OC2_SetConfig>
      break;
 800d30e:	e01e      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68b9      	ldr	r1, [r7, #8]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 fdb0 	bl	800de7c <TIM_OC3_SetConfig>
      break;
 800d31c:	e017      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fe57 	bl	800dfd8 <TIM_OC4_SetConfig>
      break;
 800d32a:	e010      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68b9      	ldr	r1, [r7, #8]
 800d332:	4618      	mov	r0, r3
 800d334:	f000 ff00 	bl	800e138 <TIM_OC5_SetConfig>
      break;
 800d338:	e009      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	68b9      	ldr	r1, [r7, #8]
 800d340:	4618      	mov	r0, r3
 800d342:	f000 ff7b 	bl	800e23c <TIM_OC6_SetConfig>
      break;
 800d346:	e002      	b.n	800d34e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d348:	2301      	movs	r3, #1
 800d34a:	75fb      	strb	r3, [r7, #23]
      break;
 800d34c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2200      	movs	r2, #0
 800d352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d356:	7dfb      	ldrb	r3, [r7, #23]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d376:	2b01      	cmp	r3, #1
 800d378:	d101      	bne.n	800d37e <HAL_TIM_IC_ConfigChannel+0x1e>
 800d37a:	2302      	movs	r3, #2
 800d37c:	e088      	b.n	800d490 <HAL_TIM_IC_ConfigChannel+0x130>
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d11b      	bne.n	800d3c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d39c:	f001 f89e 	bl	800e4dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	699a      	ldr	r2, [r3, #24]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f022 020c 	bic.w	r2, r2, #12
 800d3ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	6999      	ldr	r1, [r3, #24]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	689a      	ldr	r2, [r3, #8]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	619a      	str	r2, [r3, #24]
 800d3c2:	e060      	b.n	800d486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b04      	cmp	r3, #4
 800d3c8:	d11c      	bne.n	800d404 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d3da:	f001 f944 	bl	800e666 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	699a      	ldr	r2, [r3, #24]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d3ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6999      	ldr	r1, [r3, #24]
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	689b      	ldr	r3, [r3, #8]
 800d3f8:	021a      	lsls	r2, r3, #8
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	430a      	orrs	r2, r1
 800d400:	619a      	str	r2, [r3, #24]
 800d402:	e040      	b.n	800d486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b08      	cmp	r3, #8
 800d408:	d11b      	bne.n	800d442 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d41a:	f001 f991 	bl	800e740 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	69da      	ldr	r2, [r3, #28]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f022 020c 	bic.w	r2, r2, #12
 800d42c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	69d9      	ldr	r1, [r3, #28]
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	689a      	ldr	r2, [r3, #8]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	430a      	orrs	r2, r1
 800d43e:	61da      	str	r2, [r3, #28]
 800d440:	e021      	b.n	800d486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2b0c      	cmp	r3, #12
 800d446:	d11c      	bne.n	800d482 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d458:	f001 f9ae 	bl	800e7b8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69da      	ldr	r2, [r3, #28]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d46a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	69d9      	ldr	r1, [r3, #28]
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	021a      	lsls	r2, r3, #8
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	430a      	orrs	r2, r1
 800d47e:	61da      	str	r2, [r3, #28]
 800d480:	e001      	b.n	800d486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d482:	2301      	movs	r3, #1
 800d484:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d490:	4618      	mov	r0, r3
 800d492:	3718      	adds	r7, #24
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b086      	sub	sp, #24
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	60b9      	str	r1, [r7, #8]
 800d4a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d101      	bne.n	800d4b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d4b2:	2302      	movs	r3, #2
 800d4b4:	e0ff      	b.n	800d6b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b14      	cmp	r3, #20
 800d4c2:	f200 80f0 	bhi.w	800d6a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d4c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d4cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d521 	.word	0x0800d521
 800d4d0:	0800d6a7 	.word	0x0800d6a7
 800d4d4:	0800d6a7 	.word	0x0800d6a7
 800d4d8:	0800d6a7 	.word	0x0800d6a7
 800d4dc:	0800d561 	.word	0x0800d561
 800d4e0:	0800d6a7 	.word	0x0800d6a7
 800d4e4:	0800d6a7 	.word	0x0800d6a7
 800d4e8:	0800d6a7 	.word	0x0800d6a7
 800d4ec:	0800d5a3 	.word	0x0800d5a3
 800d4f0:	0800d6a7 	.word	0x0800d6a7
 800d4f4:	0800d6a7 	.word	0x0800d6a7
 800d4f8:	0800d6a7 	.word	0x0800d6a7
 800d4fc:	0800d5e3 	.word	0x0800d5e3
 800d500:	0800d6a7 	.word	0x0800d6a7
 800d504:	0800d6a7 	.word	0x0800d6a7
 800d508:	0800d6a7 	.word	0x0800d6a7
 800d50c:	0800d625 	.word	0x0800d625
 800d510:	0800d6a7 	.word	0x0800d6a7
 800d514:	0800d6a7 	.word	0x0800d6a7
 800d518:	0800d6a7 	.word	0x0800d6a7
 800d51c:	0800d665 	.word	0x0800d665
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68b9      	ldr	r1, [r7, #8]
 800d526:	4618      	mov	r0, r3
 800d528:	f000 fb36 	bl	800db98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	699a      	ldr	r2, [r3, #24]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f042 0208 	orr.w	r2, r2, #8
 800d53a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	699a      	ldr	r2, [r3, #24]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0204 	bic.w	r2, r2, #4
 800d54a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	6999      	ldr	r1, [r3, #24]
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	691a      	ldr	r2, [r3, #16]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	430a      	orrs	r2, r1
 800d55c:	619a      	str	r2, [r3, #24]
      break;
 800d55e:	e0a5      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	68b9      	ldr	r1, [r7, #8]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 fbd8 	bl	800dd1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	699a      	ldr	r2, [r3, #24]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d57a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	699a      	ldr	r2, [r3, #24]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d58a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6999      	ldr	r1, [r3, #24]
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	691b      	ldr	r3, [r3, #16]
 800d596:	021a      	lsls	r2, r3, #8
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	430a      	orrs	r2, r1
 800d59e:	619a      	str	r2, [r3, #24]
      break;
 800d5a0:	e084      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68b9      	ldr	r1, [r7, #8]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 fc67 	bl	800de7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	69da      	ldr	r2, [r3, #28]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f042 0208 	orr.w	r2, r2, #8
 800d5bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69da      	ldr	r2, [r3, #28]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f022 0204 	bic.w	r2, r2, #4
 800d5cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	69d9      	ldr	r1, [r3, #28]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	691a      	ldr	r2, [r3, #16]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	61da      	str	r2, [r3, #28]
      break;
 800d5e0:	e064      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 fcf5 	bl	800dfd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	69da      	ldr	r2, [r3, #28]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d5fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	69da      	ldr	r2, [r3, #28]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d60c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	69d9      	ldr	r1, [r3, #28]
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	021a      	lsls	r2, r3, #8
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	430a      	orrs	r2, r1
 800d620:	61da      	str	r2, [r3, #28]
      break;
 800d622:	e043      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f000 fd84 	bl	800e138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f042 0208 	orr.w	r2, r2, #8
 800d63e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f022 0204 	bic.w	r2, r2, #4
 800d64e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	691a      	ldr	r2, [r3, #16]
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d662:	e023      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68b9      	ldr	r1, [r7, #8]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 fde6 	bl	800e23c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d67e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d68e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	021a      	lsls	r2, r3, #8
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	430a      	orrs	r2, r1
 800d6a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800d6a4:	e002      	b.n	800d6ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800d6aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop

0800d6c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d101      	bne.n	800d6dc <HAL_TIM_ConfigClockSource+0x1c>
 800d6d8:	2302      	movs	r3, #2
 800d6da:	e0e6      	b.n	800d8aa <HAL_TIM_ConfigClockSource+0x1ea>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2201      	movs	r2, #1
 800d6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2202      	movs	r2, #2
 800d6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800d6fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d6fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68ba      	ldr	r2, [r7, #8]
 800d70e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a67      	ldr	r2, [pc, #412]	@ (800d8b4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800d716:	4293      	cmp	r3, r2
 800d718:	f000 80b1 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d71c:	4a65      	ldr	r2, [pc, #404]	@ (800d8b4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	f200 80b6 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d724:	4a64      	ldr	r2, [pc, #400]	@ (800d8b8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800d726:	4293      	cmp	r3, r2
 800d728:	f000 80a9 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d72c:	4a62      	ldr	r2, [pc, #392]	@ (800d8b8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	f200 80ae 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d734:	4a61      	ldr	r2, [pc, #388]	@ (800d8bc <HAL_TIM_ConfigClockSource+0x1fc>)
 800d736:	4293      	cmp	r3, r2
 800d738:	f000 80a1 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d73c:	4a5f      	ldr	r2, [pc, #380]	@ (800d8bc <HAL_TIM_ConfigClockSource+0x1fc>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	f200 80a6 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d744:	4a5e      	ldr	r2, [pc, #376]	@ (800d8c0 <HAL_TIM_ConfigClockSource+0x200>)
 800d746:	4293      	cmp	r3, r2
 800d748:	f000 8099 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d74c:	4a5c      	ldr	r2, [pc, #368]	@ (800d8c0 <HAL_TIM_ConfigClockSource+0x200>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	f200 809e 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d754:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d758:	f000 8091 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d75c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800d760:	f200 8096 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d764:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d768:	f000 8089 	beq.w	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d76c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d770:	f200 808e 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d774:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d778:	d03e      	beq.n	800d7f8 <HAL_TIM_ConfigClockSource+0x138>
 800d77a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d77e:	f200 8087 	bhi.w	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d786:	f000 8086 	beq.w	800d896 <HAL_TIM_ConfigClockSource+0x1d6>
 800d78a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d78e:	d87f      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d790:	2b70      	cmp	r3, #112	@ 0x70
 800d792:	d01a      	beq.n	800d7ca <HAL_TIM_ConfigClockSource+0x10a>
 800d794:	2b70      	cmp	r3, #112	@ 0x70
 800d796:	d87b      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d798:	2b60      	cmp	r3, #96	@ 0x60
 800d79a:	d050      	beq.n	800d83e <HAL_TIM_ConfigClockSource+0x17e>
 800d79c:	2b60      	cmp	r3, #96	@ 0x60
 800d79e:	d877      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d7a0:	2b50      	cmp	r3, #80	@ 0x50
 800d7a2:	d03c      	beq.n	800d81e <HAL_TIM_ConfigClockSource+0x15e>
 800d7a4:	2b50      	cmp	r3, #80	@ 0x50
 800d7a6:	d873      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d7a8:	2b40      	cmp	r3, #64	@ 0x40
 800d7aa:	d058      	beq.n	800d85e <HAL_TIM_ConfigClockSource+0x19e>
 800d7ac:	2b40      	cmp	r3, #64	@ 0x40
 800d7ae:	d86f      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d7b0:	2b30      	cmp	r3, #48	@ 0x30
 800d7b2:	d064      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d7b4:	2b30      	cmp	r3, #48	@ 0x30
 800d7b6:	d86b      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d7b8:	2b20      	cmp	r3, #32
 800d7ba:	d060      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d7bc:	2b20      	cmp	r3, #32
 800d7be:	d867      	bhi.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d05c      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d7c4:	2b10      	cmp	r3, #16
 800d7c6:	d05a      	beq.n	800d87e <HAL_TIM_ConfigClockSource+0x1be>
 800d7c8:	e062      	b.n	800d890 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d7da:	f001 f847 	bl	800e86c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d7ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68ba      	ldr	r2, [r7, #8]
 800d7f4:	609a      	str	r2, [r3, #8]
      break;
 800d7f6:	e04f      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d808:	f001 f830 	bl	800e86c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689a      	ldr	r2, [r3, #8]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d81a:	609a      	str	r2, [r3, #8]
      break;
 800d81c:	e03c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d82a:	461a      	mov	r2, r3
 800d82c:	f000 feec 	bl	800e608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2150      	movs	r1, #80	@ 0x50
 800d836:	4618      	mov	r0, r3
 800d838:	f000 fffb 	bl	800e832 <TIM_ITRx_SetConfig>
      break;
 800d83c:	e02c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d84a:	461a      	mov	r2, r3
 800d84c:	f000 ff48 	bl	800e6e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2160      	movs	r1, #96	@ 0x60
 800d856:	4618      	mov	r0, r3
 800d858:	f000 ffeb 	bl	800e832 <TIM_ITRx_SetConfig>
      break;
 800d85c:	e01c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d86a:	461a      	mov	r2, r3
 800d86c:	f000 fecc 	bl	800e608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2140      	movs	r1, #64	@ 0x40
 800d876:	4618      	mov	r0, r3
 800d878:	f000 ffdb 	bl	800e832 <TIM_ITRx_SetConfig>
      break;
 800d87c:	e00c      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	4619      	mov	r1, r3
 800d888:	4610      	mov	r0, r2
 800d88a:	f000 ffd2 	bl	800e832 <TIM_ITRx_SetConfig>
      break;
 800d88e:	e003      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800d890:	2301      	movs	r3, #1
 800d892:	73fb      	strb	r3, [r7, #15]
      break;
 800d894:	e000      	b.n	800d898 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800d896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
 800d8b2:	bf00      	nop
 800d8b4:	00100070 	.word	0x00100070
 800d8b8:	00100040 	.word	0x00100040
 800d8bc:	00100030 	.word	0x00100030
 800d8c0:	00100020 	.word	0x00100020

0800d8c4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d101      	bne.n	800d8dc <HAL_TIM_SlaveConfigSynchro+0x18>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e031      	b.n	800d940 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d8ec:	6839      	ldr	r1, [r7, #0]
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fd28 	bl	800e344 <TIM_SlaveTimer_SetConfig>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d009      	beq.n	800d90e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e018      	b.n	800d940 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	68da      	ldr	r2, [r3, #12]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d91c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	68da      	ldr	r2, [r3, #12]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d92c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d950:	bf00      	nop
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d984:	b480      	push	{r7}
 800d986:	b083      	sub	sp, #12
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d98c:	bf00      	nop
 800d98e:	370c      	adds	r7, #12
 800d990:	46bd      	mov	sp, r7
 800d992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d996:	4770      	bx	lr

0800d998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a6b      	ldr	r2, [pc, #428]	@ (800db58 <TIM_Base_SetConfig+0x1c0>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d02b      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4a6a      	ldr	r2, [pc, #424]	@ (800db5c <TIM_Base_SetConfig+0x1c4>)
 800d9b4:	4293      	cmp	r3, r2
 800d9b6:	d027      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9be:	d023      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d9c6:	d01f      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	4a65      	ldr	r2, [pc, #404]	@ (800db60 <TIM_Base_SetConfig+0x1c8>)
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	d01b      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	4a64      	ldr	r2, [pc, #400]	@ (800db64 <TIM_Base_SetConfig+0x1cc>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d017      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	4a63      	ldr	r2, [pc, #396]	@ (800db68 <TIM_Base_SetConfig+0x1d0>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d013      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	4a62      	ldr	r2, [pc, #392]	@ (800db6c <TIM_Base_SetConfig+0x1d4>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d00f      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	4a61      	ldr	r2, [pc, #388]	@ (800db70 <TIM_Base_SetConfig+0x1d8>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d00b      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	4a60      	ldr	r2, [pc, #384]	@ (800db74 <TIM_Base_SetConfig+0x1dc>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d007      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	4a5f      	ldr	r2, [pc, #380]	@ (800db78 <TIM_Base_SetConfig+0x1e0>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d003      	beq.n	800da08 <TIM_Base_SetConfig+0x70>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	4a5e      	ldr	r2, [pc, #376]	@ (800db7c <TIM_Base_SetConfig+0x1e4>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d108      	bne.n	800da1a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4313      	orrs	r3, r2
 800da18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	4a4e      	ldr	r2, [pc, #312]	@ (800db58 <TIM_Base_SetConfig+0x1c0>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d043      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a4d      	ldr	r2, [pc, #308]	@ (800db5c <TIM_Base_SetConfig+0x1c4>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d03f      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da30:	d03b      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800da38:	d037      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a48      	ldr	r2, [pc, #288]	@ (800db60 <TIM_Base_SetConfig+0x1c8>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d033      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a47      	ldr	r2, [pc, #284]	@ (800db64 <TIM_Base_SetConfig+0x1cc>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d02f      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4a46      	ldr	r2, [pc, #280]	@ (800db68 <TIM_Base_SetConfig+0x1d0>)
 800da4e:	4293      	cmp	r3, r2
 800da50:	d02b      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	4a45      	ldr	r2, [pc, #276]	@ (800db6c <TIM_Base_SetConfig+0x1d4>)
 800da56:	4293      	cmp	r3, r2
 800da58:	d027      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	4a44      	ldr	r2, [pc, #272]	@ (800db70 <TIM_Base_SetConfig+0x1d8>)
 800da5e:	4293      	cmp	r3, r2
 800da60:	d023      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4a43      	ldr	r2, [pc, #268]	@ (800db74 <TIM_Base_SetConfig+0x1dc>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d01f      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a42      	ldr	r2, [pc, #264]	@ (800db78 <TIM_Base_SetConfig+0x1e0>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d01b      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a41      	ldr	r2, [pc, #260]	@ (800db7c <TIM_Base_SetConfig+0x1e4>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d017      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a40      	ldr	r2, [pc, #256]	@ (800db80 <TIM_Base_SetConfig+0x1e8>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d013      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a3f      	ldr	r2, [pc, #252]	@ (800db84 <TIM_Base_SetConfig+0x1ec>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d00f      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a3e      	ldr	r2, [pc, #248]	@ (800db88 <TIM_Base_SetConfig+0x1f0>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d00b      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a3d      	ldr	r2, [pc, #244]	@ (800db8c <TIM_Base_SetConfig+0x1f4>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d007      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a3c      	ldr	r2, [pc, #240]	@ (800db90 <TIM_Base_SetConfig+0x1f8>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d003      	beq.n	800daaa <TIM_Base_SetConfig+0x112>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a3b      	ldr	r2, [pc, #236]	@ (800db94 <TIM_Base_SetConfig+0x1fc>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d108      	bne.n	800dabc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	4313      	orrs	r3, r2
 800daba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	689a      	ldr	r2, [r3, #8]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a1e      	ldr	r2, [pc, #120]	@ (800db58 <TIM_Base_SetConfig+0x1c0>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d023      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a1d      	ldr	r2, [pc, #116]	@ (800db5c <TIM_Base_SetConfig+0x1c4>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d01f      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4a22      	ldr	r2, [pc, #136]	@ (800db78 <TIM_Base_SetConfig+0x1e0>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d01b      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4a21      	ldr	r2, [pc, #132]	@ (800db7c <TIM_Base_SetConfig+0x1e4>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d017      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	4a20      	ldr	r2, [pc, #128]	@ (800db80 <TIM_Base_SetConfig+0x1e8>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d013      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4a1f      	ldr	r2, [pc, #124]	@ (800db84 <TIM_Base_SetConfig+0x1ec>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d00f      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a1e      	ldr	r2, [pc, #120]	@ (800db88 <TIM_Base_SetConfig+0x1f0>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d00b      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	4a1d      	ldr	r2, [pc, #116]	@ (800db8c <TIM_Base_SetConfig+0x1f4>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d007      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	4a1c      	ldr	r2, [pc, #112]	@ (800db90 <TIM_Base_SetConfig+0x1f8>)
 800db1e:	4293      	cmp	r3, r2
 800db20:	d003      	beq.n	800db2a <TIM_Base_SetConfig+0x192>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4a1b      	ldr	r2, [pc, #108]	@ (800db94 <TIM_Base_SetConfig+0x1fc>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d103      	bne.n	800db32 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	691a      	ldr	r2, [r3, #16]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f043 0204 	orr.w	r2, r3, #4
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	2201      	movs	r2, #1
 800db42:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	68fa      	ldr	r2, [r7, #12]
 800db48:	601a      	str	r2, [r3, #0]
}
 800db4a:	bf00      	nop
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	40012c00 	.word	0x40012c00
 800db5c:	50012c00 	.word	0x50012c00
 800db60:	40000400 	.word	0x40000400
 800db64:	50000400 	.word	0x50000400
 800db68:	40000800 	.word	0x40000800
 800db6c:	50000800 	.word	0x50000800
 800db70:	40000c00 	.word	0x40000c00
 800db74:	50000c00 	.word	0x50000c00
 800db78:	40013400 	.word	0x40013400
 800db7c:	50013400 	.word	0x50013400
 800db80:	40014000 	.word	0x40014000
 800db84:	50014000 	.word	0x50014000
 800db88:	40014400 	.word	0x40014400
 800db8c:	50014400 	.word	0x50014400
 800db90:	40014800 	.word	0x40014800
 800db94:	50014800 	.word	0x50014800

0800db98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800db98:	b480      	push	{r7}
 800db9a:	b087      	sub	sp, #28
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a1b      	ldr	r3, [r3, #32]
 800dbac:	f023 0201 	bic.w	r2, r3, #1
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685b      	ldr	r3, [r3, #4]
 800dbb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	699b      	ldr	r3, [r3, #24]
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dbc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	f023 0303 	bic.w	r3, r3, #3
 800dbd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f023 0302 	bic.w	r3, r3, #2
 800dbe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	689b      	ldr	r3, [r3, #8]
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	4313      	orrs	r3, r2
 800dbee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4a40      	ldr	r2, [pc, #256]	@ (800dcf4 <TIM_OC1_SetConfig+0x15c>)
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	d023      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	4a3f      	ldr	r2, [pc, #252]	@ (800dcf8 <TIM_OC1_SetConfig+0x160>)
 800dbfc:	4293      	cmp	r3, r2
 800dbfe:	d01f      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	4a3e      	ldr	r2, [pc, #248]	@ (800dcfc <TIM_OC1_SetConfig+0x164>)
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d01b      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	4a3d      	ldr	r2, [pc, #244]	@ (800dd00 <TIM_OC1_SetConfig+0x168>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	d017      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4a3c      	ldr	r2, [pc, #240]	@ (800dd04 <TIM_OC1_SetConfig+0x16c>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d013      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a3b      	ldr	r2, [pc, #236]	@ (800dd08 <TIM_OC1_SetConfig+0x170>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d00f      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4a3a      	ldr	r2, [pc, #232]	@ (800dd0c <TIM_OC1_SetConfig+0x174>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d00b      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	4a39      	ldr	r2, [pc, #228]	@ (800dd10 <TIM_OC1_SetConfig+0x178>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d007      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	4a38      	ldr	r2, [pc, #224]	@ (800dd14 <TIM_OC1_SetConfig+0x17c>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d003      	beq.n	800dc40 <TIM_OC1_SetConfig+0xa8>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	4a37      	ldr	r2, [pc, #220]	@ (800dd18 <TIM_OC1_SetConfig+0x180>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d10c      	bne.n	800dc5a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	f023 0308 	bic.w	r3, r3, #8
 800dc46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	697a      	ldr	r2, [r7, #20]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f023 0304 	bic.w	r3, r3, #4
 800dc58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a25      	ldr	r2, [pc, #148]	@ (800dcf4 <TIM_OC1_SetConfig+0x15c>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d023      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	4a24      	ldr	r2, [pc, #144]	@ (800dcf8 <TIM_OC1_SetConfig+0x160>)
 800dc66:	4293      	cmp	r3, r2
 800dc68:	d01f      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4a23      	ldr	r2, [pc, #140]	@ (800dcfc <TIM_OC1_SetConfig+0x164>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d01b      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	4a22      	ldr	r2, [pc, #136]	@ (800dd00 <TIM_OC1_SetConfig+0x168>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d017      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4a21      	ldr	r2, [pc, #132]	@ (800dd04 <TIM_OC1_SetConfig+0x16c>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d013      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	4a20      	ldr	r2, [pc, #128]	@ (800dd08 <TIM_OC1_SetConfig+0x170>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d00f      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a1f      	ldr	r2, [pc, #124]	@ (800dd0c <TIM_OC1_SetConfig+0x174>)
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d00b      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	4a1e      	ldr	r2, [pc, #120]	@ (800dd10 <TIM_OC1_SetConfig+0x178>)
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d007      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a1d      	ldr	r2, [pc, #116]	@ (800dd14 <TIM_OC1_SetConfig+0x17c>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d003      	beq.n	800dcaa <TIM_OC1_SetConfig+0x112>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a1c      	ldr	r2, [pc, #112]	@ (800dd18 <TIM_OC1_SetConfig+0x180>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d111      	bne.n	800dcce <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dcb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dcb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	695b      	ldr	r3, [r3, #20]
 800dcbe:	693a      	ldr	r2, [r7, #16]
 800dcc0:	4313      	orrs	r3, r2
 800dcc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	4313      	orrs	r3, r2
 800dccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	68fa      	ldr	r2, [r7, #12]
 800dcd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	621a      	str	r2, [r3, #32]
}
 800dce8:	bf00      	nop
 800dcea:	371c      	adds	r7, #28
 800dcec:	46bd      	mov	sp, r7
 800dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf2:	4770      	bx	lr
 800dcf4:	40012c00 	.word	0x40012c00
 800dcf8:	50012c00 	.word	0x50012c00
 800dcfc:	40013400 	.word	0x40013400
 800dd00:	50013400 	.word	0x50013400
 800dd04:	40014000 	.word	0x40014000
 800dd08:	50014000 	.word	0x50014000
 800dd0c:	40014400 	.word	0x40014400
 800dd10:	50014400 	.word	0x50014400
 800dd14:	40014800 	.word	0x40014800
 800dd18:	50014800 	.word	0x50014800

0800dd1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b087      	sub	sp, #28
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6a1b      	ldr	r3, [r3, #32]
 800dd2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	f023 0210 	bic.w	r2, r3, #16
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dd4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dd4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	021b      	lsls	r3, r3, #8
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	4313      	orrs	r3, r2
 800dd62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	f023 0320 	bic.w	r3, r3, #32
 800dd6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	011b      	lsls	r3, r3, #4
 800dd72:	697a      	ldr	r2, [r7, #20]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4a36      	ldr	r2, [pc, #216]	@ (800de54 <TIM_OC2_SetConfig+0x138>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d00b      	beq.n	800dd98 <TIM_OC2_SetConfig+0x7c>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a35      	ldr	r2, [pc, #212]	@ (800de58 <TIM_OC2_SetConfig+0x13c>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d007      	beq.n	800dd98 <TIM_OC2_SetConfig+0x7c>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	4a34      	ldr	r2, [pc, #208]	@ (800de5c <TIM_OC2_SetConfig+0x140>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d003      	beq.n	800dd98 <TIM_OC2_SetConfig+0x7c>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a33      	ldr	r2, [pc, #204]	@ (800de60 <TIM_OC2_SetConfig+0x144>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d10d      	bne.n	800ddb4 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	011b      	lsls	r3, r3, #4
 800dda6:	697a      	ldr	r2, [r7, #20]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a27      	ldr	r2, [pc, #156]	@ (800de54 <TIM_OC2_SetConfig+0x138>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d023      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a26      	ldr	r2, [pc, #152]	@ (800de58 <TIM_OC2_SetConfig+0x13c>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d01f      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a25      	ldr	r2, [pc, #148]	@ (800de5c <TIM_OC2_SetConfig+0x140>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d01b      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a24      	ldr	r2, [pc, #144]	@ (800de60 <TIM_OC2_SetConfig+0x144>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d017      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a23      	ldr	r2, [pc, #140]	@ (800de64 <TIM_OC2_SetConfig+0x148>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d013      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a22      	ldr	r2, [pc, #136]	@ (800de68 <TIM_OC2_SetConfig+0x14c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d00f      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a21      	ldr	r2, [pc, #132]	@ (800de6c <TIM_OC2_SetConfig+0x150>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d00b      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a20      	ldr	r2, [pc, #128]	@ (800de70 <TIM_OC2_SetConfig+0x154>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d007      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4a1f      	ldr	r2, [pc, #124]	@ (800de74 <TIM_OC2_SetConfig+0x158>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d003      	beq.n	800de04 <TIM_OC2_SetConfig+0xe8>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	4a1e      	ldr	r2, [pc, #120]	@ (800de78 <TIM_OC2_SetConfig+0x15c>)
 800de00:	4293      	cmp	r3, r2
 800de02:	d113      	bne.n	800de2c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800de0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800de12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	693a      	ldr	r2, [r7, #16]
 800de1c:	4313      	orrs	r3, r2
 800de1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	4313      	orrs	r3, r2
 800de2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	693a      	ldr	r2, [r7, #16]
 800de30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	685a      	ldr	r2, [r3, #4]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	697a      	ldr	r2, [r7, #20]
 800de44:	621a      	str	r2, [r3, #32]
}
 800de46:	bf00      	nop
 800de48:	371c      	adds	r7, #28
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	40012c00 	.word	0x40012c00
 800de58:	50012c00 	.word	0x50012c00
 800de5c:	40013400 	.word	0x40013400
 800de60:	50013400 	.word	0x50013400
 800de64:	40014000 	.word	0x40014000
 800de68:	50014000 	.word	0x50014000
 800de6c:	40014400 	.word	0x40014400
 800de70:	50014400 	.word	0x50014400
 800de74:	40014800 	.word	0x40014800
 800de78:	50014800 	.word	0x50014800

0800de7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de7c:	b480      	push	{r7}
 800de7e:	b087      	sub	sp, #28
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6a1b      	ldr	r3, [r3, #32]
 800de8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	69db      	ldr	r3, [r3, #28]
 800dea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800deaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800deae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f023 0303 	bic.w	r3, r3, #3
 800deb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68fa      	ldr	r2, [r7, #12]
 800debe:	4313      	orrs	r3, r2
 800dec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	021b      	lsls	r3, r3, #8
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	4a35      	ldr	r2, [pc, #212]	@ (800dfb0 <TIM_OC3_SetConfig+0x134>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d00b      	beq.n	800def6 <TIM_OC3_SetConfig+0x7a>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4a34      	ldr	r2, [pc, #208]	@ (800dfb4 <TIM_OC3_SetConfig+0x138>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d007      	beq.n	800def6 <TIM_OC3_SetConfig+0x7a>
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	4a33      	ldr	r2, [pc, #204]	@ (800dfb8 <TIM_OC3_SetConfig+0x13c>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d003      	beq.n	800def6 <TIM_OC3_SetConfig+0x7a>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	4a32      	ldr	r2, [pc, #200]	@ (800dfbc <TIM_OC3_SetConfig+0x140>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d10d      	bne.n	800df12 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800defc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	021b      	lsls	r3, r3, #8
 800df04:	697a      	ldr	r2, [r7, #20]
 800df06:	4313      	orrs	r3, r2
 800df08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800df10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a26      	ldr	r2, [pc, #152]	@ (800dfb0 <TIM_OC3_SetConfig+0x134>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d023      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a25      	ldr	r2, [pc, #148]	@ (800dfb4 <TIM_OC3_SetConfig+0x138>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d01f      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a24      	ldr	r2, [pc, #144]	@ (800dfb8 <TIM_OC3_SetConfig+0x13c>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d01b      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4a23      	ldr	r2, [pc, #140]	@ (800dfbc <TIM_OC3_SetConfig+0x140>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d017      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4a22      	ldr	r2, [pc, #136]	@ (800dfc0 <TIM_OC3_SetConfig+0x144>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d013      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a21      	ldr	r2, [pc, #132]	@ (800dfc4 <TIM_OC3_SetConfig+0x148>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d00f      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a20      	ldr	r2, [pc, #128]	@ (800dfc8 <TIM_OC3_SetConfig+0x14c>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d00b      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	4a1f      	ldr	r2, [pc, #124]	@ (800dfcc <TIM_OC3_SetConfig+0x150>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d007      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	4a1e      	ldr	r2, [pc, #120]	@ (800dfd0 <TIM_OC3_SetConfig+0x154>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d003      	beq.n	800df62 <TIM_OC3_SetConfig+0xe6>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfd4 <TIM_OC3_SetConfig+0x158>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d113      	bne.n	800df8a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800df70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	011b      	lsls	r3, r3, #4
 800df78:	693a      	ldr	r2, [r7, #16]
 800df7a:	4313      	orrs	r3, r2
 800df7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	699b      	ldr	r3, [r3, #24]
 800df82:	011b      	lsls	r3, r3, #4
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	4313      	orrs	r3, r2
 800df88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	693a      	ldr	r2, [r7, #16]
 800df8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68fa      	ldr	r2, [r7, #12]
 800df94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	685a      	ldr	r2, [r3, #4]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	621a      	str	r2, [r3, #32]
}
 800dfa4:	bf00      	nop
 800dfa6:	371c      	adds	r7, #28
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr
 800dfb0:	40012c00 	.word	0x40012c00
 800dfb4:	50012c00 	.word	0x50012c00
 800dfb8:	40013400 	.word	0x40013400
 800dfbc:	50013400 	.word	0x50013400
 800dfc0:	40014000 	.word	0x40014000
 800dfc4:	50014000 	.word	0x50014000
 800dfc8:	40014400 	.word	0x40014400
 800dfcc:	50014400 	.word	0x50014400
 800dfd0:	40014800 	.word	0x40014800
 800dfd4:	50014800 	.word	0x50014800

0800dfd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b087      	sub	sp, #28
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a1b      	ldr	r3, [r3, #32]
 800dfec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	69db      	ldr	r3, [r3, #28]
 800dffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	021b      	lsls	r3, r3, #8
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	4313      	orrs	r3, r2
 800e01e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	689b      	ldr	r3, [r3, #8]
 800e02c:	031b      	lsls	r3, r3, #12
 800e02e:	697a      	ldr	r2, [r7, #20]
 800e030:	4313      	orrs	r3, r2
 800e032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a36      	ldr	r2, [pc, #216]	@ (800e110 <TIM_OC4_SetConfig+0x138>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d00b      	beq.n	800e054 <TIM_OC4_SetConfig+0x7c>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a35      	ldr	r2, [pc, #212]	@ (800e114 <TIM_OC4_SetConfig+0x13c>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d007      	beq.n	800e054 <TIM_OC4_SetConfig+0x7c>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a34      	ldr	r2, [pc, #208]	@ (800e118 <TIM_OC4_SetConfig+0x140>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d003      	beq.n	800e054 <TIM_OC4_SetConfig+0x7c>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a33      	ldr	r2, [pc, #204]	@ (800e11c <TIM_OC4_SetConfig+0x144>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d10d      	bne.n	800e070 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e05a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	031b      	lsls	r3, r3, #12
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	4313      	orrs	r3, r2
 800e066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e06e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	4a27      	ldr	r2, [pc, #156]	@ (800e110 <TIM_OC4_SetConfig+0x138>)
 800e074:	4293      	cmp	r3, r2
 800e076:	d023      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	4a26      	ldr	r2, [pc, #152]	@ (800e114 <TIM_OC4_SetConfig+0x13c>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d01f      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4a25      	ldr	r2, [pc, #148]	@ (800e118 <TIM_OC4_SetConfig+0x140>)
 800e084:	4293      	cmp	r3, r2
 800e086:	d01b      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a24      	ldr	r2, [pc, #144]	@ (800e11c <TIM_OC4_SetConfig+0x144>)
 800e08c:	4293      	cmp	r3, r2
 800e08e:	d017      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	4a23      	ldr	r2, [pc, #140]	@ (800e120 <TIM_OC4_SetConfig+0x148>)
 800e094:	4293      	cmp	r3, r2
 800e096:	d013      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	4a22      	ldr	r2, [pc, #136]	@ (800e124 <TIM_OC4_SetConfig+0x14c>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d00f      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	4a21      	ldr	r2, [pc, #132]	@ (800e128 <TIM_OC4_SetConfig+0x150>)
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d00b      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	4a20      	ldr	r2, [pc, #128]	@ (800e12c <TIM_OC4_SetConfig+0x154>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d007      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4a1f      	ldr	r2, [pc, #124]	@ (800e130 <TIM_OC4_SetConfig+0x158>)
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	d003      	beq.n	800e0c0 <TIM_OC4_SetConfig+0xe8>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e134 <TIM_OC4_SetConfig+0x15c>)
 800e0bc:	4293      	cmp	r3, r2
 800e0be:	d113      	bne.n	800e0e8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e0c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e0ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	695b      	ldr	r3, [r3, #20]
 800e0d4:	019b      	lsls	r3, r3, #6
 800e0d6:	693a      	ldr	r2, [r7, #16]
 800e0d8:	4313      	orrs	r3, r2
 800e0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	019b      	lsls	r3, r3, #6
 800e0e2:	693a      	ldr	r2, [r7, #16]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	685a      	ldr	r2, [r3, #4]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	697a      	ldr	r2, [r7, #20]
 800e100:	621a      	str	r2, [r3, #32]
}
 800e102:	bf00      	nop
 800e104:	371c      	adds	r7, #28
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	40012c00 	.word	0x40012c00
 800e114:	50012c00 	.word	0x50012c00
 800e118:	40013400 	.word	0x40013400
 800e11c:	50013400 	.word	0x50013400
 800e120:	40014000 	.word	0x40014000
 800e124:	50014000 	.word	0x50014000
 800e128:	40014400 	.word	0x40014400
 800e12c:	50014400 	.word	0x50014400
 800e130:	40014800 	.word	0x40014800
 800e134:	50014800 	.word	0x50014800

0800e138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	4313      	orrs	r3, r2
 800e174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e17c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	041b      	lsls	r3, r3, #16
 800e184:	693a      	ldr	r2, [r7, #16]
 800e186:	4313      	orrs	r3, r2
 800e188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	4a21      	ldr	r2, [pc, #132]	@ (800e214 <TIM_OC5_SetConfig+0xdc>)
 800e18e:	4293      	cmp	r3, r2
 800e190:	d023      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	4a20      	ldr	r2, [pc, #128]	@ (800e218 <TIM_OC5_SetConfig+0xe0>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d01f      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	4a1f      	ldr	r2, [pc, #124]	@ (800e21c <TIM_OC5_SetConfig+0xe4>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d01b      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	4a1e      	ldr	r2, [pc, #120]	@ (800e220 <TIM_OC5_SetConfig+0xe8>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d017      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4a1d      	ldr	r2, [pc, #116]	@ (800e224 <TIM_OC5_SetConfig+0xec>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d013      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e228 <TIM_OC5_SetConfig+0xf0>)
 800e1b6:	4293      	cmp	r3, r2
 800e1b8:	d00f      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	4a1b      	ldr	r2, [pc, #108]	@ (800e22c <TIM_OC5_SetConfig+0xf4>)
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d00b      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	4a1a      	ldr	r2, [pc, #104]	@ (800e230 <TIM_OC5_SetConfig+0xf8>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d007      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	4a19      	ldr	r2, [pc, #100]	@ (800e234 <TIM_OC5_SetConfig+0xfc>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d003      	beq.n	800e1da <TIM_OC5_SetConfig+0xa2>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	4a18      	ldr	r2, [pc, #96]	@ (800e238 <TIM_OC5_SetConfig+0x100>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d109      	bne.n	800e1ee <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e1e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	695b      	ldr	r3, [r3, #20]
 800e1e6:	021b      	lsls	r3, r3, #8
 800e1e8:	697a      	ldr	r2, [r7, #20]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	697a      	ldr	r2, [r7, #20]
 800e1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	68fa      	ldr	r2, [r7, #12]
 800e1f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	685a      	ldr	r2, [r3, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	693a      	ldr	r2, [r7, #16]
 800e206:	621a      	str	r2, [r3, #32]
}
 800e208:	bf00      	nop
 800e20a:	371c      	adds	r7, #28
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr
 800e214:	40012c00 	.word	0x40012c00
 800e218:	50012c00 	.word	0x50012c00
 800e21c:	40013400 	.word	0x40013400
 800e220:	50013400 	.word	0x50013400
 800e224:	40014000 	.word	0x40014000
 800e228:	50014000 	.word	0x50014000
 800e22c:	40014400 	.word	0x40014400
 800e230:	50014400 	.word	0x50014400
 800e234:	40014800 	.word	0x40014800
 800e238:	50014800 	.word	0x50014800

0800e23c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b087      	sub	sp, #28
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	6a1b      	ldr	r3, [r3, #32]
 800e24a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6a1b      	ldr	r3, [r3, #32]
 800e250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e26a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	021b      	lsls	r3, r3, #8
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	4313      	orrs	r3, r2
 800e27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	051b      	lsls	r3, r3, #20
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a22      	ldr	r2, [pc, #136]	@ (800e31c <TIM_OC6_SetConfig+0xe0>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d023      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a21      	ldr	r2, [pc, #132]	@ (800e320 <TIM_OC6_SetConfig+0xe4>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d01f      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	4a20      	ldr	r2, [pc, #128]	@ (800e324 <TIM_OC6_SetConfig+0xe8>)
 800e2a4:	4293      	cmp	r3, r2
 800e2a6:	d01b      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a1f      	ldr	r2, [pc, #124]	@ (800e328 <TIM_OC6_SetConfig+0xec>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d017      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a1e      	ldr	r2, [pc, #120]	@ (800e32c <TIM_OC6_SetConfig+0xf0>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d013      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e330 <TIM_OC6_SetConfig+0xf4>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d00f      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800e334 <TIM_OC6_SetConfig+0xf8>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d00b      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a1b      	ldr	r2, [pc, #108]	@ (800e338 <TIM_OC6_SetConfig+0xfc>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d007      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	4a1a      	ldr	r2, [pc, #104]	@ (800e33c <TIM_OC6_SetConfig+0x100>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d003      	beq.n	800e2e0 <TIM_OC6_SetConfig+0xa4>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	4a19      	ldr	r2, [pc, #100]	@ (800e340 <TIM_OC6_SetConfig+0x104>)
 800e2dc:	4293      	cmp	r3, r2
 800e2de:	d109      	bne.n	800e2f4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e2e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	029b      	lsls	r3, r3, #10
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	697a      	ldr	r2, [r7, #20]
 800e2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	685a      	ldr	r2, [r3, #4]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	621a      	str	r2, [r3, #32]
}
 800e30e:	bf00      	nop
 800e310:	371c      	adds	r7, #28
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	40012c00 	.word	0x40012c00
 800e320:	50012c00 	.word	0x50012c00
 800e324:	40013400 	.word	0x40013400
 800e328:	50013400 	.word	0x50013400
 800e32c:	40014000 	.word	0x40014000
 800e330:	50014000 	.word	0x50014000
 800e334:	40014400 	.word	0x40014400
 800e338:	50014400 	.word	0x50014400
 800e33c:	40014800 	.word	0x40014800
 800e340:	50014800 	.word	0x50014800

0800e344 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e360:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e364:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	693a      	ldr	r2, [r7, #16]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e376:	f023 0307 	bic.w	r3, r3, #7
 800e37a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	4313      	orrs	r3, r2
 800e384:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	693a      	ldr	r2, [r7, #16]
 800e38c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	4a4e      	ldr	r2, [pc, #312]	@ (800e4cc <TIM_SlaveTimer_SetConfig+0x188>)
 800e394:	4293      	cmp	r3, r2
 800e396:	f000 8092 	beq.w	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e39a:	4a4c      	ldr	r2, [pc, #304]	@ (800e4cc <TIM_SlaveTimer_SetConfig+0x188>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	f200 808b 	bhi.w	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3a2:	4a4b      	ldr	r2, [pc, #300]	@ (800e4d0 <TIM_SlaveTimer_SetConfig+0x18c>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	f000 808a 	beq.w	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e3aa:	4a49      	ldr	r2, [pc, #292]	@ (800e4d0 <TIM_SlaveTimer_SetConfig+0x18c>)
 800e3ac:	4293      	cmp	r3, r2
 800e3ae:	f200 8083 	bhi.w	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3b2:	4a48      	ldr	r2, [pc, #288]	@ (800e4d4 <TIM_SlaveTimer_SetConfig+0x190>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	f000 8082 	beq.w	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e3ba:	4a46      	ldr	r2, [pc, #280]	@ (800e4d4 <TIM_SlaveTimer_SetConfig+0x190>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d87b      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3c0:	4a45      	ldr	r2, [pc, #276]	@ (800e4d8 <TIM_SlaveTimer_SetConfig+0x194>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d07b      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e3c6:	4a44      	ldr	r2, [pc, #272]	@ (800e4d8 <TIM_SlaveTimer_SetConfig+0x194>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d875      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e3d0:	d075      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e3d2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e3d6:	d86f      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3dc:	d06f      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e3de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3e2:	d869      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3e4:	2b70      	cmp	r3, #112	@ 0x70
 800e3e6:	d01a      	beq.n	800e41e <TIM_SlaveTimer_SetConfig+0xda>
 800e3e8:	2b70      	cmp	r3, #112	@ 0x70
 800e3ea:	d865      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3ec:	2b60      	cmp	r3, #96	@ 0x60
 800e3ee:	d059      	beq.n	800e4a4 <TIM_SlaveTimer_SetConfig+0x160>
 800e3f0:	2b60      	cmp	r3, #96	@ 0x60
 800e3f2:	d861      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3f4:	2b50      	cmp	r3, #80	@ 0x50
 800e3f6:	d04b      	beq.n	800e490 <TIM_SlaveTimer_SetConfig+0x14c>
 800e3f8:	2b50      	cmp	r3, #80	@ 0x50
 800e3fa:	d85d      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e3fc:	2b40      	cmp	r3, #64	@ 0x40
 800e3fe:	d019      	beq.n	800e434 <TIM_SlaveTimer_SetConfig+0xf0>
 800e400:	2b40      	cmp	r3, #64	@ 0x40
 800e402:	d859      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e404:	2b30      	cmp	r3, #48	@ 0x30
 800e406:	d05a      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e408:	2b30      	cmp	r3, #48	@ 0x30
 800e40a:	d855      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e40c:	2b20      	cmp	r3, #32
 800e40e:	d056      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e410:	2b20      	cmp	r3, #32
 800e412:	d851      	bhi.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
 800e414:	2b00      	cmp	r3, #0
 800e416:	d052      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e418:	2b10      	cmp	r3, #16
 800e41a:	d050      	beq.n	800e4be <TIM_SlaveTimer_SetConfig+0x17a>
 800e41c:	e04c      	b.n	800e4b8 <TIM_SlaveTimer_SetConfig+0x174>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800e42e:	f000 fa1d 	bl	800e86c <TIM_ETR_SetConfig>
      break;
 800e432:	e045      	b.n	800e4c0 <TIM_SlaveTimer_SetConfig+0x17c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2b05      	cmp	r3, #5
 800e43a:	d004      	beq.n	800e446 <TIM_SlaveTimer_SetConfig+0x102>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800e440:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800e444:	d101      	bne.n	800e44a <TIM_SlaveTimer_SetConfig+0x106>
      {
        return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e03b      	b.n	800e4c2 <TIM_SlaveTimer_SetConfig+0x17e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6a1a      	ldr	r2, [r3, #32]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0201 	bic.w	r2, r2, #1
 800e460:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e470:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	011b      	lsls	r3, r3, #4
 800e478:	68ba      	ldr	r2, [r7, #8]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	68ba      	ldr	r2, [r7, #8]
 800e484:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	68fa      	ldr	r2, [r7, #12]
 800e48c:	621a      	str	r2, [r3, #32]
      break;
 800e48e:	e017      	b.n	800e4c0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e49c:	461a      	mov	r2, r3
 800e49e:	f000 f8b3 	bl	800e608 <TIM_TI1_ConfigInputStage>
      break;
 800e4a2:	e00d      	b.n	800e4c0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f000 f915 	bl	800e6e0 <TIM_TI2_ConfigInputStage>
      break;
 800e4b6:	e003      	b.n	800e4c0 <TIM_SlaveTimer_SetConfig+0x17c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e4bc:	e000      	b.n	800e4c0 <TIM_SlaveTimer_SetConfig+0x17c>
      break;
 800e4be:	bf00      	nop
  }

  return status;
 800e4c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3718      	adds	r7, #24
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	00100070 	.word	0x00100070
 800e4d0:	00100040 	.word	0x00100040
 800e4d4:	00100030 	.word	0x00100030
 800e4d8:	00100020 	.word	0x00100020

0800e4dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b087      	sub	sp, #28
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60f8      	str	r0, [r7, #12]
 800e4e4:	60b9      	str	r1, [r7, #8]
 800e4e6:	607a      	str	r2, [r7, #4]
 800e4e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	6a1b      	ldr	r3, [r3, #32]
 800e4ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6a1b      	ldr	r3, [r3, #32]
 800e4f4:	f023 0201 	bic.w	r2, r3, #1
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	699b      	ldr	r3, [r3, #24]
 800e500:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	4a34      	ldr	r2, [pc, #208]	@ (800e5d8 <TIM_TI1_SetConfig+0xfc>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d033      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	4a33      	ldr	r2, [pc, #204]	@ (800e5dc <TIM_TI1_SetConfig+0x100>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d02f      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e518:	d02b      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e520:	d027      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	4a2e      	ldr	r2, [pc, #184]	@ (800e5e0 <TIM_TI1_SetConfig+0x104>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d023      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	4a2d      	ldr	r2, [pc, #180]	@ (800e5e4 <TIM_TI1_SetConfig+0x108>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d01f      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	4a2c      	ldr	r2, [pc, #176]	@ (800e5e8 <TIM_TI1_SetConfig+0x10c>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d01b      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	4a2b      	ldr	r2, [pc, #172]	@ (800e5ec <TIM_TI1_SetConfig+0x110>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d017      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	4a2a      	ldr	r2, [pc, #168]	@ (800e5f0 <TIM_TI1_SetConfig+0x114>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d013      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	4a29      	ldr	r2, [pc, #164]	@ (800e5f4 <TIM_TI1_SetConfig+0x118>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d00f      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4a28      	ldr	r2, [pc, #160]	@ (800e5f8 <TIM_TI1_SetConfig+0x11c>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d00b      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	4a27      	ldr	r2, [pc, #156]	@ (800e5fc <TIM_TI1_SetConfig+0x120>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d007      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	4a26      	ldr	r2, [pc, #152]	@ (800e600 <TIM_TI1_SetConfig+0x124>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d003      	beq.n	800e572 <TIM_TI1_SetConfig+0x96>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	4a25      	ldr	r2, [pc, #148]	@ (800e604 <TIM_TI1_SetConfig+0x128>)
 800e56e:	4293      	cmp	r3, r2
 800e570:	d101      	bne.n	800e576 <TIM_TI1_SetConfig+0x9a>
 800e572:	2301      	movs	r3, #1
 800e574:	e000      	b.n	800e578 <TIM_TI1_SetConfig+0x9c>
 800e576:	2300      	movs	r3, #0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d008      	beq.n	800e58e <TIM_TI1_SetConfig+0xb2>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e584:	697a      	ldr	r2, [r7, #20]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4313      	orrs	r3, r2
 800e58a:	617b      	str	r3, [r7, #20]
 800e58c:	e003      	b.n	800e596 <TIM_TI1_SetConfig+0xba>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	f043 0301 	orr.w	r3, r3, #1
 800e594:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e59c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	011b      	lsls	r3, r3, #4
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f023 030a 	bic.w	r3, r3, #10
 800e5b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f003 030a 	and.w	r3, r3, #10
 800e5b8:	693a      	ldr	r2, [r7, #16]
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	697a      	ldr	r2, [r7, #20]
 800e5c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	693a      	ldr	r2, [r7, #16]
 800e5c8:	621a      	str	r2, [r3, #32]
}
 800e5ca:	bf00      	nop
 800e5cc:	371c      	adds	r7, #28
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	40012c00 	.word	0x40012c00
 800e5dc:	50012c00 	.word	0x50012c00
 800e5e0:	40000400 	.word	0x40000400
 800e5e4:	50000400 	.word	0x50000400
 800e5e8:	40000800 	.word	0x40000800
 800e5ec:	50000800 	.word	0x50000800
 800e5f0:	40000c00 	.word	0x40000c00
 800e5f4:	50000c00 	.word	0x50000c00
 800e5f8:	40013400 	.word	0x40013400
 800e5fc:	50013400 	.word	0x50013400
 800e600:	40014000 	.word	0x40014000
 800e604:	50014000 	.word	0x50014000

0800e608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e608:	b480      	push	{r7}
 800e60a:	b087      	sub	sp, #28
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	60b9      	str	r1, [r7, #8]
 800e612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6a1b      	ldr	r3, [r3, #32]
 800e618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	f023 0201 	bic.w	r2, r3, #1
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	693a      	ldr	r2, [r7, #16]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	f023 030a 	bic.w	r3, r3, #10
 800e644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	693a      	ldr	r2, [r7, #16]
 800e652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	697a      	ldr	r2, [r7, #20]
 800e658:	621a      	str	r2, [r3, #32]
}
 800e65a:	bf00      	nop
 800e65c:	371c      	adds	r7, #28
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e666:	b480      	push	{r7}
 800e668:	b087      	sub	sp, #28
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	60f8      	str	r0, [r7, #12]
 800e66e:	60b9      	str	r1, [r7, #8]
 800e670:	607a      	str	r2, [r7, #4]
 800e672:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6a1b      	ldr	r3, [r3, #32]
 800e678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a1b      	ldr	r3, [r3, #32]
 800e67e:	f023 0210 	bic.w	r2, r3, #16
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	021b      	lsls	r3, r3, #8
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e6a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	031b      	lsls	r3, r3, #12
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e6b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	011b      	lsls	r3, r3, #4
 800e6be:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	693a      	ldr	r2, [r7, #16]
 800e6cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	697a      	ldr	r2, [r7, #20]
 800e6d2:	621a      	str	r2, [r3, #32]
}
 800e6d4:	bf00      	nop
 800e6d6:	371c      	adds	r7, #28
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6a1b      	ldr	r3, [r3, #32]
 800e6f6:	f023 0210 	bic.w	r2, r3, #16
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e70a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	031b      	lsls	r3, r3, #12
 800e710:	693a      	ldr	r2, [r7, #16]
 800e712:	4313      	orrs	r3, r2
 800e714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e71c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	011b      	lsls	r3, r3, #4
 800e722:	697a      	ldr	r2, [r7, #20]
 800e724:	4313      	orrs	r3, r2
 800e726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	621a      	str	r2, [r3, #32]
}
 800e734:	bf00      	nop
 800e736:	371c      	adds	r7, #28
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e740:	b480      	push	{r7}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
 800e74c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	6a1b      	ldr	r3, [r3, #32]
 800e752:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6a1b      	ldr	r3, [r3, #32]
 800e758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	69db      	ldr	r3, [r3, #28]
 800e764:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f023 0303 	bic.w	r3, r3, #3
 800e76c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4313      	orrs	r3, r2
 800e774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e776:	693b      	ldr	r3, [r7, #16]
 800e778:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e77c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	011b      	lsls	r3, r3, #4
 800e782:	b2db      	uxtb	r3, r3
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	4313      	orrs	r3, r2
 800e788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800e790:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	021b      	lsls	r3, r3, #8
 800e796:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800e79a:	697a      	ldr	r2, [r7, #20]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	621a      	str	r2, [r3, #32]
}
 800e7ac:	bf00      	nop
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
 800e7c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6a1b      	ldr	r3, [r3, #32]
 800e7d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	69db      	ldr	r3, [r3, #28]
 800e7dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7e4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	021b      	lsls	r3, r3, #8
 800e7ea:	693a      	ldr	r2, [r7, #16]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e7f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	031b      	lsls	r3, r3, #12
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	693a      	ldr	r2, [r7, #16]
 800e800:	4313      	orrs	r3, r2
 800e802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800e80a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	031b      	lsls	r3, r3, #12
 800e810:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800e814:	697a      	ldr	r2, [r7, #20]
 800e816:	4313      	orrs	r3, r2
 800e818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	693a      	ldr	r2, [r7, #16]
 800e81e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	697a      	ldr	r2, [r7, #20]
 800e824:	621a      	str	r2, [r3, #32]
}
 800e826:	bf00      	nop
 800e828:	371c      	adds	r7, #28
 800e82a:	46bd      	mov	sp, r7
 800e82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e830:	4770      	bx	lr

0800e832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e832:	b480      	push	{r7}
 800e834:	b085      	sub	sp, #20
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
 800e83a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	689b      	ldr	r3, [r3, #8]
 800e840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e848:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e84c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e84e:	683a      	ldr	r2, [r7, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	4313      	orrs	r3, r2
 800e854:	f043 0307 	orr.w	r3, r3, #7
 800e858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	609a      	str	r2, [r3, #8]
}
 800e860:	bf00      	nop
 800e862:	3714      	adds	r7, #20
 800e864:	46bd      	mov	sp, r7
 800e866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86a:	4770      	bx	lr

0800e86c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b087      	sub	sp, #28
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	021a      	lsls	r2, r3, #8
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	431a      	orrs	r2, r3
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	4313      	orrs	r3, r2
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	4313      	orrs	r3, r2
 800e898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	609a      	str	r2, [r3, #8]
}
 800e8a0:	bf00      	nop
 800e8a2:	371c      	adds	r7, #28
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b085      	sub	sp, #20
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	d101      	bne.n	800e8c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8c0:	2302      	movs	r3, #2
 800e8c2:	e097      	b.n	800e9f4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2202      	movs	r2, #2
 800e8d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4a45      	ldr	r2, [pc, #276]	@ (800ea00 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d00e      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a44      	ldr	r2, [pc, #272]	@ (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d009      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4a42      	ldr	r2, [pc, #264]	@ (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e8fe:	4293      	cmp	r3, r2
 800e900:	d004      	beq.n	800e90c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4a41      	ldr	r2, [pc, #260]	@ (800ea0c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d108      	bne.n	800e91e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e912:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	4313      	orrs	r3, r2
 800e91c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800e924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e928:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	68fa      	ldr	r2, [r7, #12]
 800e930:	4313      	orrs	r3, r2
 800e932:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68fa      	ldr	r2, [r7, #12]
 800e93a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a2f      	ldr	r2, [pc, #188]	@ (800ea00 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d040      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a2e      	ldr	r2, [pc, #184]	@ (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d03b      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e958:	d036      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e962:	d031      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a29      	ldr	r2, [pc, #164]	@ (800ea10 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d02c      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4a28      	ldr	r2, [pc, #160]	@ (800ea14 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800e974:	4293      	cmp	r3, r2
 800e976:	d027      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	4a26      	ldr	r2, [pc, #152]	@ (800ea18 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d022      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a25      	ldr	r2, [pc, #148]	@ (800ea1c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d01d      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a23      	ldr	r2, [pc, #140]	@ (800ea20 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d018      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4a22      	ldr	r2, [pc, #136]	@ (800ea24 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d013      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a18      	ldr	r2, [pc, #96]	@ (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d00e      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a17      	ldr	r2, [pc, #92]	@ (800ea0c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d009      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a1b      	ldr	r2, [pc, #108]	@ (800ea28 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d004      	beq.n	800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	4a1a      	ldr	r2, [pc, #104]	@ (800ea2c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d10c      	bne.n	800e9e2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e9ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	68ba      	ldr	r2, [r7, #8]
 800e9e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3714      	adds	r7, #20
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr
 800ea00:	40012c00 	.word	0x40012c00
 800ea04:	50012c00 	.word	0x50012c00
 800ea08:	40013400 	.word	0x40013400
 800ea0c:	50013400 	.word	0x50013400
 800ea10:	40000400 	.word	0x40000400
 800ea14:	50000400 	.word	0x50000400
 800ea18:	40000800 	.word	0x40000800
 800ea1c:	50000800 	.word	0x50000800
 800ea20:	40000c00 	.word	0x40000c00
 800ea24:	50000c00 	.word	0x50000c00
 800ea28:	40014000 	.word	0x40014000
 800ea2c:	50014000 	.word	0x50014000

0800ea30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d101      	bne.n	800ea4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea48:	2302      	movs	r3, #2
 800ea4a:	e07d      	b.n	800eb48 <HAL_TIMEx_ConfigBreakDeadTime+0x118>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eab2:	4313      	orrs	r3, r2
 800eab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	041b      	lsls	r3, r3, #16
 800eac2:	4313      	orrs	r3, r2
 800eac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	69db      	ldr	r3, [r3, #28]
 800ead0:	4313      	orrs	r3, r2
 800ead2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a1e      	ldr	r2, [pc, #120]	@ (800eb54 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d00e      	beq.n	800eafc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a1d      	ldr	r2, [pc, #116]	@ (800eb58 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d009      	beq.n	800eafc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a1b      	ldr	r2, [pc, #108]	@ (800eb5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d004      	beq.n	800eafc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4a1a      	ldr	r2, [pc, #104]	@ (800eb60 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d11c      	bne.n	800eb36 <HAL_TIMEx_ConfigBreakDeadTime+0x106>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb06:	051b      	lsls	r3, r3, #20
 800eb08:	4313      	orrs	r3, r2
 800eb0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb24:	4313      	orrs	r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb32:	4313      	orrs	r3, r2
 800eb34:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68fa      	ldr	r2, [r7, #12]
 800eb3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	40012c00 	.word	0x40012c00
 800eb58:	50012c00 	.word	0x50012c00
 800eb5c:	40013400 	.word	0x40013400
 800eb60:	50013400 	.word	0x50013400

0800eb64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb6c:	bf00      	nop
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb80:	bf00      	nop
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb94:	bf00      	nop
 800eb96:	370c      	adds	r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr

0800eba0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800eba8:	bf00      	nop
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr

0800ebb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ebbc:	bf00      	nop
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d101      	bne.n	800ec02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e042      	b.n	800ec88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d106      	bne.n	800ec1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f7f4 fa2b 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2224      	movs	r2, #36	@ 0x24
 800ec1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f022 0201 	bic.w	r2, r2, #1
 800ec30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f000 f9d6 	bl	800efec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f000 f825 	bl	800ec90 <UART_SetConfig>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d101      	bne.n	800ec50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e01b      	b.n	800ec88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	685a      	ldr	r2, [r3, #4]
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ec5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	689a      	ldr	r2, [r3, #8]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ec6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	f042 0201 	orr.w	r2, r2, #1
 800ec7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 fa55 	bl	800f130 <UART_CheckIdleState>
 800ec86:	4603      	mov	r3, r0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec94:	b094      	sub	sp, #80	@ 0x50
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800eca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	4b83      	ldr	r3, [pc, #524]	@ (800eeb4 <UART_SetConfig+0x224>)
 800eca6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	431a      	orrs	r2, r3
 800ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb4:	695b      	ldr	r3, [r3, #20]
 800ecb6:	431a      	orrs	r2, r3
 800ecb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecba:	69db      	ldr	r3, [r3, #28]
 800ecbc:	4313      	orrs	r3, r2
 800ecbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ecc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	497c      	ldr	r1, [pc, #496]	@ (800eeb8 <UART_SetConfig+0x228>)
 800ecc8:	4019      	ands	r1, r3
 800ecca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecd0:	430b      	orrs	r3, r1
 800ecd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ecde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece0:	68d9      	ldr	r1, [r3, #12]
 800ece2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	ea40 0301 	orr.w	r3, r0, r1
 800ecea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ecec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ecf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	4b6f      	ldr	r3, [pc, #444]	@ (800eeb4 <UART_SetConfig+0x224>)
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d009      	beq.n	800ed10 <UART_SetConfig+0x80>
 800ecfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	4b6e      	ldr	r3, [pc, #440]	@ (800eebc <UART_SetConfig+0x22c>)
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d004      	beq.n	800ed10 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	6a1a      	ldr	r2, [r3, #32]
 800ed0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed0c:	4313      	orrs	r3, r2
 800ed0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ed1a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ed1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed2e:	f023 000f 	bic.w	r0, r3, #15
 800ed32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed34:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ed36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	ea40 0301 	orr.w	r3, r0, r1
 800ed3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed42:	681a      	ldr	r2, [r3, #0]
 800ed44:	4b5e      	ldr	r3, [pc, #376]	@ (800eec0 <UART_SetConfig+0x230>)
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d102      	bne.n	800ed50 <UART_SetConfig+0xc0>
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed4e:	e032      	b.n	800edb6 <UART_SetConfig+0x126>
 800ed50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	4b5b      	ldr	r3, [pc, #364]	@ (800eec4 <UART_SetConfig+0x234>)
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d102      	bne.n	800ed60 <UART_SetConfig+0xd0>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed5e:	e02a      	b.n	800edb6 <UART_SetConfig+0x126>
 800ed60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	4b58      	ldr	r3, [pc, #352]	@ (800eec8 <UART_SetConfig+0x238>)
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d102      	bne.n	800ed70 <UART_SetConfig+0xe0>
 800ed6a:	2304      	movs	r3, #4
 800ed6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed6e:	e022      	b.n	800edb6 <UART_SetConfig+0x126>
 800ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	4b55      	ldr	r3, [pc, #340]	@ (800eecc <UART_SetConfig+0x23c>)
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d102      	bne.n	800ed80 <UART_SetConfig+0xf0>
 800ed7a:	2308      	movs	r3, #8
 800ed7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed7e:	e01a      	b.n	800edb6 <UART_SetConfig+0x126>
 800ed80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	4b52      	ldr	r3, [pc, #328]	@ (800eed0 <UART_SetConfig+0x240>)
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d102      	bne.n	800ed90 <UART_SetConfig+0x100>
 800ed8a:	2310      	movs	r3, #16
 800ed8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ed8e:	e012      	b.n	800edb6 <UART_SetConfig+0x126>
 800ed90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	4b4f      	ldr	r3, [pc, #316]	@ (800eed4 <UART_SetConfig+0x244>)
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d103      	bne.n	800eda2 <UART_SetConfig+0x112>
 800ed9a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800ed9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eda0:	e009      	b.n	800edb6 <UART_SetConfig+0x126>
 800eda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	4b43      	ldr	r3, [pc, #268]	@ (800eeb4 <UART_SetConfig+0x224>)
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d102      	bne.n	800edb2 <UART_SetConfig+0x122>
 800edac:	2320      	movs	r3, #32
 800edae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800edb0:	e001      	b.n	800edb6 <UART_SetConfig+0x126>
 800edb2:	2300      	movs	r3, #0
 800edb4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800edb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	4b3e      	ldr	r3, [pc, #248]	@ (800eeb4 <UART_SetConfig+0x224>)
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d005      	beq.n	800edcc <UART_SetConfig+0x13c>
 800edc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	4b3d      	ldr	r3, [pc, #244]	@ (800eebc <UART_SetConfig+0x22c>)
 800edc6:	429a      	cmp	r2, r3
 800edc8:	f040 8088 	bne.w	800eedc <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800edcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800edce:	2200      	movs	r2, #0
 800edd0:	623b      	str	r3, [r7, #32]
 800edd2:	627a      	str	r2, [r7, #36]	@ 0x24
 800edd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800edd8:	f7fb fe12 	bl	800aa00 <HAL_RCCEx_GetPeriphCLKFreq>
 800eddc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800edde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 80eb 	beq.w	800efbc <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ede6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ede8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edea:	4a3b      	ldr	r2, [pc, #236]	@ (800eed8 <UART_SetConfig+0x248>)
 800edec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edf0:	461a      	mov	r2, r3
 800edf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800edf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800edf8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800edfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfc:	685a      	ldr	r2, [r3, #4]
 800edfe:	4613      	mov	r3, r2
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	4413      	add	r3, r2
 800ee04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee06:	429a      	cmp	r2, r3
 800ee08:	d305      	bcc.n	800ee16 <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ee0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ee10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d903      	bls.n	800ee1e <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ee1c:	e048      	b.n	800eeb0 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee20:	2200      	movs	r2, #0
 800ee22:	61bb      	str	r3, [r7, #24]
 800ee24:	61fa      	str	r2, [r7, #28]
 800ee26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee2a:	4a2b      	ldr	r2, [pc, #172]	@ (800eed8 <UART_SetConfig+0x248>)
 800ee2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	2200      	movs	r2, #0
 800ee34:	613b      	str	r3, [r7, #16]
 800ee36:	617a      	str	r2, [r7, #20]
 800ee38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ee3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ee40:	f7f1 fa34 	bl	80002ac <__aeabi_uldivmod>
 800ee44:	4602      	mov	r2, r0
 800ee46:	460b      	mov	r3, r1
 800ee48:	4610      	mov	r0, r2
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	f04f 0200 	mov.w	r2, #0
 800ee50:	f04f 0300 	mov.w	r3, #0
 800ee54:	020b      	lsls	r3, r1, #8
 800ee56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ee5a:	0202      	lsls	r2, r0, #8
 800ee5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ee5e:	6849      	ldr	r1, [r1, #4]
 800ee60:	0849      	lsrs	r1, r1, #1
 800ee62:	2000      	movs	r0, #0
 800ee64:	460c      	mov	r4, r1
 800ee66:	4605      	mov	r5, r0
 800ee68:	eb12 0804 	adds.w	r8, r2, r4
 800ee6c:	eb43 0905 	adc.w	r9, r3, r5
 800ee70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	60bb      	str	r3, [r7, #8]
 800ee78:	60fa      	str	r2, [r7, #12]
 800ee7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ee7e:	4640      	mov	r0, r8
 800ee80:	4649      	mov	r1, r9
 800ee82:	f7f1 fa13 	bl	80002ac <__aeabi_uldivmod>
 800ee86:	4602      	mov	r2, r0
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ee94:	d308      	bcc.n	800eea8 <UART_SetConfig+0x218>
 800ee96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee98:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ee9c:	d204      	bcs.n	800eea8 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 800ee9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800eea4:	60da      	str	r2, [r3, #12]
 800eea6:	e003      	b.n	800eeb0 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800eeae:	e085      	b.n	800efbc <UART_SetConfig+0x32c>
 800eeb0:	e084      	b.n	800efbc <UART_SetConfig+0x32c>
 800eeb2:	bf00      	nop
 800eeb4:	46002400 	.word	0x46002400
 800eeb8:	cfff69f3 	.word	0xcfff69f3
 800eebc:	56002400 	.word	0x56002400
 800eec0:	40013800 	.word	0x40013800
 800eec4:	40004400 	.word	0x40004400
 800eec8:	40004800 	.word	0x40004800
 800eecc:	40004c00 	.word	0x40004c00
 800eed0:	40005000 	.word	0x40005000
 800eed4:	40006400 	.word	0x40006400
 800eed8:	0800f7b8 	.word	0x0800f7b8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eee4:	d13c      	bne.n	800ef60 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800eee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eee8:	2200      	movs	r2, #0
 800eeea:	603b      	str	r3, [r7, #0]
 800eeec:	607a      	str	r2, [r7, #4]
 800eeee:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eef2:	f7fb fd85 	bl	800aa00 <HAL_RCCEx_GetPeriphCLKFreq>
 800eef6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eef8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d05e      	beq.n	800efbc <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eefe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef02:	4a39      	ldr	r2, [pc, #228]	@ (800efe8 <UART_SetConfig+0x358>)
 800ef04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef08:	461a      	mov	r2, r3
 800ef0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef10:	005a      	lsls	r2, r3, #1
 800ef12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	085b      	lsrs	r3, r3, #1
 800ef18:	441a      	add	r2, r3
 800ef1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef26:	2b0f      	cmp	r3, #15
 800ef28:	d916      	bls.n	800ef58 <UART_SetConfig+0x2c8>
 800ef2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef30:	d212      	bcs.n	800ef58 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ef32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	f023 030f 	bic.w	r3, r3, #15
 800ef3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ef3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef3e:	085b      	lsrs	r3, r3, #1
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	f003 0307 	and.w	r3, r3, #7
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ef4a:	4313      	orrs	r3, r2
 800ef4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ef4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ef54:	60da      	str	r2, [r3, #12]
 800ef56:	e031      	b.n	800efbc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800ef58:	2301      	movs	r3, #1
 800ef5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ef5e:	e02d      	b.n	800efbc <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ef60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef62:	2200      	movs	r2, #0
 800ef64:	469a      	mov	sl, r3
 800ef66:	4693      	mov	fp, r2
 800ef68:	4650      	mov	r0, sl
 800ef6a:	4659      	mov	r1, fp
 800ef6c:	f7fb fd48 	bl	800aa00 <HAL_RCCEx_GetPeriphCLKFreq>
 800ef70:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ef72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d021      	beq.n	800efbc <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef7c:	4a1a      	ldr	r2, [pc, #104]	@ (800efe8 <UART_SetConfig+0x358>)
 800ef7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef82:	461a      	mov	r2, r3
 800ef84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef86:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	085b      	lsrs	r3, r3, #1
 800ef90:	441a      	add	r2, r3
 800ef92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef9e:	2b0f      	cmp	r3, #15
 800efa0:	d909      	bls.n	800efb6 <UART_SetConfig+0x326>
 800efa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efa8:	d205      	bcs.n	800efb6 <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efac:	b29a      	uxth	r2, r3
 800efae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	60da      	str	r2, [r3, #12]
 800efb4:	e002      	b.n	800efbc <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800efb6:	2301      	movs	r3, #1
 800efb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800efbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efbe:	2201      	movs	r2, #1
 800efc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800efc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc6:	2201      	movs	r2, #1
 800efc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	2200      	movs	r2, #0
 800efd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd4:	2200      	movs	r2, #0
 800efd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800efd8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3750      	adds	r7, #80	@ 0x50
 800efe0:	46bd      	mov	sp, r7
 800efe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800efe6:	bf00      	nop
 800efe8:	0800f7b8 	.word	0x0800f7b8

0800efec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800efec:	b480      	push	{r7}
 800efee:	b083      	sub	sp, #12
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eff8:	f003 0308 	and.w	r3, r3, #8
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00a      	beq.n	800f016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	430a      	orrs	r2, r1
 800f014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00a      	beq.n	800f038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	430a      	orrs	r2, r1
 800f036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f03c:	f003 0302 	and.w	r3, r3, #2
 800f040:	2b00      	cmp	r3, #0
 800f042:	d00a      	beq.n	800f05a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	685b      	ldr	r3, [r3, #4]
 800f04a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	430a      	orrs	r2, r1
 800f058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f05e:	f003 0304 	and.w	r3, r3, #4
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00a      	beq.n	800f07c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	430a      	orrs	r2, r1
 800f07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f080:	f003 0310 	and.w	r3, r3, #16
 800f084:	2b00      	cmp	r3, #0
 800f086:	d00a      	beq.n	800f09e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	430a      	orrs	r2, r1
 800f09c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0a2:	f003 0320 	and.w	r3, r3, #32
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	689b      	ldr	r3, [r3, #8]
 800f0b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d01a      	beq.n	800f102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	430a      	orrs	r2, r1
 800f0e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f0e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0ea:	d10a      	bne.n	800f102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	685b      	ldr	r3, [r3, #4]
 800f0f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	430a      	orrs	r2, r1
 800f100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d00a      	beq.n	800f124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	430a      	orrs	r2, r1
 800f122:	605a      	str	r2, [r3, #4]
  }
}
 800f124:	bf00      	nop
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b098      	sub	sp, #96	@ 0x60
 800f134:	af02      	add	r7, sp, #8
 800f136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f140:	f7f4 fad6 	bl	80036f0 <HAL_GetTick>
 800f144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f003 0308 	and.w	r3, r3, #8
 800f150:	2b08      	cmp	r3, #8
 800f152:	d12f      	bne.n	800f1b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f158:	9300      	str	r3, [sp, #0]
 800f15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15c:	2200      	movs	r2, #0
 800f15e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f88e 	bl	800f284 <UART_WaitOnFlagUntilTimeout>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d022      	beq.n	800f1b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f176:	e853 3f00 	ldrex	r3, [r3]
 800f17a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f17e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f182:	653b      	str	r3, [r7, #80]	@ 0x50
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	461a      	mov	r2, r3
 800f18a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f18c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f18e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f194:	e841 2300 	strex	r3, r2, [r1]
 800f198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d1e6      	bne.n	800f16e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2220      	movs	r2, #32
 800f1a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1b0:	2303      	movs	r3, #3
 800f1b2:	e063      	b.n	800f27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f003 0304 	and.w	r3, r3, #4
 800f1be:	2b04      	cmp	r3, #4
 800f1c0:	d149      	bne.n	800f256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f1c6:	9300      	str	r3, [sp, #0]
 800f1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f000 f857 	bl	800f284 <UART_WaitOnFlagUntilTimeout>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d03c      	beq.n	800f256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e4:	e853 3f00 	ldrex	r3, [r3]
 800f1e8:	623b      	str	r3, [r7, #32]
   return(result);
 800f1ea:	6a3b      	ldr	r3, [r7, #32]
 800f1ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f1f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f202:	e841 2300 	strex	r3, r2, [r1]
 800f206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d1e6      	bne.n	800f1dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3308      	adds	r3, #8
 800f214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	e853 3f00 	ldrex	r3, [r3]
 800f21c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f023 0301 	bic.w	r3, r3, #1
 800f224:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3308      	adds	r3, #8
 800f22c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f22e:	61fa      	str	r2, [r7, #28]
 800f230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f232:	69b9      	ldr	r1, [r7, #24]
 800f234:	69fa      	ldr	r2, [r7, #28]
 800f236:	e841 2300 	strex	r3, r2, [r1]
 800f23a:	617b      	str	r3, [r7, #20]
   return(result);
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1e5      	bne.n	800f20e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2220      	movs	r2, #32
 800f246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f252:	2303      	movs	r3, #3
 800f254:	e012      	b.n	800f27c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2220      	movs	r2, #32
 800f25a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2220      	movs	r2, #32
 800f262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2200      	movs	r2, #0
 800f26a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2200      	movs	r2, #0
 800f270:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f27a:	2300      	movs	r3, #0
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3758      	adds	r7, #88	@ 0x58
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	603b      	str	r3, [r7, #0]
 800f290:	4613      	mov	r3, r2
 800f292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f294:	e04f      	b.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29c:	d04b      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f29e:	f7f4 fa27 	bl	80036f0 <HAL_GetTick>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	1ad3      	subs	r3, r2, r3
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d302      	bcc.n	800f2b4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2ae:	69bb      	ldr	r3, [r7, #24]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2b4:	2303      	movs	r3, #3
 800f2b6:	e04e      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f003 0304 	and.w	r3, r3, #4
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d037      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	2b80      	cmp	r3, #128	@ 0x80
 800f2ca:	d034      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b40      	cmp	r3, #64	@ 0x40
 800f2d0:	d031      	beq.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	69db      	ldr	r3, [r3, #28]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	d110      	bne.n	800f302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2208      	movs	r2, #8
 800f2e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f000 f838 	bl	800f35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	2208      	movs	r2, #8
 800f2f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	e029      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	69db      	ldr	r3, [r3, #28]
 800f308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f30c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f310:	d111      	bne.n	800f336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f31a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f31c:	68f8      	ldr	r0, [r7, #12]
 800f31e:	f000 f81e 	bl	800f35e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2220      	movs	r2, #32
 800f326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2200      	movs	r2, #0
 800f32e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f332:	2303      	movs	r3, #3
 800f334:	e00f      	b.n	800f356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	69da      	ldr	r2, [r3, #28]
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	4013      	ands	r3, r2
 800f340:	68ba      	ldr	r2, [r7, #8]
 800f342:	429a      	cmp	r2, r3
 800f344:	bf0c      	ite	eq
 800f346:	2301      	moveq	r3, #1
 800f348:	2300      	movne	r3, #0
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	461a      	mov	r2, r3
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	429a      	cmp	r2, r3
 800f352:	d0a0      	beq.n	800f296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f35e:	b480      	push	{r7}
 800f360:	b095      	sub	sp, #84	@ 0x54
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f36e:	e853 3f00 	ldrex	r3, [r3]
 800f372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f37a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	461a      	mov	r2, r3
 800f382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f384:	643b      	str	r3, [r7, #64]	@ 0x40
 800f386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f38a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f38c:	e841 2300 	strex	r3, r2, [r1]
 800f390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	2b00      	cmp	r3, #0
 800f396:	d1e6      	bne.n	800f366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	3308      	adds	r3, #8
 800f39e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	e853 3f00 	ldrex	r3, [r3]
 800f3a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f3ae:	f023 0301 	bic.w	r3, r3, #1
 800f3b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f3bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f3be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f3c4:	e841 2300 	strex	r3, r2, [r1]
 800f3c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d1e3      	bne.n	800f398 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d118      	bne.n	800f40a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	f023 0310 	bic.w	r3, r3, #16
 800f3ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3f6:	61bb      	str	r3, [r7, #24]
 800f3f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fa:	6979      	ldr	r1, [r7, #20]
 800f3fc:	69ba      	ldr	r2, [r7, #24]
 800f3fe:	e841 2300 	strex	r3, r2, [r1]
 800f402:	613b      	str	r3, [r7, #16]
   return(result);
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d1e6      	bne.n	800f3d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2220      	movs	r2, #32
 800f40e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2200      	movs	r2, #0
 800f416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	2200      	movs	r2, #0
 800f41c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800f41e:	bf00      	nop
 800f420:	3754      	adds	r7, #84	@ 0x54
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b085      	sub	sp, #20
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d101      	bne.n	800f440 <HAL_UARTEx_DisableFifoMode+0x16>
 800f43c:	2302      	movs	r3, #2
 800f43e:	e027      	b.n	800f490 <HAL_UARTEx_DisableFifoMode+0x66>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2201      	movs	r2, #1
 800f444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2224      	movs	r2, #36	@ 0x24
 800f44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	681a      	ldr	r2, [r3, #0]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f022 0201 	bic.w	r2, r2, #1
 800f466:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f46e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2200      	movs	r2, #0
 800f474:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	68fa      	ldr	r2, [r7, #12]
 800f47c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2220      	movs	r2, #32
 800f482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f48e:	2300      	movs	r3, #0
}
 800f490:	4618      	mov	r0, r3
 800f492:	3714      	adds	r7, #20
 800f494:	46bd      	mov	sp, r7
 800f496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49a:	4770      	bx	lr

0800f49c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d101      	bne.n	800f4b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f4b0:	2302      	movs	r3, #2
 800f4b2:	e02d      	b.n	800f510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2224      	movs	r2, #36	@ 0x24
 800f4c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f022 0201 	bic.w	r2, r2, #1
 800f4da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	430a      	orrs	r2, r1
 800f4ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 f84f 	bl	800f594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	68fa      	ldr	r2, [r7, #12]
 800f4fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2220      	movs	r2, #32
 800f502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d101      	bne.n	800f530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f52c:	2302      	movs	r3, #2
 800f52e:	e02d      	b.n	800f58c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2224      	movs	r2, #36	@ 0x24
 800f53c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f022 0201 	bic.w	r2, r2, #1
 800f556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	430a      	orrs	r2, r1
 800f56a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f811 	bl	800f594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2220      	movs	r2, #32
 800f57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3710      	adds	r7, #16
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f594:	b480      	push	{r7}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d108      	bne.n	800f5b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f5b4:	e031      	b.n	800f61a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f5b6:	2308      	movs	r3, #8
 800f5b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f5ba:	2308      	movs	r3, #8
 800f5bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	0e5b      	lsrs	r3, r3, #25
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	f003 0307 	and.w	r3, r3, #7
 800f5cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	0f5b      	lsrs	r3, r3, #29
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	f003 0307 	and.w	r3, r3, #7
 800f5dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f5de:	7bbb      	ldrb	r3, [r7, #14]
 800f5e0:	7b3a      	ldrb	r2, [r7, #12]
 800f5e2:	4911      	ldr	r1, [pc, #68]	@ (800f628 <UARTEx_SetNbDataToProcess+0x94>)
 800f5e4:	5c8a      	ldrb	r2, [r1, r2]
 800f5e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f5ea:	7b3a      	ldrb	r2, [r7, #12]
 800f5ec:	490f      	ldr	r1, [pc, #60]	@ (800f62c <UARTEx_SetNbDataToProcess+0x98>)
 800f5ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f5f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f5fc:	7bfb      	ldrb	r3, [r7, #15]
 800f5fe:	7b7a      	ldrb	r2, [r7, #13]
 800f600:	4909      	ldr	r1, [pc, #36]	@ (800f628 <UARTEx_SetNbDataToProcess+0x94>)
 800f602:	5c8a      	ldrb	r2, [r1, r2]
 800f604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f608:	7b7a      	ldrb	r2, [r7, #13]
 800f60a:	4908      	ldr	r1, [pc, #32]	@ (800f62c <UARTEx_SetNbDataToProcess+0x98>)
 800f60c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f60e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f612:	b29a      	uxth	r2, r3
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800f61a:	bf00      	nop
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	0800f7d0 	.word	0x0800f7d0
 800f62c:	0800f7d8 	.word	0x0800f7d8

0800f630 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800f630:	b480      	push	{r7}
 800f632:	b083      	sub	sp, #12
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	f043 0202 	orr.w	r2, r3, #2
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800f646:	683b      	ldr	r3, [r7, #0]
 800f648:	685a      	ldr	r2, [r3, #4]
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	021b      	lsls	r3, r3, #8
 800f650:	431a      	orrs	r2, r3
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f023 0202 	bic.w	r2, r3, #2
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	601a      	str	r2, [r3, #0]
}
 800f662:	bf00      	nop
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <memset>:
 800f66e:	4402      	add	r2, r0
 800f670:	4603      	mov	r3, r0
 800f672:	4293      	cmp	r3, r2
 800f674:	d100      	bne.n	800f678 <memset+0xa>
 800f676:	4770      	bx	lr
 800f678:	f803 1b01 	strb.w	r1, [r3], #1
 800f67c:	e7f9      	b.n	800f672 <memset+0x4>
	...

0800f680 <__libc_init_array>:
 800f680:	b570      	push	{r4, r5, r6, lr}
 800f682:	4d0d      	ldr	r5, [pc, #52]	@ (800f6b8 <__libc_init_array+0x38>)
 800f684:	2600      	movs	r6, #0
 800f686:	4c0d      	ldr	r4, [pc, #52]	@ (800f6bc <__libc_init_array+0x3c>)
 800f688:	1b64      	subs	r4, r4, r5
 800f68a:	10a4      	asrs	r4, r4, #2
 800f68c:	42a6      	cmp	r6, r4
 800f68e:	d109      	bne.n	800f6a4 <__libc_init_array+0x24>
 800f690:	4d0b      	ldr	r5, [pc, #44]	@ (800f6c0 <__libc_init_array+0x40>)
 800f692:	2600      	movs	r6, #0
 800f694:	4c0b      	ldr	r4, [pc, #44]	@ (800f6c4 <__libc_init_array+0x44>)
 800f696:	f000 f817 	bl	800f6c8 <_init>
 800f69a:	1b64      	subs	r4, r4, r5
 800f69c:	10a4      	asrs	r4, r4, #2
 800f69e:	42a6      	cmp	r6, r4
 800f6a0:	d105      	bne.n	800f6ae <__libc_init_array+0x2e>
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6a8:	3601      	adds	r6, #1
 800f6aa:	4798      	blx	r3
 800f6ac:	e7ee      	b.n	800f68c <__libc_init_array+0xc>
 800f6ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800f6b2:	3601      	adds	r6, #1
 800f6b4:	4798      	blx	r3
 800f6b6:	e7f2      	b.n	800f69e <__libc_init_array+0x1e>
 800f6b8:	0800f7e8 	.word	0x0800f7e8
 800f6bc:	0800f7e8 	.word	0x0800f7e8
 800f6c0:	0800f7e8 	.word	0x0800f7e8
 800f6c4:	0800f7ec 	.word	0x0800f7ec

0800f6c8 <_init>:
 800f6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ca:	bf00      	nop
 800f6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ce:	bc08      	pop	{r3}
 800f6d0:	469e      	mov	lr, r3
 800f6d2:	4770      	bx	lr

0800f6d4 <_fini>:
 800f6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6d6:	bf00      	nop
 800f6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6da:	bc08      	pop	{r3}
 800f6dc:	469e      	mov	lr, r3
 800f6de:	4770      	bx	lr
